
BLE_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010610  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  08010750  08010750  00020750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010e44  08010e44  00020e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010e4c  08010e4c  00020e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010e50  08010e50  00020e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000008  08010e54  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  200000a4  08010ef0  000300a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000928  08011773  00030928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000960  080117a8  00030960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000ef0  20000978  080117b9  00030978  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001868  080117b9  00031868  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030971  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 15 .debug_info   000343fa  00000000  00000000  000309a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000656d  00000000  00000000  00064d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002d40  00000000  00000000  0006b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002a78  00000000  00000000  0006e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d91f  00000000  00000000  00070ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00032ffb  00000000  00000000  0009e3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fbe13  00000000  00000000  000d13da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001cd1ed  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cb1c  00000000  00000000  001cd240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000978 	.word	0x20000978
 800015c:	00000000 	.word	0x00000000
 8000160:	08010738 	.word	0x08010738

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000097c 	.word	0x2000097c
 800017c:	08010738 	.word	0x08010738

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <APPD_EnableCPU2+0x34>)
 8000eb4:	1d3c      	adds	r4, r7, #4
 8000eb6:	461d      	mov	r5, r3
 8000eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ec0:	c403      	stmia	r4!, {r0, r1}
 8000ec2:	8022      	strh	r2, [r4, #0]
 8000ec4:	3402      	adds	r4, #2
 8000ec6:	0c13      	lsrs	r3, r2, #16
 8000ec8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000eca:	f009 fe7b 	bl	800abc4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f009 f8d0 	bl	800a076 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000ed6:	bf00      	nop
}
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	08010750 	.word	0x08010750

08000ee4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <LL_C2_PWR_SetPowerMode+0x28>)
 8000eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ef2:	f023 0207 	bic.w	r2, r3, #7
 8000ef6:	4905      	ldr	r1, [pc, #20]	; (8000f0c <LL_C2_PWR_SetPowerMode+0x28>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	58000400 	.word	0x58000400

08000f10 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f1a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f1e:	4905      	ldr	r1, [pc, #20]	; (8000f34 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	58000800 	.word	0x58000800

08000f38 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f52:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	cafecafe 	.word	0xcafecafe

08000f74 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	608b      	str	r3, [r1, #8]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ff4:	d101      	bne.n	8000ffa <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800100a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800101a:	d101      	bne.n	8001020 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800103a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4313      	orrs	r3, r2
 8001042:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4013      	ands	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001050:	68fb      	ldr	r3, [r7, #12]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <LL_DBGMCU_GetDeviceID+0x18>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e0042000 	.word	0xe0042000

0800107c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <LL_DBGMCU_GetRevisionID+0x18>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	b29b      	uxth	r3, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e0042000 	.word	0xe0042000

08001098 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	605a      	str	r2, [r3, #4]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	605a      	str	r2, [r3, #4]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	041b      	lsls	r3, r3, #16
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	615a      	str	r2, [r3, #20]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695a      	ldr	r2, [r3, #20]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	615a      	str	r2, [r3, #20]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	609a      	str	r2, [r3, #8]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	619a      	str	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <LL_LPM_EnableSleep+0x1c>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <LL_LPM_EnableSleep+0x1c>)
 8001166:	f023 0304 	bic.w	r3, r3, #4
 800116a:	6113      	str	r3, [r2, #16]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	22ca      	movs	r2, #202	; 0xca
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2253      	movs	r2, #83	; 0x53
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f023 0207 	bic.w	r2, r3, #7
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	609a      	str	r2, [r3, #8]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <MX_APPE_Config+0x18>)
 80011e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80011e8:	f000 f824 	bl	8001234 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80011ec:	f000 f864 	bl	80012b8 <Config_HSE>

  return;
 80011f0:	bf00      	nop
}
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58004000 	.word	0x58004000

080011f8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80011fc:	f000 f870 	bl	80012e0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001200:	f000 f888 	bl	8001314 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001204:	4903      	ldr	r1, [pc, #12]	; (8001214 <MX_APPE_Init+0x1c>)
 8001206:	2000      	movs	r0, #0
 8001208:	f000 fdd4 	bl	8001db4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800120c:	f000 f890 	bl	8001330 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001210:	bf00      	nop
}
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000bb8 	.word	0x20000bb8

08001218 <Init_Smps>:

void Init_Smps(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800121c:	bf00      	nop
}
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <Init_Exti>:

void Init_Exti(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800122a:	2050      	movs	r0, #80	; 0x50
 800122c:	f7ff fe70 	bl	8000f10 <LL_EXTI_EnableIT_32_63>

  return;
 8001230:	bf00      	nop
}
 8001232:	bd80      	pop	{r7, pc}

08001234 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001238:	f000 f804 	bl	8001244 <Reset_BackupDomain>

  Reset_IPCC();
 800123c:	f000 f81a 	bl	8001274 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001240:	bf00      	nop
}
 8001242:	bd80      	pop	{r7, pc}

08001244 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001248:	f7ff feca 	bl	8000fe0 <LL_RCC_IsActiveFlag_PINRST>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00d      	beq.n	800126e <Reset_BackupDomain+0x2a>
 8001252:	f7ff fed8 	bl	8001006 <LL_RCC_IsActiveFlag_SFTRST>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d108      	bne.n	800126e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800125c:	f004 fcb2 	bl	8005bc4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001260:	f004 fcb0 	bl	8005bc4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001264:	f7ff fe9a 	bl	8000f9c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001268:	f7ff fea9 	bl	8000fbe <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800126c:	bf00      	nop
 800126e:	bf00      	nop
}
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001278:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800127c:	f7ff fed6 	bl	800102c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001280:	213f      	movs	r1, #63	; 0x3f
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <Reset_IPCC+0x40>)
 8001284:	f7ff ff4e 	bl	8001124 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001288:	213f      	movs	r1, #63	; 0x3f
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <Reset_IPCC+0x40>)
 800128c:	f7ff ff58 	bl	8001140 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001290:	213f      	movs	r1, #63	; 0x3f
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <Reset_IPCC+0x40>)
 8001294:	f7ff ff00 	bl	8001098 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001298:	213f      	movs	r1, #63	; 0x3f
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <Reset_IPCC+0x40>)
 800129c:	f7ff ff1f 	bl	80010de <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80012a0:	213f      	movs	r1, #63	; 0x3f
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <Reset_IPCC+0x40>)
 80012a4:	f7ff ff0a 	bl	80010bc <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80012a8:	213f      	movs	r1, #63	; 0x3f
 80012aa:	4802      	ldr	r0, [pc, #8]	; (80012b4 <Reset_IPCC+0x40>)
 80012ac:	f7ff ff29 	bl	8001102 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80012b0:	bf00      	nop
}
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	58000c00 	.word	0x58000c00

080012b8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80012be:	2000      	movs	r0, #0
 80012c0:	f008 fe9a 	bl	8009ff8 <OTP_Read>
 80012c4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	799b      	ldrb	r3, [r3, #6]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe31 	bl	8000f38 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
}
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <System_Init>:

static void System_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  Init_Smps();
 80012e4:	f7ff ff98 	bl	8001218 <Init_Smps>

  Init_Exti();
 80012e8:	f7ff ff9d 	bl	8001226 <Init_Exti>

  Init_Rtc();
 80012ec:	f000 f802 	bl	80012f4 <Init_Rtc>

  return;
 80012f0:	bf00      	nop
}
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <Init_Rtc+0x1c>)
 80012fa:	f7ff ff4c 	bl	8001196 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80012fe:	2100      	movs	r1, #0
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <Init_Rtc+0x1c>)
 8001302:	f7ff ff58 	bl	80011b6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001306:	4802      	ldr	r0, [pc, #8]	; (8001310 <Init_Rtc+0x1c>)
 8001308:	f7ff ff38 	bl	800117c <LL_RTC_EnableWriteProtection>

  return;
 800130c:	bf00      	nop
}
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40002800 	.word	0x40002800

08001314 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001318:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800131c:	f7ff fe2a 	bl	8000f74 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001320:	f009 fcdc 	bl	800acdc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001324:	2004      	movs	r0, #4
 8001326:	f7ff fddd 	bl	8000ee4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800132a:	bf00      	nop
}
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001336:	f009 fa8f 	bl	800a858 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <appe_Tl_Init+0x50>)
 800133c:	2100      	movs	r1, #0
 800133e:	2008      	movs	r0, #8
 8001340:	f009 fe0a 	bl	800af58 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <appe_Tl_Init+0x54>)
 8001346:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <appe_Tl_Init+0x58>)
 800134a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	480e      	ldr	r0, [pc, #56]	; (800138c <appe_Tl_Init+0x5c>)
 8001352:	f008 ff6b 	bl	800a22c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <appe_Tl_Init+0x60>)
 8001358:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <appe_Tl_Init+0x64>)
 800135c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <appe_Tl_Init+0x68>)
 8001360:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001362:	f240 533c 	movw	r3, #1340	; 0x53c
 8001366:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4618      	mov	r0, r3
 800136e:	f009 fbb5 	bl	800aadc <TL_MM_Init>

  TL_Enable();
 8001372:	f009 fa6b 	bl	800a84c <TL_Enable>

  return;
 8001376:	bf00      	nop
}
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	0800a265 	.word	0x0800a265
 8001384:	200005f4 	.word	0x200005f4
 8001388:	0800139d 	.word	0x0800139d
 800138c:	080013b5 	.word	0x080013b5
 8001390:	2000080c 	.word	0x2000080c
 8001394:	20000700 	.word	0x20000700
 8001398:	200000b8 	.word	0x200000b8

0800139c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80013a6:	bf00      	nop
}
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	330b      	adds	r3, #11
 80013c2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80013ce:	2b07      	cmp	r3, #7
 80013d0:	d81f      	bhi.n	8001412 <APPE_SysUserEvtRx+0x5e>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <APPE_SysUserEvtRx+0x24>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013f9 	.word	0x080013f9
 80013dc:	0800140b 	.word	0x0800140b
 80013e0:	08001413 	.word	0x08001413
 80013e4:	08001413 	.word	0x08001413
 80013e8:	08001413 	.word	0x08001413
 80013ec:	08001413 	.word	0x08001413
 80013f0:	08001413 	.word	0x08001413
 80013f4:	08001413 	.word	0x08001413
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4618      	mov	r0, r3
 80013fe:	f008 fe67 	bl	800a0d0 <SHCI_GetWirelessFwInfo>
//    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
//    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
//    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

//    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f81b 	bl	800143e <APPE_SysEvtReadyProcessing>
    break;
 8001408:	e004      	b.n	8001414 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
//    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f806 	bl	800141c <APPE_SysEvtError>
    break;
 8001410:	e000      	b.n	8001414 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
//    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001412:	bf00      	nop
  }

  return;
 8001414:	bf00      	nop
}
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	330b      	adds	r3, #11
 800142a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3302      	adds	r3, #2
 8001430:	60bb      	str	r3, [r7, #8]
  }
  else
  {
//    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001432:	bf00      	nop
}
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b08a      	sub	sp, #40	; 0x28
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	330b      	adds	r3, #11
 8001462:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3302      	adds	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d11d      	bne.n	80014ae <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
//    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001472:	f7ff fd1b 	bl	8000eac <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001476:	230f      	movs	r3, #15
 8001478:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800147a:	237f      	movs	r3, #127	; 0x7f
 800147c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800147e:	f7ff fdfd 	bl	800107c <LL_DBGMCU_GetRevisionID>
 8001482:	6278      	str	r0, [r7, #36]	; 0x24

//    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	b29b      	uxth	r3, r3
 8001488:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800148a:	f7ff fde9 	bl	8001060 <LL_DBGMCU_GetDeviceID>
 800148e:	6238      	str	r0, [r7, #32]
//    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	b29b      	uxth	r3, r3
 8001494:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	4618      	mov	r0, r3
 800149c:	f008 fe02 	bl	800a0a4 <SHCI_C2_Config>

    APP_BLE_Init();
 80014a0:	f001 fba0 	bl	8002be4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80014a4:	2100      	movs	r1, #0
 80014a6:	2001      	movs	r0, #1
 80014a8:	f009 fc2a 	bl	800ad00 <UTIL_LPM_SetOffMode>
  else
  {
//    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80014ac:	e007      	b.n	80014be <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d103      	bne.n	80014be <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
  return;
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
}
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ce:	f002 fc9b 	bl	8003e08 <HAL_GetTick>
 80014d2:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014de:	d00a      	beq.n	80014f6 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80014e0:	f002 fcaa 	bl	8003e38 <HAL_GetTickFreq>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ee:	e002      	b.n	80014f6 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80014f0:	f7ff fe34 	bl	800115c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80014f4:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80014f6:	f002 fc87 	bl	8003e08 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	429a      	cmp	r2, r3
 8001504:	d8f4      	bhi.n	80014f0 <HAL_Delay+0x2a>
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f009 fc22 	bl	800ad60 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001524:	bf00      	nop
}
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f009 fc10 	bl	800ad60 <UTIL_SEQ_Run>

  return;
 8001540:	bf00      	nop
}
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001550:	2100      	movs	r1, #0
 8001552:	2008      	movs	r0, #8
 8001554:	f009 fd22 	bl	800af9c <UTIL_SEQ_SetTask>
  return;
 8001558:	bf00      	nop
}
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001568:	2002      	movs	r0, #2
 800156a:	f009 fd83 	bl	800b074 <UTIL_SEQ_SetEvt>
  return;
 800156e:	bf00      	nop
}
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800157e:	2002      	movs	r0, #2
 8001580:	f009 fd98 	bl	800b0b4 <UTIL_SEQ_WaitEvt>
  return;
 8001584:	bf00      	nop
}
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <LL_EXTI_EnableIT_0_31>:
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001596:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800159a:	4905      	ldr	r1, [pc, #20]	; (80015b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4313      	orrs	r3, r2
 80015a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	58000800 	.word	0x58000800

080015b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4904      	ldr	r1, [pc, #16]	; (80015d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]

}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	58000800 	.word	0x58000800

080015d8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <ReadRtcSsrValue+0x3c>)
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <ReadRtcSsrValue+0x3c>)
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80015ee:	e005      	b.n	80015fc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <ReadRtcSsrValue+0x3c>)
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d1f5      	bne.n	80015f0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001604:	683b      	ldr	r3, [r7, #0]
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40002800 	.word	0x40002800

08001618 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	491d      	ldr	r1, [pc, #116]	; (80016a0 <LinkTimerAfter+0x88>)
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3315      	adds	r3, #21
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	2b06      	cmp	r3, #6
 8001640:	d009      	beq.n	8001656 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	4916      	ldr	r1, [pc, #88]	; (80016a0 <LinkTimerAfter+0x88>)
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	3314      	adds	r3, #20
 8001652:	79fa      	ldrb	r2, [r7, #7]
 8001654:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4911      	ldr	r1, [pc, #68]	; (80016a0 <LinkTimerAfter+0x88>)
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	3315      	adds	r3, #21
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <LinkTimerAfter+0x88>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	3314      	adds	r3, #20
 800167a:	79ba      	ldrb	r2, [r7, #6]
 800167c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800167e:	79ba      	ldrb	r2, [r7, #6]
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <LinkTimerAfter+0x88>)
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	3315      	adds	r3, #21
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	701a      	strb	r2, [r3, #0]

  return;
 8001692:	bf00      	nop
}
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000994 	.word	0x20000994

080016a4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	460a      	mov	r2, r1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	4613      	mov	r3, r2
 80016b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <LinkTimerBefore+0xb8>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	79ba      	ldrb	r2, [r7, #6]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d032      	beq.n	8001726 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80016c0:	79ba      	ldrb	r2, [r7, #6]
 80016c2:	4927      	ldr	r1, [pc, #156]	; (8001760 <LinkTimerBefore+0xbc>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	440b      	add	r3, r1
 80016ce:	3314      	adds	r3, #20
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	4922      	ldr	r1, [pc, #136]	; (8001760 <LinkTimerBefore+0xbc>)
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	3315      	adds	r3, #21
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80016e8:	79fa      	ldrb	r2, [r7, #7]
 80016ea:	491d      	ldr	r1, [pc, #116]	; (8001760 <LinkTimerBefore+0xbc>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3315      	adds	r3, #21
 80016f8:	79ba      	ldrb	r2, [r7, #6]
 80016fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	4918      	ldr	r1, [pc, #96]	; (8001760 <LinkTimerBefore+0xbc>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	3314      	adds	r3, #20
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001710:	79ba      	ldrb	r2, [r7, #6]
 8001712:	4913      	ldr	r1, [pc, #76]	; (8001760 <LinkTimerBefore+0xbc>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	3314      	adds	r3, #20
 8001720:	79fa      	ldrb	r2, [r7, #7]
 8001722:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001724:	e014      	b.n	8001750 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001726:	79fa      	ldrb	r2, [r7, #7]
 8001728:	490d      	ldr	r1, [pc, #52]	; (8001760 <LinkTimerBefore+0xbc>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	3315      	adds	r3, #21
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800173a:	79ba      	ldrb	r2, [r7, #6]
 800173c:	4908      	ldr	r1, [pc, #32]	; (8001760 <LinkTimerBefore+0xbc>)
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3314      	adds	r3, #20
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	701a      	strb	r2, [r3, #0]
  return;
 800174e:	bf00      	nop
}
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000a24 	.word	0x20000a24
 8001760:	20000994 	.word	0x20000994

08001764 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800176e:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <linkTimer+0x144>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b06      	cmp	r3, #6
 8001776:	d118      	bne.n	80017aa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001778:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <linkTimer+0x144>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <linkTimer+0x148>)
 8001780:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001782:	4a49      	ldr	r2, [pc, #292]	; (80018a8 <linkTimer+0x144>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001788:	79fa      	ldrb	r2, [r7, #7]
 800178a:	4949      	ldr	r1, [pc, #292]	; (80018b0 <linkTimer+0x14c>)
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	3315      	adds	r3, #21
 8001798:	2206      	movs	r2, #6
 800179a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800179c:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <linkTimer+0x150>)
 800179e:	f04f 32ff 	mov.w	r2, #4294967295
 80017a2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	81fb      	strh	r3, [r7, #14]
 80017a8:	e078      	b.n	800189c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80017aa:	f000 f909 	bl	80019c0 <ReturnTimeElapsed>
 80017ae:	4603      	mov	r3, r0
 80017b0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80017b2:	79fa      	ldrb	r2, [r7, #7]
 80017b4:	493e      	ldr	r1, [pc, #248]	; (80018b0 <linkTimer+0x14c>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	3308      	adds	r3, #8
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	79fa      	ldrb	r2, [r7, #7]
 80017c8:	4419      	add	r1, r3
 80017ca:	4839      	ldr	r0, [pc, #228]	; (80018b0 <linkTimer+0x14c>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4403      	add	r3, r0
 80017d6:	3308      	adds	r3, #8
 80017d8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80017da:	79fa      	ldrb	r2, [r7, #7]
 80017dc:	4934      	ldr	r1, [pc, #208]	; (80018b0 <linkTimer+0x14c>)
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3308      	adds	r3, #8
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <linkTimer+0x144>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4619      	mov	r1, r3
 80017f6:	4a2e      	ldr	r2, [pc, #184]	; (80018b0 <linkTimer+0x14c>)
 80017f8:	460b      	mov	r3, r1
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	440b      	add	r3, r1
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	3308      	adds	r3, #8
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	429a      	cmp	r2, r3
 800180a:	d337      	bcc.n	800187c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <linkTimer+0x144>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001812:	7b7a      	ldrb	r2, [r7, #13]
 8001814:	4926      	ldr	r1, [pc, #152]	; (80018b0 <linkTimer+0x14c>)
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	3315      	adds	r3, #21
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001826:	e013      	b.n	8001850 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001828:	7b7a      	ldrb	r2, [r7, #13]
 800182a:	4921      	ldr	r1, [pc, #132]	; (80018b0 <linkTimer+0x14c>)
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	3315      	adds	r3, #21
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800183c:	7b7a      	ldrb	r2, [r7, #13]
 800183e:	491c      	ldr	r1, [pc, #112]	; (80018b0 <linkTimer+0x14c>)
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3315      	adds	r3, #21
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001850:	7b3b      	ldrb	r3, [r7, #12]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d00b      	beq.n	800186e <linkTimer+0x10a>
 8001856:	7b3a      	ldrb	r2, [r7, #12]
 8001858:	4915      	ldr	r1, [pc, #84]	; (80018b0 <linkTimer+0x14c>)
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3308      	adds	r3, #8
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	429a      	cmp	r2, r3
 800186c:	d2dc      	bcs.n	8001828 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800186e:	7b7a      	ldrb	r2, [r7, #13]
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fecf 	bl	8001618 <LinkTimerAfter>
 800187a:	e00f      	b.n	800189c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <linkTimer+0x144>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff0c 	bl	80016a4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <linkTimer+0x144>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <linkTimer+0x148>)
 8001894:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <linkTimer+0x144>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800189c:	89fb      	ldrh	r3, [r7, #14]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000a24 	.word	0x20000a24
 80018ac:	20000a25 	.word	0x20000a25
 80018b0:	20000994 	.word	0x20000994
 80018b4:	20000a28 	.word	0x20000a28

080018b8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80018c8:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <UnlinkTimer+0xf8>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d111      	bne.n	80018f8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <UnlinkTimer+0xf8>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <UnlinkTimer+0xfc>)
 80018dc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	4935      	ldr	r1, [pc, #212]	; (80019b8 <UnlinkTimer+0x100>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	3315      	adds	r3, #21
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <UnlinkTimer+0xf8>)
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e03e      	b.n	8001976 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80018f8:	79fa      	ldrb	r2, [r7, #7]
 80018fa:	492f      	ldr	r1, [pc, #188]	; (80019b8 <UnlinkTimer+0x100>)
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	3314      	adds	r3, #20
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	492a      	ldr	r1, [pc, #168]	; (80019b8 <UnlinkTimer+0x100>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	3315      	adds	r3, #21
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001920:	79f9      	ldrb	r1, [r7, #7]
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	4824      	ldr	r0, [pc, #144]	; (80019b8 <UnlinkTimer+0x100>)
 8001926:	460b      	mov	r3, r1
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	440b      	add	r3, r1
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4403      	add	r3, r0
 8001930:	3315      	adds	r3, #21
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2d8      	uxtb	r0, r3
 8001936:	4920      	ldr	r1, [pc, #128]	; (80019b8 <UnlinkTimer+0x100>)
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	3315      	adds	r3, #21
 8001944:	4602      	mov	r2, r0
 8001946:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	2b06      	cmp	r3, #6
 800194c:	d013      	beq.n	8001976 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800194e:	79f9      	ldrb	r1, [r7, #7]
 8001950:	7bba      	ldrb	r2, [r7, #14]
 8001952:	4819      	ldr	r0, [pc, #100]	; (80019b8 <UnlinkTimer+0x100>)
 8001954:	460b      	mov	r3, r1
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	440b      	add	r3, r1
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4403      	add	r3, r0
 800195e:	3314      	adds	r3, #20
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2d8      	uxtb	r0, r3
 8001964:	4914      	ldr	r1, [pc, #80]	; (80019b8 <UnlinkTimer+0x100>)
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	3314      	adds	r3, #20
 8001972:	4602      	mov	r2, r0
 8001974:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	490f      	ldr	r1, [pc, #60]	; (80019b8 <UnlinkTimer+0x100>)
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	330c      	adds	r3, #12
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <UnlinkTimer+0xf8>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b06      	cmp	r3, #6
 8001992:	d107      	bne.n	80019a4 <UnlinkTimer+0xec>
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d104      	bne.n	80019a4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <UnlinkTimer+0x104>)
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	601a      	str	r2, [r3, #0]
  }

  return;
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
}
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	20000a24 	.word	0x20000a24
 80019b4:	20000a25 	.word	0x20000a25
 80019b8:	20000994 	.word	0x20000994
 80019bc:	20000a28 	.word	0x20000a28

080019c0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <ReturnTimeElapsed+0x70>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ce:	d026      	beq.n	8001a1e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80019d0:	f7ff fe02 	bl	80015d8 <ReadRtcSsrValue>
 80019d4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <ReturnTimeElapsed+0x70>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d805      	bhi.n	80019ec <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <ReturnTimeElapsed+0x70>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	e00a      	b.n	8001a02 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <ReturnTimeElapsed+0x74>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <ReturnTimeElapsed+0x70>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <ReturnTimeElapsed+0x78>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <ReturnTimeElapsed+0x7c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	40d3      	lsrs	r3, r2
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	e001      	b.n	8001a22 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	b29b      	uxth	r3, r3
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000a28 	.word	0x20000a28
 8001a34:	20000a30 	.word	0x20000a30
 8001a38:	20000a2e 	.word	0x20000a2e
 8001a3c:	20000a2d 	.word	0x20000a2d

08001a40 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d108      	bne.n	8001a62 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a50:	f7ff fdc2 	bl	80015d8 <ReadRtcSsrValue>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a21      	ldr	r2, [pc, #132]	; (8001adc <RestartWakeupCounter+0x9c>)
 8001a58:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	f002 fb75 	bl	800414a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001a60:	e039      	b.n	8001ad6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d803      	bhi.n	8001a70 <RestartWakeupCounter+0x30>
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <RestartWakeupCounter+0xa0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d002      	beq.n	8001a76 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a76:	bf00      	nop
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <RestartWakeupCounter+0xa4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f8      	beq.n	8001a78 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <RestartWakeupCounter+0xa4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <RestartWakeupCounter+0xa4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a96:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <RestartWakeupCounter+0xa8>)
 8001a9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a9e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f002 fb60 	bl	8004166 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <RestartWakeupCounter+0xac>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	0c1b      	lsrs	r3, r3, #16
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	88fa      	ldrh	r2, [r7, #6]
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <RestartWakeupCounter+0xac>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ab6:	f7ff fd8f 	bl	80015d8 <ReadRtcSsrValue>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <RestartWakeupCounter+0x9c>)
 8001abe:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <RestartWakeupCounter+0xa4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <RestartWakeupCounter+0xa4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ace:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001ad0:	f3af 8000 	nop.w
  return ;
 8001ad4:	bf00      	nop
}
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000a28 	.word	0x20000a28
 8001ae0:	20000a2d 	.word	0x20000a2d
 8001ae4:	20000bb8 	.word	0x20000bb8
 8001ae8:	58000800 	.word	0x58000800
 8001aec:	40002800 	.word	0x40002800

08001af0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001af6:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <RescheduleTimerList+0x11c>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b02:	d107      	bne.n	8001b14 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001b04:	bf00      	nop
 8001b06:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <RescheduleTimerList+0x120>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f8      	bne.n	8001b06 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001b14:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <RescheduleTimerList+0x120>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <RescheduleTimerList+0x120>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b22:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001b24:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <RescheduleTimerList+0x124>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	493a      	ldr	r1, [pc, #232]	; (8001c18 <RescheduleTimerList+0x128>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	3308      	adds	r3, #8
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001b3e:	f7ff ff3f 	bl	80019c0 <ReturnTimeElapsed>
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d205      	bcs.n	8001b5a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b52:	4b32      	ldr	r3, [pc, #200]	; (8001c1c <RescheduleTimerList+0x12c>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e04d      	b.n	8001bf6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	4a30      	ldr	r2, [pc, #192]	; (8001c20 <RescheduleTimerList+0x130>)
 8001b5e:	8812      	ldrh	r2, [r2, #0]
 8001b60:	b292      	uxth	r2, r2
 8001b62:	4413      	add	r3, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d906      	bls.n	8001b7a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <RescheduleTimerList+0x130>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001b72:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <RescheduleTimerList+0x12c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e03d      	b.n	8001bf6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b84:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <RescheduleTimerList+0x12c>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b8a:	e034      	b.n	8001bf6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	4922      	ldr	r1, [pc, #136]	; (8001c18 <RescheduleTimerList+0x128>)
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d20a      	bcs.n	8001bba <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	491c      	ldr	r1, [pc, #112]	; (8001c18 <RescheduleTimerList+0x128>)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e013      	b.n	8001be2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	4916      	ldr	r1, [pc, #88]	; (8001c18 <RescheduleTimerList+0x128>)
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	3308      	adds	r3, #8
 8001bca:	6819      	ldr	r1, [r3, #0]
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	1ac9      	subs	r1, r1, r3
 8001bd2:	4811      	ldr	r0, [pc, #68]	; (8001c18 <RescheduleTimerList+0x128>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4403      	add	r3, r0
 8001bde:	3308      	adds	r3, #8
 8001be0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <RescheduleTimerList+0x128>)
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	3315      	adds	r3, #21
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b06      	cmp	r3, #6
 8001bfa:	d1c7      	bne.n	8001b8c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001bfc:	89bb      	ldrh	r3, [r7, #12]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff1e 	bl	8001a40 <RestartWakeupCounter>

  return ;
 8001c04:	bf00      	nop
}
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40002800 	.word	0x40002800
 8001c10:	20000bb8 	.word	0x20000bb8
 8001c14:	20000a24 	.word	0x20000a24
 8001c18:	20000994 	.word	0x20000994
 8001c1c:	20000a2c 	.word	0x20000a2c
 8001c20:	20000a32 	.word	0x20000a32

08001c24 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c2e:	617b      	str	r3, [r7, #20]
  return(result);
 8001c30:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	22ca      	movs	r2, #202	; 0xca
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
 8001c40:	4b57      	ldr	r3, [pc, #348]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2253      	movs	r2, #83	; 0x53
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001c48:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	4b54      	ldr	r3, [pc, #336]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c56:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001c60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c64:	4950      	ldr	r1, [pc, #320]	; (8001da8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	330c      	adds	r3, #12
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d16e      	bne.n	8001d58 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c7a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c7e:	494a      	ldr	r1, [pc, #296]	; (8001da8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c92:	4945      	ldr	r1, [pc, #276]	; (8001da8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3310      	adds	r3, #16
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001ca4:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d04c      	beq.n	8001d48 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001cae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001cb2:	493d      	ldr	r1, [pc, #244]	; (8001da8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	330d      	adds	r3, #13
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d124      	bne.n	8001d12 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fdf2 	bl	80018b8 <UnlinkTimer>
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f383 8810 	msr	PRIMASK, r3
}
 8001cde:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001ce0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ce4:	4930      	ldr	r1, [pc, #192]	; (8001da8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fa32 	bl	8002164 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	22ca      	movs	r2, #202	; 0xca
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2253      	movs	r2, #83	; 0x53
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
 8001d10:	e012      	b.n	8001d38 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f383 8810 	msr	PRIMASK, r3
}
 8001d1c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f99a 	bl	800205c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	22ca      	movs	r2, #202	; 0xca
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2253      	movs	r2, #83	; 0x53
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	69b8      	ldr	r0, [r7, #24]
 8001d42:	f000 fa95 	bl	8002270 <HW_TS_RTC_Int_AppNot>
 8001d46:	e022      	b.n	8001d8e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001d48:	f7ff fed2 	bl	8001af0 <RescheduleTimerList>
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f383 8810 	msr	PRIMASK, r3
}
 8001d56:	e01a      	b.n	8001d8e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d58:	bf00      	nop
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f8      	beq.n	8001d5a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d78:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f383 8810 	msr	PRIMASK, r3
}
 8001d8c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001d96:	bf00      	nop
}
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000bb8 	.word	0x20000bb8
 8001da4:	20000a24 	.word	0x20000a24
 8001da8:	20000994 	.word	0x20000994
 8001dac:	20000a2c 	.word	0x20000a2c
 8001db0:	58000800 	.word	0x58000800

08001db4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001dc0:	4b5e      	ldr	r3, [pc, #376]	; (8001f3c <HW_TS_Init+0x188>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	22ca      	movs	r2, #202	; 0xca
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
 8001dc8:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HW_TS_Init+0x188>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2253      	movs	r2, #83	; 0x53
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001dd0:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <HW_TS_Init+0x18c>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4a5a      	ldr	r2, [pc, #360]	; (8001f40 <HW_TS_Init+0x18c>)
 8001dd6:	f043 0320 	orr.w	r3, r3, #32
 8001dda:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ddc:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <HW_TS_Init+0x18c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f1c3 0304 	rsb	r3, r3, #4
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b55      	ldr	r3, [pc, #340]	; (8001f44 <HW_TS_Init+0x190>)
 8001df0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001df2:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HW_TS_Init+0x18c>)
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001dfa:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001dfe:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	fa92 f2a2 	rbit	r2, r2
 8001e06:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d101      	bne.n	8001e16 <HW_TS_Init+0x62>
  {
    return 32U;
 8001e12:	2220      	movs	r2, #32
 8001e14:	e003      	b.n	8001e1e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	fab2 f282 	clz	r2, r2
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	40d3      	lsrs	r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b48      	ldr	r3, [pc, #288]	; (8001f48 <HW_TS_Init+0x194>)
 8001e28:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001e2a:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <HW_TS_Init+0x18c>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <HW_TS_Init+0x198>)
 8001e3c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HW_TS_Init+0x198>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	4a40      	ldr	r2, [pc, #256]	; (8001f48 <HW_TS_Init+0x194>)
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e50:	4a3c      	ldr	r2, [pc, #240]	; (8001f44 <HW_TS_Init+0x190>)
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	40d3      	lsrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d904      	bls.n	8001e6c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HW_TS_Init+0x19c>)
 8001e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	e003      	b.n	8001e74 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <HW_TS_Init+0x19c>)
 8001e72:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e74:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e78:	f7ff fb9c 	bl	80015b4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e80:	f7ff fb84 	bl	800158c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d13d      	bne.n	8001f06 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e8a:	4b32      	ldr	r3, [pc, #200]	; (8001f54 <HW_TS_Init+0x1a0>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e90:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HW_TS_Init+0x1a4>)
 8001e92:	f04f 32ff 	mov.w	r2, #4294967295
 8001e96:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	77fb      	strb	r3, [r7, #31]
 8001e9c:	e00c      	b.n	8001eb8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001e9e:	7ffa      	ldrb	r2, [r7, #31]
 8001ea0:	492e      	ldr	r1, [pc, #184]	; (8001f5c <HW_TS_Init+0x1a8>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	330c      	adds	r3, #12
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	77fb      	strb	r3, [r7, #31]
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d9ef      	bls.n	8001e9e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <HW_TS_Init+0x1ac>)
 8001ec0:	2206      	movs	r2, #6
 8001ec2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HW_TS_Init+0x188>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HW_TS_Init+0x188>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HW_TS_Init+0x188>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HW_TS_Init+0x188>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ee4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <HW_TS_Init+0x1b0>)
 8001ee8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001eec:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f002 f939 	bl	8004166 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HW_TS_Init+0x188>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <HW_TS_Init+0x188>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	e009      	b.n	8001f1a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HW_TS_Init+0x188>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f002 f918 	bl	800414a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HW_TS_Init+0x188>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	22ff      	movs	r2, #255	; 0xff
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001f22:	2200      	movs	r2, #0
 8001f24:	2103      	movs	r1, #3
 8001f26:	2003      	movs	r0, #3
 8001f28:	f002 f8cd 	bl	80040c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f002 f8e4 	bl	80040fa <HAL_NVIC_EnableIRQ>

  return;
 8001f32:	bf00      	nop
}
 8001f34:	3720      	adds	r7, #32
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000bb8 	.word	0x20000bb8
 8001f40:	40002800 	.word	0x40002800
 8001f44:	20000a2d 	.word	0x20000a2d
 8001f48:	20000a2e 	.word	0x20000a2e
 8001f4c:	20000a30 	.word	0x20000a30
 8001f50:	20000a32 	.word	0x20000a32
 8001f54:	20000a2c 	.word	0x20000a2c
 8001f58:	20000a28 	.word	0x20000a28
 8001f5c:	20000994 	.word	0x20000994
 8001f60:	20000a24 	.word	0x20000a24
 8001f64:	58000800 	.word	0x58000800

08001f68 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b08b      	sub	sp, #44	; 0x2c
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f82:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f84:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f8c:	e004      	b.n	8001f98 <HW_TS_Create+0x30>
  {
    loop++;
 8001f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f92:	3301      	adds	r3, #1
 8001f94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001f98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d80c      	bhi.n	8001fba <HW_TS_Create+0x52>
 8001fa0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fa4:	492c      	ldr	r1, [pc, #176]	; (8002058 <HW_TS_Create+0xf0>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1e9      	bne.n	8001f8e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d038      	beq.n	8002034 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001fc2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fc6:	4924      	ldr	r1, [pc, #144]	; (8002058 <HW_TS_Create+0xf0>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f383 8810 	msr	PRIMASK, r3
}
 8001fe2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001fe4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fe8:	491b      	ldr	r1, [pc, #108]	; (8002058 <HW_TS_Create+0xf0>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3310      	adds	r3, #16
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001ffa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ffe:	4916      	ldr	r1, [pc, #88]	; (8002058 <HW_TS_Create+0xf0>)
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	330d      	adds	r3, #13
 800200c:	79fa      	ldrb	r2, [r7, #7]
 800200e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002010:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002014:	4910      	ldr	r1, [pc, #64]	; (8002058 <HW_TS_Create+0xf0>)
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800202a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002032:	e008      	b.n	8002046 <HW_TS_Create+0xde>
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f383 8810 	msr	PRIMASK, r3
}
 800203e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8002046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800204a:	4618      	mov	r0, r3
 800204c:	372c      	adds	r7, #44	; 0x2c
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000994 	.word	0x20000994

0800205c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002066:	f3ef 8310 	mrs	r3, PRIMASK
 800206a:	60fb      	str	r3, [r7, #12]
  return(result);
 800206c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800206e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002074:	2003      	movs	r0, #3
 8002076:	f002 f84e 	bl	8004116 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800207a:	4b34      	ldr	r3, [pc, #208]	; (800214c <HW_TS_Stop+0xf0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	22ca      	movs	r2, #202	; 0xca
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
 8002082:	4b32      	ldr	r3, [pc, #200]	; (800214c <HW_TS_Stop+0xf0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2253      	movs	r2, #83	; 0x53
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800208a:	79fa      	ldrb	r2, [r7, #7]
 800208c:	4930      	ldr	r1, [pc, #192]	; (8002150 <HW_TS_Stop+0xf4>)
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	330c      	adds	r3, #12
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d142      	bne.n	8002128 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fc06 	bl	80018b8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HW_TS_Stop+0xf8>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b06      	cmp	r3, #6
 80020b6:	d12f      	bne.n	8002118 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HW_TS_Stop+0xfc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c4:	d107      	bne.n	80020d6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80020c6:	bf00      	nop
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <HW_TS_Stop+0xf0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f8      	bne.n	80020c8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HW_TS_Stop+0xf0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HW_TS_Stop+0xf0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80020e6:	bf00      	nop
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HW_TS_Stop+0xf0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f8      	beq.n	80020e8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HW_TS_Stop+0xf0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <HW_TS_Stop+0xf0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002106:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HW_TS_Stop+0x100>)
 800210a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800210e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002110:	2003      	movs	r0, #3
 8002112:	f002 f828 	bl	8004166 <HAL_NVIC_ClearPendingIRQ>
 8002116:	e007      	b.n	8002128 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HW_TS_Stop+0x104>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	7cfa      	ldrb	r2, [r7, #19]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002124:	f7ff fce4 	bl	8001af0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HW_TS_Stop+0xf0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	22ff      	movs	r2, #255	; 0xff
 800212e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002130:	2003      	movs	r0, #3
 8002132:	f001 ffe2 	bl	80040fa <HAL_NVIC_EnableIRQ>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f383 8810 	msr	PRIMASK, r3
}
 8002140:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002142:	bf00      	nop
}
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000bb8 	.word	0x20000bb8
 8002150:	20000994 	.word	0x20000994
 8002154:	20000a24 	.word	0x20000a24
 8002158:	40002800 	.word	0x40002800
 800215c:	58000800 	.word	0x58000800
 8002160:	20000a25 	.word	0x20000a25

08002164 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002170:	79fa      	ldrb	r2, [r7, #7]
 8002172:	493b      	ldr	r1, [pc, #236]	; (8002260 <HW_TS_Start+0xfc>)
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	330c      	adds	r3, #12
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d103      	bne.n	8002190 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff66 	bl	800205c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002190:	f3ef 8310 	mrs	r3, PRIMASK
 8002194:	60fb      	str	r3, [r7, #12]
  return(result);
 8002196:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002198:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800219a:	b672      	cpsid	i
}
 800219c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800219e:	2003      	movs	r0, #3
 80021a0:	f001 ffb9 	bl	8004116 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <HW_TS_Start+0x100>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	22ca      	movs	r2, #202	; 0xca
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
 80021ac:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HW_TS_Start+0x100>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2253      	movs	r2, #83	; 0x53
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80021b4:	79fa      	ldrb	r2, [r7, #7]
 80021b6:	492a      	ldr	r1, [pc, #168]	; (8002260 <HW_TS_Start+0xfc>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	330c      	adds	r3, #12
 80021c4:	2202      	movs	r2, #2
 80021c6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80021c8:	79fa      	ldrb	r2, [r7, #7]
 80021ca:	4925      	ldr	r1, [pc, #148]	; (8002260 <HW_TS_Start+0xfc>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	3308      	adds	r3, #8
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80021dc:	79fa      	ldrb	r2, [r7, #7]
 80021de:	4920      	ldr	r1, [pc, #128]	; (8002260 <HW_TS_Start+0xfc>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	3304      	adds	r3, #4
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fab6 	bl	8001764 <linkTimer>
 80021f8:	4603      	mov	r3, r0
 80021fa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HW_TS_Start+0x104>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HW_TS_Start+0x108>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	7c7a      	ldrb	r2, [r7, #17]
 800220a:	429a      	cmp	r2, r3
 800220c:	d002      	beq.n	8002214 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800220e:	f7ff fc6f 	bl	8001af0 <RescheduleTimerList>
 8002212:	e013      	b.n	800223c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002214:	79fa      	ldrb	r2, [r7, #7]
 8002216:	4912      	ldr	r1, [pc, #72]	; (8002260 <HW_TS_Start+0xfc>)
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	3308      	adds	r3, #8
 8002224:	6819      	ldr	r1, [r3, #0]
 8002226:	8a7b      	ldrh	r3, [r7, #18]
 8002228:	79fa      	ldrb	r2, [r7, #7]
 800222a:	1ac9      	subs	r1, r1, r3
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <HW_TS_Start+0xfc>)
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4403      	add	r3, r0
 8002238:	3308      	adds	r3, #8
 800223a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HW_TS_Start+0x100>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	22ff      	movs	r2, #255	; 0xff
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002244:	2003      	movs	r0, #3
 8002246:	f001 ff58 	bl	80040fa <HAL_NVIC_EnableIRQ>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f383 8810 	msr	PRIMASK, r3
}
 8002254:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002256:	bf00      	nop
}
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000994 	.word	0x20000994
 8002264:	20000bb8 	.word	0x20000bb8
 8002268:	20000a24 	.word	0x20000a24
 800226c:	20000a25 	.word	0x20000a25

08002270 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	460b      	mov	r3, r1
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4798      	blx	r3

  return;
 8002282:	bf00      	nop
}
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <LL_RCC_LSE_SetDriveCapability>:
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	f023 0218 	bic.w	r2, r3, #24
 800229e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_AHB1_GRP1_EnableClock>:
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4013      	ands	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_AHB2_GRP1_EnableClock>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800230c:	68fb      	ldr	r3, [r7, #12]
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <Max30102Setup>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Max30102Setup()
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
  uint8_t uch_dummy;

  maxim_max30102_reset();
 8002320:	f009 fcd8 	bl	800bcd4 <maxim_max30102_reset>
  maxim_max30102_read_reg(0x00, &uch_dummy);  // reads/clears the interrupt status register
 8002324:	1dfb      	adds	r3, r7, #7
 8002326:	4619      	mov	r1, r3
 8002328:	2000      	movs	r0, #0
 800232a:	f009 fc17 	bl	800bb5c <maxim_max30102_read_reg>
  maxim_max30102_init();
 800232e:	f009 fc2f 	bl	800bb90 <maxim_max30102_init>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002340:	f001 fcf4 	bl	8003d2c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002344:	f7fe ff4a 	bl	80011dc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002348:	f000 f838 	bl	80023bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800234c:	f000 f892 	bl	8002474 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002350:	f000 f8f0 	bl	8002534 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002354:	f000 f99c 	bl	8002690 <MX_GPIO_Init>
  MX_DMA_Init();
 8002358:	f000 f988 	bl	800266c <MX_DMA_Init>
  MX_RTC_Init();
 800235c:	f000 f952 	bl	8002604 <MX_RTC_Init>
  MX_I2C1_Init();
 8002360:	f000 f8a8 	bl	80024b4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8002364:	f000 f8fa 	bl	800255c <MX_LPUART1_UART_Init>
  MX_RF_Init();
 8002368:	f000 f944 	bl	80025f4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)Rxdata, 700);
 800236c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002370:	490f      	ldr	r1, [pc, #60]	; (80023b0 <main+0x74>)
 8002372:	4810      	ldr	r0, [pc, #64]	; (80023b4 <main+0x78>)
 8002374:	f005 fc1e 	bl	8007bb4 <HAL_UART_Receive_DMA>
  MPU9250SetDefault(&mpu);
 8002378:	480f      	ldr	r0, [pc, #60]	; (80023b8 <main+0x7c>)
 800237a:	f00a fc7b 	bl	800cc74 <MPU9250SetDefault>
  HAL_Delay(500);
 800237e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002382:	f7ff f8a0 	bl	80014c6 <HAL_Delay>
  MPU9250_Init(&mpu);
 8002386:	480c      	ldr	r0, [pc, #48]	; (80023b8 <main+0x7c>)
 8002388:	f00a fad8 	bl	800c93c <MPU9250_Init>
  mpu.has_connected = 1;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <main+0x7c>)
 800238e:	2201      	movs	r2, #1
 8002390:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
  setMPUSettings(&mpu);
 8002394:	4808      	ldr	r0, [pc, #32]	; (80023b8 <main+0x7c>)
 8002396:	f000 f99f 	bl	80026d8 <setMPUSettings>
  HAL_Delay(100);
 800239a:	2064      	movs	r0, #100	; 0x64
 800239c:	f7ff f893 	bl	80014c6 <HAL_Delay>
  Max30102Setup();
 80023a0:	f7ff ffbb 	bl	800231a <Max30102Setup>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80023a4:	f7fe ff28 	bl	80011f8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80023a8:	f7ff f8b2 	bl	8001510 <MX_APPE_Process>
 80023ac:	e7fc      	b.n	80023a8 <main+0x6c>
 80023ae:	bf00      	nop
 80023b0:	20000bdc 	.word	0x20000bdc
 80023b4:	20000ac4 	.word	0x20000ac4
 80023b8:	20000ecc 	.word	0x20000ecc

080023bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b09a      	sub	sp, #104	; 0x68
 80023c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c2:	f107 0320 	add.w	r3, r7, #32
 80023c6:	2248      	movs	r2, #72	; 0x48
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00c fce6 	bl	800ed9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]
 80023de:	615a      	str	r2, [r3, #20]
 80023e0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023e2:	f003 fbef 	bl	8005bc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80023e6:	2010      	movs	r0, #16
 80023e8:	f7ff ff4f 	bl	800228a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <SystemClock_Config+0xb4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023f4:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <SystemClock_Config+0xb4>)
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <SystemClock_Config+0xb4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002408:	2307      	movs	r3, #7
 800240a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800240c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002412:	2301      	movs	r3, #1
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800241c:	2340      	movs	r3, #64	; 0x40
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002420:	2300      	movs	r3, #0
 8002422:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002424:	f107 0320 	add.w	r3, r7, #32
 8002428:	4618      	mov	r0, r3
 800242a:	f003 ff5f 	bl	80062ec <HAL_RCC_OscConfig>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002434:	f000 f994 	bl	8002760 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002438:	236f      	movs	r3, #111	; 0x6f
 800243a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800243c:	2302      	movs	r3, #2
 800243e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fabb 	bl	80069d4 <HAL_RCC_ClockConfig>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002464:	f000 f97c 	bl	8002760 <Error_Handler>
  }
}
 8002468:	bf00      	nop
 800246a:	3768      	adds	r7, #104	; 0x68
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58000400 	.word	0x58000400

08002474 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b094      	sub	sp, #80	; 0x50
 8002478:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800247a:	463b      	mov	r3, r7
 800247c:	2250      	movs	r2, #80	; 0x50
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f00c fc8b 	bl	800ed9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002486:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800248a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800248c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002490:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002492:	2302      	movs	r3, #2
 8002494:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002496:	2310      	movs	r3, #16
 8002498:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249a:	463b      	mov	r3, r7
 800249c:	4618      	mov	r0, r3
 800249e:	f004 fed6 	bl	800724e <HAL_RCCEx_PeriphCLKConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80024a8:	f000 f95a 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80024ac:	bf00      	nop
 80024ae:	3750      	adds	r7, #80	; 0x50
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <MX_I2C1_Init+0x74>)
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <MX_I2C1_Init+0x78>)
 80024bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <MX_I2C1_Init+0x74>)
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <MX_I2C1_Init+0x7c>)
 80024c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <MX_I2C1_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <MX_I2C1_Init+0x74>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <MX_I2C1_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <MX_I2C1_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MX_I2C1_Init+0x74>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <MX_I2C1_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <MX_I2C1_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024ee:	480e      	ldr	r0, [pc, #56]	; (8002528 <MX_I2C1_Init+0x74>)
 80024f0:	f002 fa68 	bl	80049c4 <HAL_I2C_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024fa:	f000 f931 	bl	8002760 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024fe:	2100      	movs	r1, #0
 8002500:	4809      	ldr	r0, [pc, #36]	; (8002528 <MX_I2C1_Init+0x74>)
 8002502:	f003 fa41 	bl	8005988 <HAL_I2CEx_ConfigAnalogFilter>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800250c:	f000 f928 	bl	8002760 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002510:	2100      	movs	r1, #0
 8002512:	4805      	ldr	r0, [pc, #20]	; (8002528 <MX_I2C1_Init+0x74>)
 8002514:	f003 fa83 	bl	8005a1e <HAL_I2CEx_ConfigDigitalFilter>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800251e:	f000 f91f 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000a34 	.word	0x20000a34
 800252c:	40005400 	.word	0x40005400
 8002530:	00300f38 	.word	0x00300f38

08002534 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_IPCC_Init+0x20>)
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <MX_IPCC_Init+0x24>)
 800253c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_IPCC_Init+0x20>)
 8002540:	f003 faba 	bl	8005ab8 <HAL_IPCC_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800254a:	f000 f909 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000a88 	.word	0x20000a88
 8002558:	58000c00 	.word	0x58000c00

0800255c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 8002562:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <MX_LPUART1_UART_Init+0x94>)
 8002564:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 8002568:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800256c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 800258e:	2200      	movs	r2, #0
 8002590:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 8002594:	2200      	movs	r2, #0
 8002596:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 800259a:	2200      	movs	r2, #0
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80025a4:	4811      	ldr	r0, [pc, #68]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 80025a6:	f005 fab5 	bl	8007b14 <HAL_UART_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80025b0:	f000 f8d6 	bl	8002760 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025b4:	2100      	movs	r1, #0
 80025b6:	480d      	ldr	r0, [pc, #52]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 80025b8:	f006 f9c9 	bl	800894e <HAL_UARTEx_SetTxFifoThreshold>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80025c2:	f000 f8cd 	bl	8002760 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c6:	2100      	movs	r1, #0
 80025c8:	4808      	ldr	r0, [pc, #32]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 80025ca:	f006 f9fe 	bl	80089ca <HAL_UARTEx_SetRxFifoThreshold>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80025d4:	f000 f8c4 	bl	8002760 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <MX_LPUART1_UART_Init+0x90>)
 80025da:	f006 f97f 	bl	80088dc <HAL_UARTEx_DisableFifoMode>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80025e4:	f000 f8bc 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000ac4 	.word	0x20000ac4
 80025f0:	40008000 	.word	0x40008000

080025f4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <MX_RTC_Init+0x60>)
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <MX_RTC_Init+0x64>)
 800260c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <MX_RTC_Init+0x60>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <MX_RTC_Init+0x60>)
 8002616:	220f      	movs	r2, #15
 8002618:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <MX_RTC_Init+0x60>)
 800261c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002620:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <MX_RTC_Init+0x60>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MX_RTC_Init+0x60>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <MX_RTC_Init+0x60>)
 8002630:	2200      	movs	r2, #0
 8002632:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <MX_RTC_Init+0x60>)
 8002636:	2200      	movs	r2, #0
 8002638:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800263a:	480a      	ldr	r0, [pc, #40]	; (8002664 <MX_RTC_Init+0x60>)
 800263c:	f005 f88e 	bl	800775c <HAL_RTC_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002646:	f000 f88b 	bl	8002760 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_RTC_Init+0x60>)
 8002650:	f005 f984 	bl	800795c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800265a:	f000 f881 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000bb8 	.word	0x20000bb8
 8002668:	40002800 	.word	0x40002800

0800266c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002670:	2004      	movs	r0, #4
 8002672:	f7ff fe20 	bl	80022b6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002676:	2001      	movs	r0, #1
 8002678:	f7ff fe1d 	bl	80022b6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 14, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	210e      	movs	r1, #14
 8002680:	200c      	movs	r0, #12
 8002682:	f001 fd20 	bl	80040c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002686:	200c      	movs	r0, #12
 8002688:	f001 fd37 	bl	80040fa <HAL_NVIC_EnableIRQ>

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a4:	2004      	movs	r0, #4
 80026a6:	f7ff fe1f 	bl	80022e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026aa:	2002      	movs	r0, #2
 80026ac:	f7ff fe1c 	bl	80022e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff fe19 	bl	80022e8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026cc:	f001 ffce 	bl	800466c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026d0:	bf00      	nop
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <setMPUSettings>:

/* USER CODE BEGIN 4 */

void setMPUSettings(MPU9250_t * MPU0250){
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	//accel bias [g]:  11.1511   0.0000   0.0000  ␊
	  //gyro bias [deg/s]:  0.0000   0.6698   0.0000  ␊
	  //mag bias [mG]:  19.1250   143.4375   0.0000  ␊
	  //mag scale []:  1.3571   0.9382   0.8351
	setAccBias(MPU0250, 11.1511, 0.0, 0.00);
 80026e0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 800273c <setMPUSettings+0x64>
 80026e4:	eddf 0a15 	vldr	s1, [pc, #84]	; 800273c <setMPUSettings+0x64>
 80026e8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002740 <setMPUSettings+0x68>
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f009 fc26 	bl	800bf3e <setAccBias>
	setGyroBias(MPU0250, 0.0, 0.6698, 0.0);
 80026f2:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800273c <setMPUSettings+0x64>
 80026f6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002744 <setMPUSettings+0x6c>
 80026fa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800273c <setMPUSettings+0x64>
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f009 fc37 	bl	800bf72 <setGyroBias>
	setMagBias(MPU0250, 19.125, 143.4375, 0.0000);
 8002704:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800273c <setMPUSettings+0x64>
 8002708:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002748 <setMPUSettings+0x70>
 800270c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800274c <setMPUSettings+0x74>
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f009 fc48 	bl	800bfa6 <setMagBias>
	setMagScale(MPU0250, 1.3571, 0.9382, 0.8351);
 8002716:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8002750 <setMPUSettings+0x78>
 800271a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002754 <setMPUSettings+0x7c>
 800271e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002758 <setMPUSettings+0x80>
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f009 fc58 	bl	800bfd8 <setMagScale>
	/*setAccBias(MPU0250, 280.60, 163.00, 264.40);
	setGyroBias(MPU0250, 12.63, -72.50, -73.97);
	setMagBias(MPU0250, 75.03, 296.37, -636.671);
	setMagScale(MPU0250, 1.11, 1.03, 0.890);*/

	setMagneticDeclination(MPU0250, 10.91);
 8002728:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800275c <setMPUSettings+0x84>
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f009 fc6c 	bl	800c00a <setMagneticDeclination>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	00000000 	.word	0x00000000
 8002740:	41326ae8 	.word	0x41326ae8
 8002744:	3f2b7803 	.word	0x3f2b7803
 8002748:	430f7000 	.word	0x430f7000
 800274c:	41990000 	.word	0x41990000
 8002750:	3f55c91d 	.word	0x3f55c91d
 8002754:	3f702de0 	.word	0x3f702de0
 8002758:	3fadb574 	.word	0x3fadb574
 800275c:	412e8f5c 	.word	0x412e8f5c

08002760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002764:	b672      	cpsid	i
}
 8002766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002768:	e7fe      	b.n	8002768 <Error_Handler+0x8>

0800276a <LL_RCC_EnableRTC>:
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_AHB2_GRP1_EnableClock>:
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002798:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800279a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027b0:	68fb      	ldr	r3, [r7, #12]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <LL_AHB3_GRP1_EnableClock>:
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80027c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4313      	orrs	r3, r2
 8002806:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002814:	68fb      	ldr	r3, [r7, #12]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002830:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4313      	orrs	r3, r2
 8002838:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4013      	ands	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002858:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800285c:	f7ff ffaf 	bl	80027be <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2100      	movs	r1, #0
 8002864:	202e      	movs	r0, #46	; 0x2e
 8002866:	f001 fc2e 	bl	80040c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800286a:	202e      	movs	r0, #46	; 0x2e
 800286c:	f001 fc45 	bl	80040fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b09c      	sub	sp, #112	; 0x70
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2250      	movs	r2, #80	; 0x50
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f00c fa81 	bl	800ed9c <memset>
  if(hi2c->Instance==I2C1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_I2C_MspInit+0x88>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d126      	bne.n	80028f2 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028a4:	2304      	movs	r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 fccb 	bl	800724e <HAL_RCCEx_PeriphCLKConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80028be:	f7ff ff4f 	bl	8002760 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	2002      	movs	r0, #2
 80028c4:	f7ff ff62 	bl	800278c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ce:	2312      	movs	r3, #18
 80028d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028da:	2304      	movs	r3, #4
 80028dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028e2:	4619      	mov	r1, r3
 80028e4:	4806      	ldr	r0, [pc, #24]	; (8002900 <HAL_I2C_MspInit+0x8c>)
 80028e6:	f001 fec1 	bl	800466c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80028ee:	f7ff ff7f 	bl	80027f0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028f2:	bf00      	nop
 80028f4:	3770      	adds	r7, #112	; 0x70
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40005400 	.word	0x40005400
 8002900:	48000400 	.word	0x48000400

08002904 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <HAL_IPCC_MspInit+0x44>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d113      	bne.n	800293e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800291a:	f7ff ff50 	bl	80027be <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	202c      	movs	r0, #44	; 0x2c
 8002924:	f001 fbcf 	bl	80040c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002928:	202c      	movs	r0, #44	; 0x2c
 800292a:	f001 fbe6 	bl	80040fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	202d      	movs	r0, #45	; 0x2d
 8002934:	f001 fbc7 	bl	80040c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002938:	202d      	movs	r0, #45	; 0x2d
 800293a:	f001 fbde 	bl	80040fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	58000c00 	.word	0x58000c00

0800294c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b09c      	sub	sp, #112	; 0x70
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002964:	f107 030c 	add.w	r3, r7, #12
 8002968:	2250      	movs	r2, #80	; 0x50
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f00c fa15 	bl	800ed9c <memset>
  if(huart->Instance==LPUART1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <HAL_UART_MspInit+0xd8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d14e      	bne.n	8002a1a <HAL_UART_MspInit+0xce>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800297c:	2302      	movs	r3, #2
 800297e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002980:	2300      	movs	r3, #0
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fc60 	bl	800724e <HAL_RCCEx_PeriphCLKConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002994:	f7ff fee4 	bl	8002760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002998:	2001      	movs	r0, #1
 800299a:	f7ff ff42 	bl	8002822 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	2001      	movs	r0, #1
 80029a0:	f7ff fef4 	bl	800278c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029a4:	230c      	movs	r3, #12
 80029a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80029b4:	2308      	movs	r3, #8
 80029b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029bc:	4619      	mov	r1, r3
 80029be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c2:	f001 fe53 	bl	800466c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_UART_MspInit+0xe0>)
 80029ca:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029ce:	2210      	movs	r2, #16
 80029d0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029f2:	2220      	movs	r2, #32
 80029f4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80029fc:	480a      	ldr	r0, [pc, #40]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 80029fe:	f001 fbc1 	bl	8004184 <HAL_DMA_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002a08:	f7ff feaa 	bl	8002760 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 8002a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_UART_MspInit+0xdc>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002a1a:	bf00      	nop
 8002a1c:	3770      	adds	r7, #112	; 0x70
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40008000 	.word	0x40008000
 8002a28:	20000b58 	.word	0x20000b58
 8002a2c:	4002001c 	.word	0x4002001c

08002a30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b096      	sub	sp, #88	; 0x58
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	2250      	movs	r2, #80	; 0x50
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00c f9ab 	bl	800ed9c <memset>
  if(hrtc->Instance==RTC)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <HAL_RTC_MspInit+0x64>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d11d      	bne.n	8002a8c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a54:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fbf4 	bl	800724e <HAL_RCCEx_PeriphCLKConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002a6c:	f7ff fe78 	bl	8002760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a70:	f7ff fe7b 	bl	800276a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002a74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a78:	f7ff feba 	bl	80027f0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2003      	movs	r0, #3
 8002a82:	f001 fb20 	bl	80040c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002a86:	2003      	movs	r0, #3
 8002a88:	f001 fb37 	bl	80040fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a8c:	bf00      	nop
 8002a8e:	3758      	adds	r7, #88	; 0x58
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40002800 	.word	0x40002800

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <NMI_Handler+0x4>

08002a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <HardFault_Handler+0x4>

08002aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <MemManage_Handler+0x4>

08002aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aae:	e7fe      	b.n	8002aae <BusFault_Handler+0x4>

08002ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <UsageFault_Handler+0x4>

08002ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae4:	f001 f97c 	bl	8003de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002af0:	f7ff f898 	bl	8001c24 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <DMA1_Channel2_IRQHandler+0x10>)
 8002afe:	f001 fc64 	bl	80043ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000b58 	.word	0x20000b58

08002b0c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002b10:	f000 ff3c 	bl	800398c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002b1c:	f000 ff6e 	bl	80039fc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002b28:	f001 ff28 	bl	800497c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <_sbrk+0x5c>)
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <_sbrk+0x60>)
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <_sbrk+0x64>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <_sbrk+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d207      	bcs.n	8002b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b60:	f00c f8e4 	bl	800ed2c <__errno>
 8002b64:	4603      	mov	r3, r0
 8002b66:	220c      	movs	r2, #12
 8002b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e009      	b.n	8002b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <_sbrk+0x64>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <_sbrk+0x64>)
 8002b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20010000 	.word	0x20010000
 8002b90:	00000400 	.word	0x00000400
 8002b94:	20000f8c 	.word	0x20000f8c
 8002b98:	20001868 	.word	0x20001868

08002b9c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <LL_FLASH_GetUDN+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	1fff7580 	.word	0x1fff7580

08002bb4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <LL_FLASH_GetDeviceID+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	b2db      	uxtb	r3, r3
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	1fff7584 	.word	0x1fff7584

08002bcc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <LL_FLASH_GetSTCompanyID+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	1fff7584 	.word	0x1fff7584

08002be4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b090      	sub	sp, #64	; 0x40
 8002be8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002bea:	2392      	movs	r3, #146	; 0x92
 8002bec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <APP_BLE_Init+0xa4>)
 8002bf2:	1d3c      	adds	r4, r7, #4
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c06:	c403      	stmia	r4!, {r0, r1}
 8002c08:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8002c0a:	f000 f90b 	bl	8002e24 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002c0e:	2101      	movs	r1, #1
 8002c10:	2002      	movs	r0, #2
 8002c12:	f008 f875 	bl	800ad00 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002c16:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <APP_BLE_Init+0xa8>)
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f008 f99c 	bl	800af58 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f007 fa10 	bl	800a048 <SHCI_C2_BLE_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8002c2e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <APP_BLE_Init+0x56>
  {
//    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002c36:	f7ff fd93 	bl	8002760 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002c3a:	f000 f909 	bl	8002e50 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002c3e:	f007 fd5f 	bl	800a700 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <APP_BLE_Init+0xac>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <APP_BLE_Init+0xac>)
 8002c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c50:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8002c52:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <APP_BLE_Init+0xb0>)
 8002c54:	2100      	movs	r1, #0
 8002c56:	2001      	movs	r0, #1
 8002c58:	f008 f97e 	bl	800af58 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8002c5c:	2006      	movs	r0, #6
 8002c5e:	f006 ff20 	bl	8009aa2 <aci_hal_set_radio_activity_mask>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8002c68:	f000 face 	bl	8003208 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <APP_BLE_Init+0xac>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <APP_BLE_Init+0xac>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f000 f99d 	bl	8002fb8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8002c7e:	bf00      	nop
}
 8002c80:	3740      	adds	r7, #64	; 0x40
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bdb0      	pop	{r4, r5, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	0801076c 	.word	0x0801076c
 8002c8c:	08009cc5 	.word	0x08009cc5
 8002c90:	20000f98 	.word	0x20000f98
 8002c94:	080030a1 	.word	0x080030a1

08002c98 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8002ca0:	2392      	movs	r3, #146	; 0x92
 8002ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2bff      	cmp	r3, #255	; 0xff
 8002cb2:	d058      	beq.n	8002d66 <SVCCTL_App_Notification+0xce>
 8002cb4:	2bff      	cmp	r3, #255	; 0xff
 8002cb6:	f300 80a7 	bgt.w	8002e08 <SVCCTL_App_Notification+0x170>
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d002      	beq.n	8002cc4 <SVCCTL_App_Notification+0x2c>
 8002cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8002cc0:	d020      	beq.n	8002d04 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8002cc2:	e0a1      	b.n	8002e08 <SVCCTL_App_Notification+0x170>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002cd4:	8adb      	ldrh	r3, [r3, #22]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d106      	bne.n	8002ce8 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002cda:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f000 f965 	bl	8002fb8 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8002cee:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <SVCCTL_App_Notification+0x184>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002cf4:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002cf6:	8ada      	ldrh	r2, [r3, #22]
 8002cf8:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <SVCCTL_App_Notification+0x184>)
 8002cfa:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8002cfc:	4847      	ldr	r0, [pc, #284]	; (8002e1c <SVCCTL_App_Notification+0x184>)
 8002cfe:	f000 fa67 	bl	80031d0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002d02:	e084      	b.n	8002e0e <SVCCTL_App_Notification+0x176>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	3302      	adds	r3, #2
 8002d08:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d005      	beq.n	8002d1e <SVCCTL_App_Notification+0x86>
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d125      	bne.n	8002d62 <SVCCTL_App_Notification+0xca>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
          break;
 8002d1c:	e022      	b.n	8002d64 <SVCCTL_App_Notification+0xcc>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8002d24:	4b3c      	ldr	r3, [pc, #240]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002d26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d104      	bne.n	8002d38 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002d2e:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002d30:	2206      	movs	r2, #6
 8002d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8002d36:	e003      	b.n	8002d40 <SVCCTL_App_Notification+0xa8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8002d38:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002d4a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8002d4c:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <SVCCTL_App_Notification+0x184>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002d52:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002d54:	8ada      	ldrh	r2, [r3, #22]
 8002d56:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <SVCCTL_App_Notification+0x184>)
 8002d58:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8002d5a:	4830      	ldr	r0, [pc, #192]	; (8002e1c <SVCCTL_App_Notification+0x184>)
 8002d5c:	f000 fa38 	bl	80031d0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002d60:	e000      	b.n	8002d64 <SVCCTL_App_Notification+0xcc>
          break;
 8002d62:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8002d64:	e053      	b.n	8002e0e <SVCCTL_App_Notification+0x176>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d76:	d041      	beq.n	8002dfc <SVCCTL_App_Notification+0x164>
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7c:	dc46      	bgt.n	8002e0c <SVCCTL_App_Notification+0x174>
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d03e      	beq.n	8002e00 <SVCCTL_App_Notification+0x168>
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	db42      	blt.n	8002e0c <SVCCTL_App_Notification+0x174>
 8002d86:	f240 420a 	movw	r2, #1034	; 0x40a
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	dc3e      	bgt.n	8002e0c <SVCCTL_App_Notification+0x174>
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	dd3b      	ble.n	8002e0c <SVCCTL_App_Notification+0x174>
 8002d94:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8002d98:	2b09      	cmp	r3, #9
 8002d9a:	d837      	bhi.n	8002e0c <SVCCTL_App_Notification+0x174>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <SVCCTL_App_Notification+0x10c>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002df5 	.word	0x08002df5
 8002da8:	08002dcd 	.word	0x08002dcd
 8002dac:	08002e0d 	.word	0x08002e0d
 8002db0:	08002e0d 	.word	0x08002e0d
 8002db4:	08002e0d 	.word	0x08002e0d
 8002db8:	08002e0d 	.word	0x08002e0d
 8002dbc:	08002e05 	.word	0x08002e05
 8002dc0:	08002e0d 	.word	0x08002e0d
 8002dc4:	08002de1 	.word	0x08002de1
 8002dc8:	08002e05 	.word	0x08002e05
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002dce:	8adb      	ldrh	r3, [r3, #22]
 8002dd0:	4913      	ldr	r1, [pc, #76]	; (8002e20 <SVCCTL_App_Notification+0x188>)
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f006 f8bc 	bl	8008f50 <aci_gap_pass_key_resp>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8002dde:	e012      	b.n	8002e06 <SVCCTL_App_Notification+0x16e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <SVCCTL_App_Notification+0x180>)
 8002de2:	8adb      	ldrh	r3, [r3, #22]
 8002de4:	2101      	movs	r1, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f006 fa5c 	bl	80092a4 <aci_gap_numeric_comparison_value_confirm_yesno>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8002df2:	e008      	b.n	8002e06 <SVCCTL_App_Notification+0x16e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	3302      	adds	r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]
          break;
 8002dfa:	e004      	b.n	8002e06 <SVCCTL_App_Notification+0x16e>
          break;
 8002dfc:	bf00      	nop
 8002dfe:	e005      	b.n	8002e0c <SVCCTL_App_Notification+0x174>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8002e00:	bf00      	nop
 8002e02:	e003      	b.n	8002e0c <SVCCTL_App_Notification+0x174>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8002e04:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002e06:	e001      	b.n	8002e0c <SVCCTL_App_Notification+0x174>
      break;
 8002e08:	bf00      	nop
 8002e0a:	e000      	b.n	8002e0e <SVCCTL_App_Notification+0x176>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002e0c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3728      	adds	r7, #40	; 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000f98 	.word	0x20000f98
 8002e1c:	2000101c 	.word	0x2000101c
 8002e20:	0001b207 	.word	0x0001b207

08002e24 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <Ble_Tl_Init+0x20>)
 8002e2c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <Ble_Tl_Init+0x24>)
 8002e30:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8002e32:	463b      	mov	r3, r7
 8002e34:	4619      	mov	r1, r3
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <Ble_Tl_Init+0x28>)
 8002e38:	f006 ff28 	bl	8009c8c <hci_init>

  return;
 8002e3c:	bf00      	nop
}
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20030028 	.word	0x20030028
 8002e48:	08003151 	.word	0x08003151
 8002e4c:	08003119 	.word	0x08003119

08002e50 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	b08d      	sub	sp, #52	; 0x34
 8002e54:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8002e56:	2300      	movs	r3, #0
 8002e58:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002e5a:	2392      	movs	r3, #146	; 0x92
 8002e5c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8002e5e:	f006 fe74 	bl	8009b4a <hci_reset>
 8002e62:	4603      	mov	r3, r0
 8002e64:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8002e66:	f000 f8d7 	bl	8003018 <BleGetBdAddress>
 8002e6a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	2106      	movs	r1, #6
 8002e70:	2000      	movs	r0, #0
 8002e72:	f006 fd2a 	bl	80098ca <aci_hal_write_config_data>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8002e7a:	4a4a      	ldr	r2, [pc, #296]	; (8002fa4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8002e7c:	2110      	movs	r1, #16
 8002e7e:	2018      	movs	r0, #24
 8002e80:	f006 fd23 	bl	80098ca <aci_hal_write_config_data>
 8002e84:	4603      	mov	r3, r0
 8002e86:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8002e88:	4a47      	ldr	r2, [pc, #284]	; (8002fa8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	2008      	movs	r0, #8
 8002e8e:	f006 fd1c 	bl	80098ca <aci_hal_write_config_data>
 8002e92:	4603      	mov	r3, r0
 8002e94:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002e96:	2118      	movs	r1, #24
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f006 fd9b 	bl	80099d4 <aci_hal_set_tx_power_level>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8002ea2:	f006 fa66 	bl	8009372 <aci_gatt_init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01f      	beq.n	8002efc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8002ebc:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8002ebe:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8002ec0:	1dba      	adds	r2, r7, #6
 8002ec2:	7bf8      	ldrb	r0, [r7, #15]
 8002ec4:	1cbb      	adds	r3, r7, #2
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	2209      	movs	r2, #9
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f006 f8a4 	bl	800901e <aci_gap_init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]
    else
    {
//      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8002eda:	88fc      	ldrh	r4, [r7, #6]
 8002edc:	88bd      	ldrh	r5, [r7, #4]
 8002ede:	68b8      	ldr	r0, [r7, #8]
 8002ee0:	f7fd f94e 	bl	8000180 <strlen>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f006 fc40 	bl	8009778 <aci_gatt_update_char_value>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	75fb      	strb	r3, [r7, #23]
    {
//      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8002efc:	88f8      	ldrh	r0, [r7, #6]
 8002efe:	8879      	ldrh	r1, [r7, #2]
 8002f00:	463b      	mov	r3, r7
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2302      	movs	r3, #2
 8002f06:	2200      	movs	r2, #0
 8002f08:	f006 fc36 	bl	8009778 <aci_gatt_update_char_value>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002f10:	2202      	movs	r2, #2
 8002f12:	2102      	movs	r1, #2
 8002f14:	2000      	movs	r0, #0
 8002f16:	f006 fe3c 	bl	8009b92 <hci_le_set_default_phy>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002f24:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f005 fef9 	bl	8008d20 <aci_gap_set_io_capability>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002f32:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f40:	2210      	movs	r2, #16
 8002f42:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8002f4e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f58:	789c      	ldrb	r4, [r3, #2]
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f5c:	785d      	ldrb	r5, [r3, #1]
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f60:	791b      	ldrb	r3, [r3, #4]
 8002f62:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f64:	7952      	ldrb	r2, [r2, #5]
 8002f66:	4912      	ldr	r1, [pc, #72]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f68:	78c9      	ldrb	r1, [r1, #3]
 8002f6a:	4811      	ldr	r0, [pc, #68]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f6c:	6880      	ldr	r0, [r0, #8]
 8002f6e:	2600      	movs	r6, #0
 8002f70:	9604      	str	r6, [sp, #16]
 8002f72:	9003      	str	r0, [sp, #12]
 8002f74:	9102      	str	r1, [sp, #8]
 8002f76:	9201      	str	r2, [sp, #4]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4629      	mov	r1, r5
 8002f80:	4620      	mov	r0, r4
 8002f82:	f005 ff21 	bl	8008dc8 <aci_gap_set_authentication_requirement>
 8002f86:	4603      	mov	r3, r0
 8002f88:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002f8c:	789b      	ldrb	r3, [r3, #2]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8002f92:	f006 f963 	bl	800925c <aci_gap_configure_whitelist>
 8002f96:	4603      	mov	r3, r0
 8002f98:	75fb      	strb	r3, [r7, #23]
    {
//      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
//  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	08010b64 	.word	0x08010b64
 8002fa8:	08010b74 	.word	0x08010b74
 8002fac:	080107a8 	.word	0x080107a8
 8002fb0:	20000f98 	.word	0x20000f98
 8002fb4:	0001b207 	.word	0x0001b207

08002fb8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	; 0x30
 8002fbc:	af08      	add	r7, sp, #32
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002fc2:	2392      	movs	r3, #146	; 0x92
 8002fc4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <Adv_Request+0x58>)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8002fce:	2300      	movs	r3, #0
 8002fd0:	9306      	str	r3, [sp, #24]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9305      	str	r3, [sp, #20]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9304      	str	r3, [sp, #16]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9303      	str	r3, [sp, #12]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	9302      	str	r3, [sp, #8]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2300      	movs	r3, #0
 8002fec:	22a0      	movs	r2, #160	; 0xa0
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f005 fd9b 	bl	8008b2c <aci_gap_set_discoverable>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
  {
//    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8002ffa:	4906      	ldr	r1, [pc, #24]	; (8003014 <Adv_Request+0x5c>)
 8002ffc:	2017      	movs	r0, #23
 8002ffe:	f006 f8bb 	bl	8009178 <aci_gap_update_adv_data>
 8003002:	4603      	mov	r3, r0
 8003004:	73fb      	strb	r3, [r7, #15]
  else
  {
//      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8003006:	bf00      	nop
}
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000f98 	.word	0x20000f98
 8003014:	20000008 	.word	0x20000008

08003018 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800301e:	f7ff fdbd 	bl	8002b9c <LL_FLASH_GetUDN>
 8003022:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d023      	beq.n	8003074 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800302c:	f7ff fdce 	bl	8002bcc <LL_FLASH_GetSTCompanyID>
 8003030:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003032:	f7ff fdbf 	bl	8002bb4 <LL_FLASH_GetDeviceID>
 8003036:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <BleGetBdAddress+0x80>)
 800303e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <BleGetBdAddress+0x80>)
 8003048:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <BleGetBdAddress+0x80>)
 8003050:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <BleGetBdAddress+0x80>)
 8003058:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	b2da      	uxtb	r2, r3
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <BleGetBdAddress+0x80>)
 8003062:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	0c1b      	lsrs	r3, r3, #16
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <BleGetBdAddress+0x80>)
 800306c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <BleGetBdAddress+0x80>)
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e00b      	b.n	800308c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8003074:	2000      	movs	r0, #0
 8003076:	f006 ffbf 	bl	8009ff8 <OTP_Read>
 800307a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e001      	b.n	800308c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <BleGetBdAddress+0x84>)
 800308a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800308c:	697b      	ldr	r3, [r7, #20]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000f90 	.word	0x20000f90
 800309c:	08010b5c 	.word	0x08010b5c

080030a0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <Adv_Cancel+0x30>)
 80030a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d00a      	beq.n	80030c6 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80030b0:	2392      	movs	r3, #146	; 0x92
 80030b2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80030b4:	f005 fd16 	bl	8008ae4 <aci_gap_set_non_discoverable>
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <Adv_Cancel+0x30>)
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
}
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000f98 	.word	0x20000f98

080030d4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80030dc:	2100      	movs	r1, #0
 80030de:	2002      	movs	r0, #2
 80030e0:	f007 ff5c 	bl	800af9c <UTIL_SEQ_SetTask>

  return;
 80030e4:	bf00      	nop
}
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f007 ffbd 	bl	800b074 <UTIL_SEQ_SetEvt>

  return;
 80030fa:	bf00      	nop
}
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800310a:	2001      	movs	r0, #1
 800310c:	f007 ffd2 	bl	800b0b4 <UTIL_SEQ_WaitEvt>

  return;
 8003110:	bf00      	nop
}
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	3308      	adds	r3, #8
 800312a:	4618      	mov	r0, r3
 800312c:	f007 fb3a 	bl	800a7a4 <SVCCTL_UserEvtRx>
 8003130:	4603      	mov	r3, r0
 8003132:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003140:	e003      	b.n	800314a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
  return;
 8003148:	bf00      	nop
}
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <BLE_StatusNot+0x16>
 8003160:	2b01      	cmp	r3, #1
 8003162:	d006      	beq.n	8003172 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8003164:	e00b      	b.n	800317e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003166:	2307      	movs	r3, #7
 8003168:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f007 ff42 	bl	800aff4 <UTIL_SEQ_PauseTask>
      break;
 8003170:	e005      	b.n	800317e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003172:	2307      	movs	r3, #7
 8003174:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f007 ff5c 	bl	800b034 <UTIL_SEQ_ResumeTask>
      break;
 800317c:	bf00      	nop
  }

  return;
 800317e:	bf00      	nop
}
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <Custom_STM_App_Notification+0x16>
 8003198:	2b01      	cmp	r3, #1
 800319a:	d00d      	beq.n	80031b8 <Custom_STM_App_Notification+0x30>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800319c:	e012      	b.n	80031c4 <Custom_STM_App_Notification+0x3c>
    	HW_TS_Stop(Custom_App_Context.TimerMeasurement_Id);
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <Custom_STM_App_Notification+0x44>)
 80031a0:	7a1b      	ldrb	r3, [r3, #8]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe ff5a 	bl	800205c <HW_TS_Stop>
    	HW_TS_Start(Custom_App_Context.TimerMeasurement_Id, PAGAPP_MEASUREMENT_INTERVAL);
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <Custom_STM_App_Notification+0x44>)
 80031aa:	7a1b      	ldrb	r3, [r3, #8]
 80031ac:	f641 0103 	movw	r1, #6147	; 0x1803
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe ffd7 	bl	8002164 <HW_TS_Start>
      break;
 80031b6:	e005      	b.n	80031c4 <Custom_STM_App_Notification+0x3c>
    	HW_TS_Stop(Custom_App_Context.TimerMeasurement_Id);
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <Custom_STM_App_Notification+0x44>)
 80031ba:	7a1b      	ldrb	r3, [r3, #8]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe ff4d 	bl	800205c <HW_TS_Stop>
      break;
 80031c2:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80031c4:	bf00      	nop
}
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20001020 	.word	0x20001020

080031d0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <Custom_APP_Notification+0x16>
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d004      	beq.n	80031ee <Custom_APP_Notification+0x1e>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80031e4:	e007      	b.n	80031f6 <Custom_APP_Notification+0x26>
        Custom_App_Context.Pag_Notification_Status = 1;
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <Custom_APP_Notification+0x34>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
      break;
 80031ec:	e003      	b.n	80031f6 <Custom_APP_Notification+0x26>
        Custom_App_Context.Pag_Notification_Status = 0;
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <Custom_APP_Notification+0x34>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
      break;
 80031f4:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80031f6:	bf00      	nop
}
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20001020 	.word	0x20001020

08003208 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
UTIL_SEQ_RegTask(1 << CFG_TASK_MEAS_REQ_ID, UTIL_SEQ_RFU, PAGAPP_Measurment);
 800320c:	4a09      	ldr	r2, [pc, #36]	; (8003234 <Custom_APP_Init+0x2c>)
 800320e:	2100      	movs	r1, #0
 8003210:	2004      	movs	r0, #4
 8003212:	f007 fea1 	bl	800af58 <UTIL_SEQ_RegTask>

Custom_App_Context.Pag_Notification_Status = 0;
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <Custom_APP_Init+0x30>)
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
Custom_App_Context.Data = 0;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <Custom_APP_Init+0x30>)
 800321e:	2200      	movs	r2, #0
 8003220:	605a      	str	r2, [r3, #4]

HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Custom_App_Context.TimerMeasurement_Id), hw_ts_Repeated, PAGMeas);
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <Custom_APP_Init+0x34>)
 8003224:	2201      	movs	r2, #1
 8003226:	4906      	ldr	r1, [pc, #24]	; (8003240 <Custom_APP_Init+0x38>)
 8003228:	2000      	movs	r0, #0
 800322a:	f7fe fe9d 	bl	8001f68 <HW_TS_Create>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800322e:	bf00      	nop
}
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	08003245 	.word	0x08003245
 8003238:	20001020 	.word	0x20001020
 800323c:	080033a9 	.word	0x080033a9
 8003240:	20001028 	.word	0x20001028

08003244 <PAGAPP_Measurment>:
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/

static void PAGAPP_Measurment()
{
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	b091      	sub	sp, #68	; 0x44
 8003248:	af0a      	add	r7, sp, #40	; 0x28
	  getAccMPU();
 800324a:	f000 f8b5 	bl	80033b8 <getAccMPU>
	  get_location();
 800324e:	f000 f8df 	bl	8003410 <get_location>
	  Max30102Loop();
 8003252:	f000 f949 	bl	80034e8 <Max30102Loop>
	  snprintf(Data, (size_t)86, "a11adf7a-f226-435f-891d-5fbd5eae7445;%3d.%5d;%3d.%5d;%2d.%2d;%2d.%2d;%2d.%2d;%3d", //
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <PAGAPP_Measurment+0x130>)
 8003258:	681d      	ldr	r5, [r3, #0]
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <PAGAPP_Measurment+0x134>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b47      	ldr	r3, [pc, #284]	; (800337c <PAGAPP_Measurment+0x138>)
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <PAGAPP_Measurment+0x13c>)
 8003264:	6818      	ldr	r0, [r3, #0]
			  Latitude_before,Latitude_after, Longitude_before, Longitude_after,
			  (uint8_t)ax, (uint8_t)(ax*100)%100,(uint8_t)ay, (uint8_t)(ay*100)%100, (uint8_t)az, (uint8_t)(az*100)%100,
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <PAGAPP_Measurment+0x140>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003270:	edc7 7a05 	vstr	s15, [r7, #20]
 8003274:	7d3b      	ldrb	r3, [r7, #20]
 8003276:	b2db      	uxtb	r3, r3
	  snprintf(Data, (size_t)86, "a11adf7a-f226-435f-891d-5fbd5eae7445;%3d.%5d;%3d.%5d;%2d.%2d;%2d.%2d;%2d.%2d;%3d", //
 8003278:	617b      	str	r3, [r7, #20]
			  (uint8_t)ax, (uint8_t)(ax*100)%100,(uint8_t)ay, (uint8_t)(ay*100)%100, (uint8_t)az, (uint8_t)(az*100)%100,
 800327a:	4b42      	ldr	r3, [pc, #264]	; (8003384 <PAGAPP_Measurment+0x140>)
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003388 <PAGAPP_Measurment+0x144>
 8003284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800328c:	edc7 7a04 	vstr	s15, [r7, #16]
 8003290:	7c3b      	ldrb	r3, [r7, #16]
 8003292:	b2db      	uxtb	r3, r3
	  snprintf(Data, (size_t)86, "a11adf7a-f226-435f-891d-5fbd5eae7445;%3d.%5d;%3d.%5d;%2d.%2d;%2d.%2d;%2d.%2d;%3d", //
 8003294:	4c3d      	ldr	r4, [pc, #244]	; (800338c <PAGAPP_Measurment+0x148>)
 8003296:	fba4 6403 	umull	r6, r4, r4, r3
 800329a:	0964      	lsrs	r4, r4, #5
 800329c:	2664      	movs	r6, #100	; 0x64
 800329e:	fb06 f404 	mul.w	r4, r6, r4
 80032a2:	1b1b      	subs	r3, r3, r4
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	613b      	str	r3, [r7, #16]
			  (uint8_t)ax, (uint8_t)(ax*100)%100,(uint8_t)ay, (uint8_t)(ay*100)%100, (uint8_t)az, (uint8_t)(az*100)%100,
 80032a8:	4b39      	ldr	r3, [pc, #228]	; (8003390 <PAGAPP_Measurment+0x14c>)
 80032aa:	edd3 7a00 	vldr	s15, [r3]
 80032ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032b2:	edc7 7a03 	vstr	s15, [r7, #12]
 80032b6:	7b3b      	ldrb	r3, [r7, #12]
 80032b8:	b2db      	uxtb	r3, r3
	  snprintf(Data, (size_t)86, "a11adf7a-f226-435f-891d-5fbd5eae7445;%3d.%5d;%3d.%5d;%2d.%2d;%2d.%2d;%2d.%2d;%3d", //
 80032ba:	60fb      	str	r3, [r7, #12]
			  (uint8_t)ax, (uint8_t)(ax*100)%100,(uint8_t)ay, (uint8_t)(ay*100)%100, (uint8_t)az, (uint8_t)(az*100)%100,
 80032bc:	4b34      	ldr	r3, [pc, #208]	; (8003390 <PAGAPP_Measurment+0x14c>)
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003388 <PAGAPP_Measurment+0x144>
 80032c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ce:	edc7 7a02 	vstr	s15, [r7, #8]
 80032d2:	7a3b      	ldrb	r3, [r7, #8]
 80032d4:	b2db      	uxtb	r3, r3
	  snprintf(Data, (size_t)86, "a11adf7a-f226-435f-891d-5fbd5eae7445;%3d.%5d;%3d.%5d;%2d.%2d;%2d.%2d;%2d.%2d;%3d", //
 80032d6:	4c2d      	ldr	r4, [pc, #180]	; (800338c <PAGAPP_Measurment+0x148>)
 80032d8:	fba4 6403 	umull	r6, r4, r4, r3
 80032dc:	0964      	lsrs	r4, r4, #5
 80032de:	2664      	movs	r6, #100	; 0x64
 80032e0:	fb06 f404 	mul.w	r4, r6, r4
 80032e4:	1b1b      	subs	r3, r3, r4
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	60bb      	str	r3, [r7, #8]
			  (uint8_t)ax, (uint8_t)(ax*100)%100,(uint8_t)ay, (uint8_t)(ay*100)%100, (uint8_t)az, (uint8_t)(az*100)%100,
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <PAGAPP_Measurment+0x150>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80032f8:	793b      	ldrb	r3, [r7, #4]
 80032fa:	b2db      	uxtb	r3, r3
	  snprintf(Data, (size_t)86, "a11adf7a-f226-435f-891d-5fbd5eae7445;%3d.%5d;%3d.%5d;%2d.%2d;%2d.%2d;%2d.%2d;%3d", //
 80032fc:	607b      	str	r3, [r7, #4]
			  (uint8_t)ax, (uint8_t)(ax*100)%100,(uint8_t)ay, (uint8_t)(ay*100)%100, (uint8_t)az, (uint8_t)(az*100)%100,
 80032fe:	4b25      	ldr	r3, [pc, #148]	; (8003394 <PAGAPP_Measurment+0x150>)
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003388 <PAGAPP_Measurment+0x144>
 8003308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800330c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003310:	edc7 7a00 	vstr	s15, [r7]
 8003314:	783b      	ldrb	r3, [r7, #0]
 8003316:	b2db      	uxtb	r3, r3
	  snprintf(Data, (size_t)86, "a11adf7a-f226-435f-891d-5fbd5eae7445;%3d.%5d;%3d.%5d;%2d.%2d;%2d.%2d;%2d.%2d;%3d", //
 8003318:	4c1c      	ldr	r4, [pc, #112]	; (800338c <PAGAPP_Measurment+0x148>)
 800331a:	fba4 6403 	umull	r6, r4, r4, r3
 800331e:	0964      	lsrs	r4, r4, #5
 8003320:	2664      	movs	r6, #100	; 0x64
 8003322:	fb06 f404 	mul.w	r4, r6, r4
 8003326:	1b1b      	subs	r3, r3, r4
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461c      	mov	r4, r3
 800332c:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <PAGAPP_Measurment+0x154>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	9309      	str	r3, [sp, #36]	; 0x24
 8003332:	9408      	str	r4, [sp, #32]
 8003334:	687c      	ldr	r4, [r7, #4]
 8003336:	9407      	str	r4, [sp, #28]
 8003338:	68bc      	ldr	r4, [r7, #8]
 800333a:	9406      	str	r4, [sp, #24]
 800333c:	68fc      	ldr	r4, [r7, #12]
 800333e:	9405      	str	r4, [sp, #20]
 8003340:	693c      	ldr	r4, [r7, #16]
 8003342:	9404      	str	r4, [sp, #16]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	9303      	str	r3, [sp, #12]
 8003348:	9002      	str	r0, [sp, #8]
 800334a:	9101      	str	r1, [sp, #4]
 800334c:	9200      	str	r2, [sp, #0]
 800334e:	462b      	mov	r3, r5
 8003350:	4a12      	ldr	r2, [pc, #72]	; (800339c <PAGAPP_Measurment+0x158>)
 8003352:	2156      	movs	r1, #86	; 0x56
 8003354:	4812      	ldr	r0, [pc, #72]	; (80033a0 <PAGAPP_Measurment+0x15c>)
 8003356:	f00b fd29 	bl	800edac <sniprintf>
			  HeartRate);
	  Custom_App_Context.Data = Data;
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <PAGAPP_Measurment+0x160>)
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <PAGAPP_Measurment+0x15c>)
 800335e:	605a      	str	r2, [r3, #4]
	  Custom_STM_App_Update_Char(CUSTOM_STM_PAG, (uint8_t*)Custom_App_Context.Data);
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <PAGAPP_Measurment+0x160>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4619      	mov	r1, r3
 8003366:	2000      	movs	r0, #0
 8003368:	f000 f9e2 	bl	8003730 <Custom_STM_App_Update_Char>

	  return;
 800336c:	bf00      	nop
}
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003374:	200016ac 	.word	0x200016ac
 8003378:	200016b0 	.word	0x200016b0
 800337c:	200016b4 	.word	0x200016b4
 8003380:	200016b8 	.word	0x200016b8
 8003384:	200016c0 	.word	0x200016c0
 8003388:	42c80000 	.word	0x42c80000
 800338c:	51eb851f 	.word	0x51eb851f
 8003390:	200016c4 	.word	0x200016c4
 8003394:	200016c8 	.word	0x200016c8
 8003398:	200016bc 	.word	0x200016bc
 800339c:	080107b4 	.word	0x080107b4
 80033a0:	200016cc 	.word	0x200016cc
 80033a4:	20001020 	.word	0x20001020

080033a8 <PAGMeas>:

static void PAGMeas()
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 80033ac:	2100      	movs	r1, #0
 80033ae:	2004      	movs	r0, #4
 80033b0:	f007 fdf4 	bl	800af9c <UTIL_SEQ_SetTask>
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <getAccMPU>:
{
	return((uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS)));
}

void getAccMPU()
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	  while (updateMPU(&mpu)!=1);
 80033bc:	bf00      	nop
 80033be:	4810      	ldr	r0, [pc, #64]	; (8003400 <getAccMPU+0x48>)
 80033c0:	f008 fcc2 	bl	800bd48 <updateMPU>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d1f9      	bne.n	80033be <getAccMPU+0x6>
	  ax = getAccX(&mpu);
 80033ca:	480d      	ldr	r0, [pc, #52]	; (8003400 <getAccMPU+0x48>)
 80033cc:	f008 fd8a 	bl	800bee4 <getAccX>
 80033d0:	eef0 7a40 	vmov.f32	s15, s0
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <getAccMPU+0x4c>)
 80033d6:	edc3 7a00 	vstr	s15, [r3]
	  ay = getAccY(&mpu);
 80033da:	4809      	ldr	r0, [pc, #36]	; (8003400 <getAccMPU+0x48>)
 80033dc:	f008 fd91 	bl	800bf02 <getAccY>
 80033e0:	eef0 7a40 	vmov.f32	s15, s0
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <getAccMPU+0x50>)
 80033e6:	edc3 7a00 	vstr	s15, [r3]
	  az = getAccZ(&mpu);
 80033ea:	4805      	ldr	r0, [pc, #20]	; (8003400 <getAccMPU+0x48>)
 80033ec:	f008 fd98 	bl	800bf20 <getAccZ>
 80033f0:	eef0 7a40 	vmov.f32	s15, s0
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <getAccMPU+0x54>)
 80033f6:	edc3 7a00 	vstr	s15, [r3]
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000ecc 	.word	0x20000ecc
 8003404:	200016c0 	.word	0x200016c0
 8003408:	200016c4 	.word	0x200016c4
 800340c:	200016c8 	.word	0x200016c8

08003410 <get_location>:
void get_location()
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af04      	add	r7, sp, #16
	Msgindex = 0;
 8003416:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <get_location+0xa4>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
	strcpy(Txdata, (char*)(Rxdata));
 800341c:	4926      	ldr	r1, [pc, #152]	; (80034b8 <get_location+0xa8>)
 800341e:	4827      	ldr	r0, [pc, #156]	; (80034bc <get_location+0xac>)
 8003420:	f00b fd26 	bl	800ee70 <strcpy>
	ptr = strstr(Txdata, "GPRMC");
 8003424:	4926      	ldr	r1, [pc, #152]	; (80034c0 <get_location+0xb0>)
 8003426:	4825      	ldr	r0, [pc, #148]	; (80034bc <get_location+0xac>)
 8003428:	f00b fd2a 	bl	800ee80 <strstr>
 800342c:	4603      	mov	r3, r0
 800342e:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <get_location+0xb4>)
 8003430:	6013      	str	r3, [r2, #0]
	if(*ptr == 71)
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <get_location+0xb4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b47      	cmp	r3, #71	; 0x47
 800343a:	d138      	bne.n	80034ae <get_location+0x9e>
	{
		while(1)
		{
			GPS_Payyload[Msgindex] = *ptr;
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <get_location+0xb4>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <get_location+0xa4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	7811      	ldrb	r1, [r2, #0]
 8003446:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <get_location+0xb8>)
 8003448:	54d1      	strb	r1, [r2, r3]
			Msgindex++;
 800344a:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <get_location+0xa4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <get_location+0xa4>)
 8003452:	6013      	str	r3, [r2, #0]
			*ptr=*(ptr+Msgindex);
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <get_location+0xb4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a16      	ldr	r2, [pc, #88]	; (80034b4 <get_location+0xa4>)
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	441a      	add	r2, r3
 800345e:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <get_location+0xb4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	7812      	ldrb	r2, [r2, #0]
 8003464:	701a      	strb	r2, [r3, #0]
			if (*ptr == '\n' || *ptr == '\0')
 8003466:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <get_location+0xb4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b0a      	cmp	r3, #10
 800346e:	d004      	beq.n	800347a <get_location+0x6a>
 8003470:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <get_location+0xb4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e0      	bne.n	800343c <get_location+0x2c>
			{
				GPS_Payyload[Msgindex] = "\0";
 800347a:	4a14      	ldr	r2, [pc, #80]	; (80034cc <get_location+0xbc>)
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <get_location+0xa4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	b2d1      	uxtb	r1, r2
 8003482:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <get_location+0xb8>)
 8003484:	54d1      	strb	r1, [r2, r3]
				break;
 8003486:	bf00      	nop
			}
		}
		if (*ptr == '\n'){
 8003488:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <get_location+0xb4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b0a      	cmp	r3, #10
 8003490:	d10d      	bne.n	80034ae <get_location+0x9e>
			sscanf(GPS_Payyload, "GPRMC,%d.%d,A,%d.%d,N,%d.%d,", &Time_before, &Time_before,
 8003492:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <get_location+0xc0>)
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <get_location+0xc4>)
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <get_location+0xc8>)
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <get_location+0xcc>)
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <get_location+0xd0>)
 80034a4:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <get_location+0xd0>)
 80034a6:	490f      	ldr	r1, [pc, #60]	; (80034e4 <get_location+0xd4>)
 80034a8:	4807      	ldr	r0, [pc, #28]	; (80034c8 <get_location+0xb8>)
 80034aa:	f00b fcb3 	bl	800ee14 <siscanf>
					&Latitude_before,&Latitude_after,
					&Longitude_before, &Longitude_after);
		}
	}
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200016a0 	.word	0x200016a0
 80034b8:	20000bdc 	.word	0x20000bdc
 80034bc:	2000134c 	.word	0x2000134c
 80034c0:	08010808 	.word	0x08010808
 80034c4:	200016a4 	.word	0x200016a4
 80034c8:	2000163c 	.word	0x2000163c
 80034cc:	08010810 	.word	0x08010810
 80034d0:	200016b8 	.word	0x200016b8
 80034d4:	200016b4 	.word	0x200016b4
 80034d8:	200016b0 	.word	0x200016b0
 80034dc:	200016ac 	.word	0x200016ac
 80034e0:	200016a8 	.word	0x200016a8
 80034e4:	08010814 	.word	0x08010814

080034e8 <Max30102Loop>:

void Max30102Loop()
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b092      	sub	sp, #72	; 0x48
 80034ec:	af06      	add	r7, sp, #24
  int32_t n_heart_rate; 				// heart rate value
  int8_t  ch_hr_valid;  				// indicator to show if the heart rate calculation is valid
  uint8_t i;

  // buffer length of BUFFER_SIZE stores ST seconds of samples running at FS sps
  for (i = 0U; i < BUFFER_SIZE; i++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80034f4:	e01c      	b.n	8003530 <Max30102Loop+0x48>
  {
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET);	// wait until the interrupt pin asserts
 80034f6:	bf00      	nop
 80034f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003500:	f001 fa24 	bl	800494c <HAL_GPIO_ReadPin>
 8003504:	4603      	mov	r3, r0
 8003506:	2b01      	cmp	r3, #1
 8003508:	d0f6      	beq.n	80034f8 <Max30102Loop+0x10>

#ifdef FAKE_MAX30102_CLONE
    maxim_max30102_read_fifo((aun_ir_buffer + i), (aun_red_buffer + i));  // read from MAX30102 FIFO
 800350a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <Max30102Loop+0x9c>)
 8003512:	441a      	add	r2, r3
 8003514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	491b      	ldr	r1, [pc, #108]	; (8003588 <Max30102Loop+0xa0>)
 800351c:	440b      	add	r3, r1
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f008 fb65 	bl	800bbf0 <maxim_max30102_read_fifo>
  for (i = 0U; i < BUFFER_SIZE; i++)
 8003526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800352a:	3301      	adds	r3, #1
 800352c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003534:	2b63      	cmp	r3, #99	; 0x63
 8003536:	d9de      	bls.n	80034f6 <Max30102Loop+0xe>
#else
    maxim_max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));  // read from MAX30102 FIFO
#endif
  }
  // calculate heart rate and SpO2 after BUFFER_SIZE samples (ST seconds of samples) using Robert's method
  rf_heart_rate_and_oxygen_saturation(aun_ir_buffer, BUFFER_SIZE, aun_red_buffer,
 8003538:	f107 0214 	add.w	r2, r7, #20
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	9304      	str	r3, [sp, #16]
 8003542:	f107 0310 	add.w	r3, r7, #16
 8003546:	9303      	str	r3, [sp, #12]
 8003548:	1cfb      	adds	r3, r7, #3
 800354a:	9302      	str	r3, [sp, #8]
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	f107 030b 	add.w	r3, r7, #11
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <Max30102Loop+0xa0>)
 800355a:	2164      	movs	r1, #100	; 0x64
 800355c:	4809      	ldr	r0, [pc, #36]	; (8003584 <Max30102Loop+0x9c>)
 800355e:	f007 fe3f 	bl	800b1e0 <rf_heart_rate_and_oxygen_saturation>
		  &n_spo2, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid, &ratio, &correl);
  if (ch_hr_valid && ch_spo2_valid)
 8003562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <Max30102Loop+0x92>
 800356a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <Max30102Loop+0x92>
  {
    HeartRate = n_heart_rate;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <Max30102Loop+0xa4>)
 8003578:	701a      	strb	r2, [r3, #0]
  }
}
 800357a:	bf00      	nop
 800357c:	3730      	adds	r7, #48	; 0x30
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000102c 	.word	0x2000102c
 8003588:	200011bc 	.word	0x200011bc
 800358c:	200016bc 	.word	0x200016bc

08003590 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3301      	adds	r3, #1
 80035a2:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2bff      	cmp	r3, #255	; 0xff
 80035aa:	d141      	bne.n	8003630 <Custom_STM_Event_Handler+0xa0>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	3302      	adds	r3, #2
 80035b0:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f640 4214 	movw	r2, #3092	; 0xc14
 80035bc:	4293      	cmp	r3, r2
 80035be:	d033      	beq.n	8003628 <Custom_STM_Event_Handler+0x98>
 80035c0:	f640 4214 	movw	r2, #3092	; 0xc14
 80035c4:	4293      	cmp	r3, r2
 80035c6:	dc31      	bgt.n	800362c <Custom_STM_Event_Handler+0x9c>
 80035c8:	f640 4201 	movw	r2, #3073	; 0xc01
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <Custom_STM_Event_Handler+0x48>
 80035d0:	f640 4213 	movw	r2, #3091	; 0xc13
 80035d4:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80035d6:	e02a      	b.n	800362e <Custom_STM_Event_Handler+0x9e>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3302      	adds	r3, #2
 80035dc:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomPagHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	885b      	ldrh	r3, [r3, #2]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	4b16      	ldr	r3, [pc, #88]	; (8003640 <Custom_STM_Event_Handler+0xb0>)
 80035e8:	885b      	ldrh	r3, [r3, #2]
 80035ea:	3302      	adds	r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d119      	bne.n	8003624 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	7a1b      	ldrb	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <Custom_STM_Event_Handler+0x74>
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d008      	beq.n	8003614 <Custom_STM_Event_Handler+0x84>
              break;
 8003602:	e010      	b.n	8003626 <Custom_STM_Event_Handler+0x96>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PAG_NOTIFY_DISABLED_EVT;
 8003604:	2301      	movs	r3, #1
 8003606:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8003608:	f107 0308 	add.w	r3, r7, #8
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fdbb 	bl	8003188 <Custom_STM_App_Notification>
                break;
 8003612:	e008      	b.n	8003626 <Custom_STM_Event_Handler+0x96>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_PAG_NOTIFY_ENABLED_EVT;
 8003614:	2300      	movs	r3, #0
 8003616:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8003618:	f107 0308 	add.w	r3, r7, #8
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fdb3 	bl	8003188 <Custom_STM_App_Notification>
                break;
 8003622:	e000      	b.n	8003626 <Custom_STM_Event_Handler+0x96>
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomPagHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/
 8003624:	bf00      	nop
          break;
 8003626:	e002      	b.n	800362e <Custom_STM_Event_Handler+0x9e>
          break;
 8003628:	bf00      	nop
 800362a:	e002      	b.n	8003632 <Custom_STM_Event_Handler+0xa2>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800362c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800362e:	e000      	b.n	8003632 <Custom_STM_Event_Handler+0xa2>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8003630:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8003632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8003636:	4618      	mov	r0, r3
 8003638:	3728      	adds	r7, #40	; 0x28
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20001724 	.word	0x20001724

08003644 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08c      	sub	sp, #48	; 0x30
 8003648:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800364a:	2392      	movs	r3, #146	; 0x92
 800364c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800364e:	4834      	ldr	r0, [pc, #208]	; (8003720 <SVCCTL_InitCustomSvc+0xdc>)
 8003650:	f007 f88e 	bl	800a770 <SVCCTL_RegisterSvcHandler>
   *                                2 for Pulse_Axel_GPS +
   *                                1 for Pulse_Axel_GPS configuration descriptor +
   *                              = 4
   */

  COPY_FOOTBALL_PLAYER_UUID(uuid.Char_UUID_128);
 8003654:	238f      	movs	r3, #143	; 0x8f
 8003656:	713b      	strb	r3, [r7, #4]
 8003658:	23e5      	movs	r3, #229	; 0xe5
 800365a:	717b      	strb	r3, [r7, #5]
 800365c:	23b3      	movs	r3, #179	; 0xb3
 800365e:	71bb      	strb	r3, [r7, #6]
 8003660:	23d5      	movs	r3, #213	; 0xd5
 8003662:	71fb      	strb	r3, [r7, #7]
 8003664:	232e      	movs	r3, #46	; 0x2e
 8003666:	723b      	strb	r3, [r7, #8]
 8003668:	237f      	movs	r3, #127	; 0x7f
 800366a:	727b      	strb	r3, [r7, #9]
 800366c:	234a      	movs	r3, #74	; 0x4a
 800366e:	72bb      	strb	r3, [r7, #10]
 8003670:	2398      	movs	r3, #152	; 0x98
 8003672:	72fb      	strb	r3, [r7, #11]
 8003674:	232a      	movs	r3, #42	; 0x2a
 8003676:	733b      	strb	r3, [r7, #12]
 8003678:	2348      	movs	r3, #72	; 0x48
 800367a:	737b      	strb	r3, [r7, #13]
 800367c:	237a      	movs	r3, #122	; 0x7a
 800367e:	73bb      	strb	r3, [r7, #14]
 8003680:	23cc      	movs	r3, #204	; 0xcc
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	2340      	movs	r3, #64	; 0x40
 8003686:	743b      	strb	r3, [r7, #16]
 8003688:	23fe      	movs	r3, #254	; 0xfe
 800368a:	747b      	strb	r3, [r7, #17]
 800368c:	2300      	movs	r3, #0
 800368e:	74bb      	strb	r3, [r7, #18]
 8003690:	2300      	movs	r3, #0
 8003692:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8003694:	1d39      	adds	r1, r7, #4
 8003696:	4b23      	ldr	r3, [pc, #140]	; (8003724 <SVCCTL_InitCustomSvc+0xe0>)
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2304      	movs	r3, #4
 800369c:	2201      	movs	r2, #1
 800369e:	2002      	movs	r0, #2
 80036a0:	f005 fe8c 	bl	80093bc <aci_gatt_add_service>
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Pulse_Axel_GPS
   */
  COPY_PULSE_AXEL_GPS_UUID(uuid.Char_UUID_128);
 80036a8:	2319      	movs	r3, #25
 80036aa:	713b      	strb	r3, [r7, #4]
 80036ac:	23ed      	movs	r3, #237	; 0xed
 80036ae:	717b      	strb	r3, [r7, #5]
 80036b0:	2382      	movs	r3, #130	; 0x82
 80036b2:	71bb      	strb	r3, [r7, #6]
 80036b4:	23ae      	movs	r3, #174	; 0xae
 80036b6:	71fb      	strb	r3, [r7, #7]
 80036b8:	23ed      	movs	r3, #237	; 0xed
 80036ba:	723b      	strb	r3, [r7, #8]
 80036bc:	2321      	movs	r3, #33	; 0x21
 80036be:	727b      	strb	r3, [r7, #9]
 80036c0:	234c      	movs	r3, #76	; 0x4c
 80036c2:	72bb      	strb	r3, [r7, #10]
 80036c4:	239d      	movs	r3, #157	; 0x9d
 80036c6:	72fb      	strb	r3, [r7, #11]
 80036c8:	2341      	movs	r3, #65	; 0x41
 80036ca:	733b      	strb	r3, [r7, #12]
 80036cc:	2345      	movs	r3, #69	; 0x45
 80036ce:	737b      	strb	r3, [r7, #13]
 80036d0:	2322      	movs	r3, #34	; 0x22
 80036d2:	73bb      	strb	r3, [r7, #14]
 80036d4:	238e      	movs	r3, #142	; 0x8e
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	2341      	movs	r3, #65	; 0x41
 80036da:	743b      	strb	r3, [r7, #16]
 80036dc:	23fe      	movs	r3, #254	; 0xfe
 80036de:	747b      	strb	r3, [r7, #17]
 80036e0:	2300      	movs	r3, #0
 80036e2:	74bb      	strb	r3, [r7, #18]
 80036e4:	2300      	movs	r3, #0
 80036e6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFpHdle,
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <SVCCTL_InitCustomSvc+0xe0>)
 80036ea:	8818      	ldrh	r0, [r3, #0]
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <SVCCTL_InitCustomSvc+0xe4>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	1d3a      	adds	r2, r7, #4
 80036f4:	490d      	ldr	r1, [pc, #52]	; (800372c <SVCCTL_InitCustomSvc+0xe8>)
 80036f6:	9105      	str	r1, [sp, #20]
 80036f8:	2100      	movs	r1, #0
 80036fa:	9104      	str	r1, [sp, #16]
 80036fc:	2110      	movs	r1, #16
 80036fe:	9103      	str	r1, [sp, #12]
 8003700:	2101      	movs	r1, #1
 8003702:	9102      	str	r1, [sp, #8]
 8003704:	2100      	movs	r1, #0
 8003706:	9101      	str	r1, [sp, #4]
 8003708:	2110      	movs	r1, #16
 800370a:	9100      	str	r1, [sp, #0]
 800370c:	2102      	movs	r1, #2
 800370e:	f005 ff2b 	bl	8009568 <aci_gatt_add_char>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8003716:	bf00      	nop
}
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	08003591 	.word	0x08003591
 8003724:	20001724 	.word	0x20001724
 8003728:	2000001f 	.word	0x2000001f
 800372c:	20001726 	.word	0x20001726

08003730 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	4603      	mov	r3, r0
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800373c:	2392      	movs	r3, #146	; 0x92
 800373e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10e      	bne.n	8003764 <Custom_STM_App_Update_Char+0x34>
  {

    case CUSTOM_STM_PAG:
      ret = aci_gatt_update_char_value(CustomContext.CustomFpHdle,
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <Custom_STM_App_Update_Char+0x40>)
 8003748:	8818      	ldrh	r0, [r3, #0]
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <Custom_STM_App_Update_Char+0x40>)
 800374c:	8859      	ldrh	r1, [r3, #2]
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <Custom_STM_App_Update_Char+0x44>)
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	2200      	movs	r2, #0
 800375a:	f006 f80d 	bl	8009778 <aci_gatt_update_char_value>
 800375e:	4603      	mov	r3, r0
 8003760:	73fb      	strb	r3, [r7, #15]
//        APP_DBG_MSG("  Success: aci_gatt_update_char_value PAG command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8003762:	e000      	b.n	8003766 <Custom_STM_App_Update_Char+0x36>

    default:
      break;
 8003764:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20001724 	.word	0x20001724
 8003774:	2000001f 	.word	0x2000001f

08003778 <LL_PWR_EnableBootC2>:
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <LL_PWR_EnableBootC2+0x1c>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <LL_PWR_EnableBootC2+0x1c>)
 8003782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003786:	60d3      	str	r3, [r2, #12]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	58000400 	.word	0x58000400

08003798 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80037a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80037a6:	4905      	ldr	r1, [pc, #20]	; (80037bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	58000800 	.word	0x58000800

080037c0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80037ca:	6a1a      	ldr	r2, [r3, #32]
 80037cc:	4904      	ldr	r1, [pc, #16]	; (80037e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	620b      	str	r3, [r1, #32]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	58000800 	.word	0x58000800

080037e4 <LL_AHB3_GRP1_EnableClock>:
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80037ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4013      	ands	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003808:	68fb      	ldr	r3, [r7, #12]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003822:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003836:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4013      	ands	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_C1_IPCC_EnableIT_TXF>:
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_C1_IPCC_EnableIT_RXO>:
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	43db      	mvns	r3, r3
 80038a2:	401a      	ands	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	605a      	str	r2, [r3, #4]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	401a      	ands	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	605a      	str	r2, [r3, #4]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_C1_IPCC_ClearFlag_CHx>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_C1_IPCC_SetFlag_CHx>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	041a      	lsls	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4013      	ands	r3, r2
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d101      	bne.n	8003952 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	4013      	ands	r3, r2
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d101      	bne.n	800397c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003990:	2102      	movs	r1, #2
 8003992:	4819      	ldr	r0, [pc, #100]	; (80039f8 <HW_IPCC_Rx_Handler+0x6c>)
 8003994:	f7ff ffe4 	bl	8003960 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HW_IPCC_Rx_Handler+0x26>
 800399e:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <HW_IPCC_Rx_Handler+0x6c>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80039ac:	f000 f8da 	bl	8003b64 <HW_IPCC_SYS_EvtHandler>
 80039b0:	e01f      	b.n	80039f2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80039b2:	2101      	movs	r1, #1
 80039b4:	4810      	ldr	r0, [pc, #64]	; (80039f8 <HW_IPCC_Rx_Handler+0x6c>)
 80039b6:	f7ff ffd3 	bl	8003960 <LL_C2_IPCC_IsActiveFlag_CHx>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HW_IPCC_Rx_Handler+0x46>
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HW_IPCC_Rx_Handler+0x6c>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80039cc:	f000 f88e 	bl	8003aec <HW_IPCC_BLE_EvtHandler>
 80039d0:	e00f      	b.n	80039f2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80039d2:	2108      	movs	r1, #8
 80039d4:	4808      	ldr	r0, [pc, #32]	; (80039f8 <HW_IPCC_Rx_Handler+0x6c>)
 80039d6:	f7ff ffc3 	bl	8003960 <LL_C2_IPCC_IsActiveFlag_CHx>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HW_IPCC_Rx_Handler+0x68>
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HW_IPCC_Rx_Handler+0x6c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80039ee:	f000 f905 	bl	8003bfc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
}
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	58000c00 	.word	0x58000c00

080039fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003a00:	2102      	movs	r1, #2
 8003a02:	481a      	ldr	r0, [pc, #104]	; (8003a6c <HW_IPCC_Tx_Handler+0x70>)
 8003a04:	f7ff ff97 	bl	8003936 <LL_C1_IPCC_IsActiveFlag_CHx>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HW_IPCC_Tx_Handler+0x26>
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HW_IPCC_Tx_Handler+0x70>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003a1c:	f000 f896 	bl	8003b4c <HW_IPCC_SYS_CmdEvtHandler>
 8003a20:	e020      	b.n	8003a64 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8003a22:	2108      	movs	r1, #8
 8003a24:	4811      	ldr	r0, [pc, #68]	; (8003a6c <HW_IPCC_Tx_Handler+0x70>)
 8003a26:	f7ff ff86 	bl	8003936 <LL_C1_IPCC_IsActiveFlag_CHx>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HW_IPCC_Tx_Handler+0x48>
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HW_IPCC_Tx_Handler+0x70>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003a3e:	f000 f8bf 	bl	8003bc0 <HW_IPCC_MM_FreeBufHandler>
 8003a42:	e00f      	b.n	8003a64 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8003a44:	2120      	movs	r1, #32
 8003a46:	4809      	ldr	r0, [pc, #36]	; (8003a6c <HW_IPCC_Tx_Handler+0x70>)
 8003a48:	f7ff ff75 	bl	8003936 <LL_C1_IPCC_IsActiveFlag_CHx>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HW_IPCC_Tx_Handler+0x6a>
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HW_IPCC_Tx_Handler+0x70>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003a60:	f000 f850 	bl	8003b04 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
}
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	58000c00 	.word	0x58000c00

08003a70 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003a74:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003a78:	f7ff fecd 	bl	8003816 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003a7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a80:	f7ff fe9e 	bl	80037c0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003a84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a88:	f7ff fe86 	bl	8003798 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003a8c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003a8e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003a90:	f7ff fe72 	bl	8003778 <LL_PWR_EnableBootC2>

  return;
 8003a94:	bf00      	nop
}
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003a9c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003aa0:	f7ff fea0 	bl	80037e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <HW_IPCC_Init+0x28>)
 8003aa6:	f7ff fee2 	bl	800386e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8003aaa:	4805      	ldr	r0, [pc, #20]	; (8003ac0 <HW_IPCC_Init+0x28>)
 8003aac:	f7ff fecf 	bl	800384e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003ab0:	202c      	movs	r0, #44	; 0x2c
 8003ab2:	f000 fb22 	bl	80040fa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003ab6:	202d      	movs	r0, #45	; 0x2d
 8003ab8:	f000 fb1f 	bl	80040fa <HAL_NVIC_EnableIRQ>

  return;
 8003abc:	bf00      	nop
}
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	58000c00 	.word	0x58000c00

08003ac4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <HW_IPCC_BLE_Init+0x10>)
 8003acc:	f7ff ff04 	bl	80038d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003ad0:	bf00      	nop
}
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	58000c00 	.word	0x58000c00

08003ad8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8003adc:	2101      	movs	r1, #1
 8003ade:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <HW_IPCC_BLE_SendCmd+0x10>)
 8003ae0:	f7ff ff1a 	bl	8003918 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003ae4:	bf00      	nop
}
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	58000c00 	.word	0x58000c00

08003aec <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003af0:	f006 ff3c 	bl	800a96c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003af4:	2101      	movs	r1, #1
 8003af6:	4802      	ldr	r0, [pc, #8]	; (8003b00 <HW_IPCC_BLE_EvtHandler+0x14>)
 8003af8:	f7ff ff00 	bl	80038fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003afc:	bf00      	nop
}
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	58000c00 	.word	0x58000c00

08003b04 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003b08:	2120      	movs	r1, #32
 8003b0a:	4803      	ldr	r0, [pc, #12]	; (8003b18 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003b0c:	f7ff fed2 	bl	80038b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003b10:	f006 ff5c 	bl	800a9cc <HW_IPCC_BLE_AclDataAckNot>

  return;
 8003b14:	bf00      	nop
}
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	58000c00 	.word	0x58000c00

08003b1c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003b20:	2102      	movs	r1, #2
 8003b22:	4802      	ldr	r0, [pc, #8]	; (8003b2c <HW_IPCC_SYS_Init+0x10>)
 8003b24:	f7ff fed8 	bl	80038d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003b28:	bf00      	nop
}
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	58000c00 	.word	0x58000c00

08003b30 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003b34:	2102      	movs	r1, #2
 8003b36:	4804      	ldr	r0, [pc, #16]	; (8003b48 <HW_IPCC_SYS_SendCmd+0x18>)
 8003b38:	f7ff feee 	bl	8003918 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	4802      	ldr	r0, [pc, #8]	; (8003b48 <HW_IPCC_SYS_SendCmd+0x18>)
 8003b40:	f7ff fea5 	bl	800388e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8003b44:	bf00      	nop
}
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	58000c00 	.word	0x58000c00

08003b4c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003b50:	2102      	movs	r1, #2
 8003b52:	4803      	ldr	r0, [pc, #12]	; (8003b60 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003b54:	f7ff feae 	bl	80038b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003b58:	f006 ff88 	bl	800aa6c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003b5c:	bf00      	nop
}
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	58000c00 	.word	0x58000c00

08003b64 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003b68:	f006 ff96 	bl	800aa98 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	4802      	ldr	r0, [pc, #8]	; (8003b78 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003b70:	f7ff fec4 	bl	80038fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003b74:	bf00      	nop
}
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	58000c00 	.word	0x58000c00

08003b7c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003b84:	2108      	movs	r1, #8
 8003b86:	480c      	ldr	r0, [pc, #48]	; (8003bb8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003b88:	f7ff fed5 	bl	8003936 <LL_C1_IPCC_IsActiveFlag_CHx>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b98:	2108      	movs	r1, #8
 8003b9a:	4807      	ldr	r0, [pc, #28]	; (8003bb8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003b9c:	f7ff fe77 	bl	800388e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003ba0:	e006      	b.n	8003bb0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003ba6:	2108      	movs	r1, #8
 8003ba8:	4803      	ldr	r0, [pc, #12]	; (8003bb8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003baa:	f7ff feb5 	bl	8003918 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003bae:	bf00      	nop
}
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	58000c00 	.word	0x58000c00
 8003bbc:	20001728 	.word	0x20001728

08003bc0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003bc4:	2108      	movs	r1, #8
 8003bc6:	4806      	ldr	r0, [pc, #24]	; (8003be0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003bc8:	f7ff fe74 	bl	80038b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003bd2:	2108      	movs	r1, #8
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003bd6:	f7ff fe9f 	bl	8003918 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003bda:	bf00      	nop
}
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	58000c00 	.word	0x58000c00
 8003be4:	20001728 	.word	0x20001728

08003be8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003bec:	2108      	movs	r1, #8
 8003bee:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <HW_IPCC_TRACES_Init+0x10>)
 8003bf0:	f7ff fe72 	bl	80038d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003bf4:	bf00      	nop
}
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	58000c00 	.word	0x58000c00

08003bfc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003c00:	f006 fff2 	bl	800abe8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003c04:	2108      	movs	r1, #8
 8003c06:	4802      	ldr	r0, [pc, #8]	; (8003c10 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003c08:	f7ff fe78 	bl	80038fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003c0c:	bf00      	nop
}
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	58000c00 	.word	0x58000c00

08003c14 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003c14:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c16:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c18:	3304      	adds	r3, #4

08003c1a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c1a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c1c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003c1e:	d3f9      	bcc.n	8003c14 <CopyDataInit>
  bx lr
 8003c20:	4770      	bx	lr

08003c22 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003c22:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003c24:	3004      	adds	r0, #4

08003c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003c26:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003c28:	d3fb      	bcc.n	8003c22 <FillZerobss>
  bx lr
 8003c2a:	4770      	bx	lr

08003c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c2c:	480c      	ldr	r0, [pc, #48]	; (8003c60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c30:	f000 f82a 	bl	8003c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003c34:	480b      	ldr	r0, [pc, #44]	; (8003c64 <LoopForever+0x6>)
 8003c36:	490c      	ldr	r1, [pc, #48]	; (8003c68 <LoopForever+0xa>)
 8003c38:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <LoopForever+0xe>)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f7ff ffed 	bl	8003c1a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003c40:	480b      	ldr	r0, [pc, #44]	; (8003c70 <LoopForever+0x12>)
 8003c42:	490c      	ldr	r1, [pc, #48]	; (8003c74 <LoopForever+0x16>)
 8003c44:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <LoopForever+0x1a>)
 8003c46:	2300      	movs	r3, #0
 8003c48:	f7ff ffe7 	bl	8003c1a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003c4c:	480b      	ldr	r0, [pc, #44]	; (8003c7c <LoopForever+0x1e>)
 8003c4e:	490c      	ldr	r1, [pc, #48]	; (8003c80 <LoopForever+0x22>)
 8003c50:	2300      	movs	r3, #0
 8003c52:	f7ff ffe8 	bl	8003c26 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003c56:	f00b f86f 	bl	800ed38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003c5a:	f7fe fb6f 	bl	800233c <main>

08003c5e <LoopForever>:

LoopForever:
  b LoopForever
 8003c5e:	e7fe      	b.n	8003c5e <LoopForever>
  ldr   r0, =_estack
 8003c60:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8003c64:	20000008 	.word	0x20000008
 8003c68:	200000a4 	.word	0x200000a4
 8003c6c:	08010e54 	.word	0x08010e54
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003c70:	200301e4 	.word	0x200301e4
 8003c74:	200301e4 	.word	0x200301e4
 8003c78:	080117b9 	.word	0x080117b9
  INIT_BSS _sbss, _ebss
 8003c7c:	20000978 	.word	0x20000978
 8003c80:	20001868 	.word	0x20001868

08003c84 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c84:	e7fe      	b.n	8003c84 <ADC1_IRQHandler>
	...

08003c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <SystemInit+0x98>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <SystemInit+0x98>)
 8003c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003cb4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc0:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <SystemInit+0x9c>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd2:	f023 0305 	bic.w	r3, r3, #5
 8003cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf2:	4a0d      	ldr	r2, [pc, #52]	; (8003d28 <SystemInit+0xa0>)
 8003cf4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <SystemInit+0xa0>)
 8003cfc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	2200      	movs	r2, #0
 8003d14:	619a      	str	r2, [r3, #24]
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000ed00 	.word	0xe000ed00
 8003d24:	faf6fefb 	.word	0xfaf6fefb
 8003d28:	22041000 	.word	0x22041000

08003d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_Init+0x3c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <HAL_Init+0x3c>)
 8003d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d42:	2003      	movs	r0, #3
 8003d44:	f000 f9b4 	bl	80040b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d48:	200f      	movs	r0, #15
 8003d4a:	f000 f80f 	bl	8003d6c <HAL_InitTick>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	71fb      	strb	r3, [r7, #7]
 8003d58:	e001      	b.n	8003d5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d5a:	f7fe fd7b 	bl	8002854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	58004000 	.word	0x58004000

08003d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <HAL_InitTick+0x6c>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d024      	beq.n	8003dca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d80:	f002 ffd4 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <HAL_InitTick+0x6c>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d90:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f9ca 	bl	8004132 <HAL_SYSTICK_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10f      	bne.n	8003dc4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b0f      	cmp	r3, #15
 8003da8:	d809      	bhi.n	8003dbe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003daa:	2200      	movs	r2, #0
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	f04f 30ff 	mov.w	r0, #4294967295
 8003db2:	f000 f988 	bl	80040c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003db6:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_InitTick+0x70>)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	e007      	b.n	8003dce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
 8003dc2:	e004      	b.n	8003dce <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
 8003dc8:	e001      	b.n	8003dce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000028 	.word	0x20000028
 8003ddc:	20000024 	.word	0x20000024

08003de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_IncTick+0x20>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_IncTick+0x24>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <HAL_IncTick+0x24>)
 8003df2:	6013      	str	r3, [r2, #0]
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000028 	.word	0x20000028
 8003e04:	2000172c 	.word	0x2000172c

08003e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_GetTick+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000172c 	.word	0x2000172c

08003e20 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_GetTickPrio+0x14>)
 8003e26:	681b      	ldr	r3, [r3, #0]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000024 	.word	0x20000024

08003e38 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <HAL_GetTickFreq+0x14>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000028 	.word	0x20000028

08003e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <__NVIC_SetPriorityGrouping+0x44>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e82:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <__NVIC_SetPriorityGrouping+0x44>)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	60d3      	str	r3, [r2, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	f003 0307 	and.w	r3, r3, #7
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	db0b      	blt.n	8003ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	f003 021f 	and.w	r2, r3, #31
 8003ecc:	4907      	ldr	r1, [pc, #28]	; (8003eec <__NVIC_EnableIRQ+0x38>)
 8003ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	e000e100 	.word	0xe000e100

08003ef0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db12      	blt.n	8003f28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	490a      	ldr	r1, [pc, #40]	; (8003f34 <__NVIC_DisableIRQ+0x44>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2001      	movs	r0, #1
 8003f12:	fa00 f202 	lsl.w	r2, r0, r2
 8003f16:	3320      	adds	r3, #32
 8003f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f1c:	f3bf 8f4f 	dsb	sy
}
 8003f20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f22:	f3bf 8f6f 	isb	sy
}
 8003f26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000e100 	.word	0xe000e100

08003f38 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	db0c      	blt.n	8003f64 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	f003 021f 	and.w	r2, r3, #31
 8003f50:	4907      	ldr	r1, [pc, #28]	; (8003f70 <__NVIC_SetPendingIRQ+0x38>)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	2001      	movs	r0, #1
 8003f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f5e:	3340      	adds	r3, #64	; 0x40
 8003f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000e100 	.word	0xe000e100

08003f74 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	db0c      	blt.n	8003fa0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	f003 021f 	and.w	r2, r3, #31
 8003f8c:	4907      	ldr	r1, [pc, #28]	; (8003fac <__NVIC_ClearPendingIRQ+0x38>)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2001      	movs	r0, #1
 8003f96:	fa00 f202 	lsl.w	r2, r0, r2
 8003f9a:	3360      	adds	r3, #96	; 0x60
 8003f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000e100 	.word	0xe000e100

08003fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	db0a      	blt.n	8003fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	490c      	ldr	r1, [pc, #48]	; (8003ffc <__NVIC_SetPriority+0x4c>)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	0112      	lsls	r2, r2, #4
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fd8:	e00a      	b.n	8003ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4908      	ldr	r1, [pc, #32]	; (8004000 <__NVIC_SetPriority+0x50>)
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	0112      	lsls	r2, r2, #4
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	440b      	add	r3, r1
 8003fee:	761a      	strb	r2, [r3, #24]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000e100 	.word	0xe000e100
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f1c3 0307 	rsb	r3, r3, #7
 800401e:	2b04      	cmp	r3, #4
 8004020:	bf28      	it	cs
 8004022:	2304      	movcs	r3, #4
 8004024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3304      	adds	r3, #4
 800402a:	2b06      	cmp	r3, #6
 800402c:	d902      	bls.n	8004034 <NVIC_EncodePriority+0x30>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3b03      	subs	r3, #3
 8004032:	e000      	b.n	8004036 <NVIC_EncodePriority+0x32>
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004038:	f04f 32ff 	mov.w	r2, #4294967295
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	401a      	ands	r2, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800404c:	f04f 31ff 	mov.w	r1, #4294967295
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	43d9      	mvns	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	4313      	orrs	r3, r2
         );
}
 800405e:	4618      	mov	r0, r3
 8004060:	3724      	adds	r7, #36	; 0x24
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3b01      	subs	r3, #1
 8004078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800407c:	d301      	bcc.n	8004082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800407e:	2301      	movs	r3, #1
 8004080:	e00f      	b.n	80040a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004082:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <SysTick_Config+0x40>)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3b01      	subs	r3, #1
 8004088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800408a:	210f      	movs	r1, #15
 800408c:	f04f 30ff 	mov.w	r0, #4294967295
 8004090:	f7ff ff8e 	bl	8003fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <SysTick_Config+0x40>)
 8004096:	2200      	movs	r2, #0
 8004098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800409a:	4b04      	ldr	r3, [pc, #16]	; (80040ac <SysTick_Config+0x40>)
 800409c:	2207      	movs	r2, #7
 800409e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	e000e010 	.word	0xe000e010

080040b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff fec9 	bl	8003e50 <__NVIC_SetPriorityGrouping>
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b086      	sub	sp, #24
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	4603      	mov	r3, r0
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040d4:	f7ff fee0 	bl	8003e98 <__NVIC_GetPriorityGrouping>
 80040d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	6978      	ldr	r0, [r7, #20]
 80040e0:	f7ff ff90 	bl	8004004 <NVIC_EncodePriority>
 80040e4:	4602      	mov	r2, r0
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff5f 	bl	8003fb0 <__NVIC_SetPriority>
}
 80040f2:	bf00      	nop
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	4603      	mov	r3, r0
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fed3 	bl	8003eb4 <__NVIC_EnableIRQ>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	4603      	mov	r3, r0
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fee3 	bl	8003ef0 <__NVIC_DisableIRQ>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff ff96 	bl	800406c <SysTick_Config>
 8004140:	4603      	mov	r3, r0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	4603      	mov	r3, r0
 8004152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff feed 	bl	8003f38 <__NVIC_SetPendingIRQ>
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	4603      	mov	r3, r0
 800416e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fefd 	bl	8003f74 <__NVIC_ClearPendingIRQ>
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e08e      	b.n	80042b4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_DMA_Init+0x138>)
 800419e:	429a      	cmp	r2, r3
 80041a0:	d80f      	bhi.n	80041c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b45      	ldr	r3, [pc, #276]	; (80042c0 <HAL_DMA_Init+0x13c>)
 80041aa:	4413      	add	r3, r2
 80041ac:	4a45      	ldr	r2, [pc, #276]	; (80042c4 <HAL_DMA_Init+0x140>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	009a      	lsls	r2, r3, #2
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a42      	ldr	r2, [pc, #264]	; (80042c8 <HAL_DMA_Init+0x144>)
 80041be:	641a      	str	r2, [r3, #64]	; 0x40
 80041c0:	e00e      	b.n	80041e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b40      	ldr	r3, [pc, #256]	; (80042cc <HAL_DMA_Init+0x148>)
 80041ca:	4413      	add	r3, r2
 80041cc:	4a3d      	ldr	r2, [pc, #244]	; (80042c4 <HAL_DMA_Init+0x140>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	009a      	lsls	r2, r3, #2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <HAL_DMA_Init+0x14c>)
 80041de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800421c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f9b6 	bl	80045a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004240:	d102      	bne.n	8004248 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004254:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800425e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <HAL_DMA_Init+0x106>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d80c      	bhi.n	800428a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f9d5 	bl	8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004286:	605a      	str	r2, [r3, #4]
 8004288:	e008      	b.n	800429c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40020407 	.word	0x40020407
 80042c0:	bffdfff8 	.word	0xbffdfff8
 80042c4:	cccccccd 	.word	0xcccccccd
 80042c8:	40020000 	.word	0x40020000
 80042cc:	bffdfbf8 	.word	0xbffdfbf8
 80042d0:	40020400 	.word	0x40020400

080042d4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_DMA_Start_IT+0x20>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e066      	b.n	80043c2 <HAL_DMA_Start_IT+0xee>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d155      	bne.n	80043b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0201 	bic.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f8fb 	bl	8004528 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	2b00      	cmp	r3, #0
 8004338:	d008      	beq.n	800434c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 020e 	orr.w	r2, r2, #14
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e00f      	b.n	800436c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0204 	bic.w	r2, r2, #4
 800435a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 020a 	orr.w	r2, r2, #10
 800436a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004388:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e005      	b.n	80043c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
 80043be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f003 031c 	and.w	r3, r3, #28
 80043ea:	2204      	movs	r2, #4
 80043ec:	409a      	lsls	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d026      	beq.n	8004444 <HAL_DMA_IRQHandler+0x7a>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d021      	beq.n	8004444 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0204 	bic.w	r2, r2, #4
 800441c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f003 021c 	and.w	r2, r3, #28
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2104      	movs	r1, #4
 800442c:	fa01 f202 	lsl.w	r2, r1, r2
 8004430:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	2b00      	cmp	r3, #0
 8004438:	d071      	beq.n	800451e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004442:	e06c      	b.n	800451e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	f003 031c 	and.w	r3, r3, #28
 800444c:	2202      	movs	r2, #2
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d02e      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xec>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d029      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 020a 	bic.w	r2, r2, #10
 800447e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f003 021c 	and.w	r2, r3, #28
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2102      	movs	r1, #2
 8004496:	fa01 f202 	lsl.w	r2, r1, r2
 800449a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d038      	beq.n	800451e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044b4:	e033      	b.n	800451e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f003 031c 	and.w	r3, r3, #28
 80044be:	2208      	movs	r2, #8
 80044c0:	409a      	lsls	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d02a      	beq.n	8004520 <HAL_DMA_IRQHandler+0x156>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d025      	beq.n	8004520 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 020e 	bic.w	r2, r2, #14
 80044e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	f003 021c 	and.w	r2, r3, #28
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800451e:	bf00      	nop
 8004520:	bf00      	nop
}
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800453e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004550:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f003 021c 	and.w	r2, r3, #28
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2101      	movs	r1, #1
 8004560:	fa01 f202 	lsl.w	r2, r1, r2
 8004564:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b10      	cmp	r3, #16
 8004574:	d108      	bne.n	8004588 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004586:	e007      	b.n	8004598 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d80a      	bhi.n	80045ce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	089b      	lsrs	r3, r3, #2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045c4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6493      	str	r3, [r2, #72]	; 0x48
 80045cc:	e007      	b.n	80045de <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	009a      	lsls	r2, r3, #2
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80045d8:	4413      	add	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3b08      	subs	r3, #8
 80045e6:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a0a      	ldr	r2, [pc, #40]	; (800461c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80045f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2201      	movs	r2, #1
 80045fe:	409a      	lsls	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40020407 	.word	0x40020407
 8004614:	4002081c 	.word	0x4002081c
 8004618:	cccccccd 	.word	0xcccccccd
 800461c:	40020880 	.word	0x40020880

08004620 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004630:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a09      	ldr	r2, [pc, #36]	; (8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004644:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3b01      	subs	r3, #1
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2201      	movs	r2, #1
 8004650:	409a      	lsls	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	1000823f 	.word	0x1000823f
 8004668:	40020940 	.word	0x40020940

0800466c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800467a:	e14c      	b.n	8004916 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	2101      	movs	r1, #1
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 813e 	beq.w	8004910 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d005      	beq.n	80046ac <HAL_GPIO_Init+0x40>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d130      	bne.n	800470e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046e2:	2201      	movs	r2, #1
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f003 0201 	and.w	r2, r3, #1
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b03      	cmp	r3, #3
 8004718:	d017      	beq.n	800474a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	2203      	movs	r2, #3
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4013      	ands	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d123      	bne.n	800479e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	08da      	lsrs	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3208      	adds	r2, #8
 800475e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	220f      	movs	r2, #15
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	08da      	lsrs	r2, r3, #3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3208      	adds	r2, #8
 8004798:	6939      	ldr	r1, [r7, #16]
 800479a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	2203      	movs	r2, #3
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0203 	and.w	r2, r3, #3
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8098 	beq.w	8004910 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80047e0:	4a54      	ldr	r2, [pc, #336]	; (8004934 <HAL_GPIO_Init+0x2c8>)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	089b      	lsrs	r3, r3, #2
 80047e6:	3302      	adds	r3, #2
 80047e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	220f      	movs	r2, #15
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4013      	ands	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800480a:	d019      	beq.n	8004840 <HAL_GPIO_Init+0x1d4>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a4a      	ldr	r2, [pc, #296]	; (8004938 <HAL_GPIO_Init+0x2cc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <HAL_GPIO_Init+0x1d0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a49      	ldr	r2, [pc, #292]	; (800493c <HAL_GPIO_Init+0x2d0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00d      	beq.n	8004838 <HAL_GPIO_Init+0x1cc>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a48      	ldr	r2, [pc, #288]	; (8004940 <HAL_GPIO_Init+0x2d4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <HAL_GPIO_Init+0x1c8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a47      	ldr	r2, [pc, #284]	; (8004944 <HAL_GPIO_Init+0x2d8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <HAL_GPIO_Init+0x1c4>
 800482c:	2304      	movs	r3, #4
 800482e:	e008      	b.n	8004842 <HAL_GPIO_Init+0x1d6>
 8004830:	2307      	movs	r3, #7
 8004832:	e006      	b.n	8004842 <HAL_GPIO_Init+0x1d6>
 8004834:	2303      	movs	r3, #3
 8004836:	e004      	b.n	8004842 <HAL_GPIO_Init+0x1d6>
 8004838:	2302      	movs	r3, #2
 800483a:	e002      	b.n	8004842 <HAL_GPIO_Init+0x1d6>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_GPIO_Init+0x1d6>
 8004840:	2300      	movs	r3, #0
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	f002 0203 	and.w	r2, r2, #3
 8004848:	0092      	lsls	r2, r2, #2
 800484a:	4093      	lsls	r3, r2
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004852:	4938      	ldr	r1, [pc, #224]	; (8004934 <HAL_GPIO_Init+0x2c8>)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	3302      	adds	r3, #2
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <HAL_GPIO_Init+0x2dc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	43db      	mvns	r3, r3
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4013      	ands	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004884:	4a30      	ldr	r2, [pc, #192]	; (8004948 <HAL_GPIO_Init+0x2dc>)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800488a:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <HAL_GPIO_Init+0x2dc>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	43db      	mvns	r3, r3
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4013      	ands	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048ae:	4a26      	ldr	r2, [pc, #152]	; (8004948 <HAL_GPIO_Init+0x2dc>)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048b4:	4b24      	ldr	r3, [pc, #144]	; (8004948 <HAL_GPIO_Init+0x2dc>)
 80048b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	43db      	mvns	r3, r3
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4013      	ands	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048da:	4a1b      	ldr	r2, [pc, #108]	; (8004948 <HAL_GPIO_Init+0x2dc>)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80048e2:	4b19      	ldr	r3, [pc, #100]	; (8004948 <HAL_GPIO_Init+0x2dc>)
 80048e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4013      	ands	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004908:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <HAL_GPIO_Init+0x2dc>)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	3301      	adds	r3, #1
 8004914:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f aeab 	bne.w	800467c <HAL_GPIO_Init+0x10>
  }
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	40010000 	.word	0x40010000
 8004938:	48000400 	.word	0x48000400
 800493c:	48000800 	.word	0x48000800
 8004940:	48000c00 	.word	0x48000c00
 8004944:	48001000 	.word	0x48001000
 8004948:	58000800 	.word	0x58000800

0800494c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	887b      	ldrh	r3, [r7, #2]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e001      	b.n	800496e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800496e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <HAL_HSEM_IRQHandler+0x30>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <HAL_HSEM_IRQHandler+0x30>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	43db      	mvns	r3, r3
 8004990:	4906      	ldr	r1, [pc, #24]	; (80049ac <HAL_HSEM_IRQHandler+0x30>)
 8004992:	4013      	ands	r3, r2
 8004994:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004996:	4a05      	ldr	r2, [pc, #20]	; (80049ac <HAL_HSEM_IRQHandler+0x30>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f807 	bl	80049b0 <HAL_HSEM_FreeCallback>
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	58001500 	.word	0x58001500

080049b0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e081      	b.n	8004ada <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd ff42 	bl	8002874 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2224      	movs	r2, #36	; 0x24
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	e006      	b.n	8004a4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d104      	bne.n	8004a5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69d9      	ldr	r1, [r3, #28]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1a      	ldr	r2, [r3, #32]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	461a      	mov	r2, r3
 8004af0:	460b      	mov	r3, r1
 8004af2:	817b      	strh	r3, [r7, #10]
 8004af4:	4613      	mov	r3, r2
 8004af6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	f040 80da 	bne.w	8004cba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_I2C_Master_Transmit+0x30>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e0d3      	b.n	8004cbc <HAL_I2C_Master_Transmit+0x1d8>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b1c:	f7ff f974 	bl	8003e08 <HAL_GetTick>
 8004b20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	2319      	movs	r3, #25
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fcbc 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e0be      	b.n	8004cbc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2221      	movs	r2, #33	; 0x21
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	893a      	ldrh	r2, [r7, #8]
 8004b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2bff      	cmp	r3, #255	; 0xff
 8004b6e:	d90e      	bls.n	8004b8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	22ff      	movs	r2, #255	; 0xff
 8004b74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	8979      	ldrh	r1, [r7, #10]
 8004b7e:	4b51      	ldr	r3, [pc, #324]	; (8004cc4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fecc 	bl	8005924 <I2C_TransferConfig>
 8004b8c:	e06c      	b.n	8004c68 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	8979      	ldrh	r1, [r7, #10]
 8004ba0:	4b48      	ldr	r3, [pc, #288]	; (8004cc4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 febb 	bl	8005924 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004bae:	e05b      	b.n	8004c68 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	6a39      	ldr	r1, [r7, #32]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fcc8 	bl	800554a <I2C_WaitOnTXISFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e07b      	b.n	8004cbc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	781a      	ldrb	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d034      	beq.n	8004c68 <HAL_I2C_Master_Transmit+0x184>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d130      	bne.n	8004c68 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fc4b 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e04d      	b.n	8004cbc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2bff      	cmp	r3, #255	; 0xff
 8004c28:	d90e      	bls.n	8004c48 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	22ff      	movs	r2, #255	; 0xff
 8004c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	8979      	ldrh	r1, [r7, #10]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fe6f 	bl	8005924 <I2C_TransferConfig>
 8004c46:	e00f      	b.n	8004c68 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	8979      	ldrh	r1, [r7, #10]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fe5e 	bl	8005924 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d19e      	bne.n	8004bb0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	6a39      	ldr	r1, [r7, #32]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fcae 	bl	80055d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e01a      	b.n	8004cbc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_I2C_Master_Transmit+0x1e4>)
 8004c9a:	400b      	ands	r3, r1
 8004c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e000      	b.n	8004cbc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
  }
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	80002000 	.word	0x80002000
 8004cc8:	fe00e800 	.word	0xfe00e800

08004ccc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	460b      	mov	r3, r1
 8004cda:	817b      	strh	r3, [r7, #10]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	f040 80db 	bne.w	8004ea4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_I2C_Master_Receive+0x30>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e0d4      	b.n	8004ea6 <HAL_I2C_Master_Receive+0x1da>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d04:	f7ff f880 	bl	8003e08 <HAL_GetTick>
 8004d08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2319      	movs	r3, #25
 8004d10:	2201      	movs	r2, #1
 8004d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fbc8 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0bf      	b.n	8004ea6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2222      	movs	r2, #34	; 0x22
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2210      	movs	r2, #16
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	893a      	ldrh	r2, [r7, #8]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2bff      	cmp	r3, #255	; 0xff
 8004d56:	d90e      	bls.n	8004d76 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	22ff      	movs	r2, #255	; 0xff
 8004d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	8979      	ldrh	r1, [r7, #10]
 8004d66:	4b52      	ldr	r3, [pc, #328]	; (8004eb0 <HAL_I2C_Master_Receive+0x1e4>)
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fdd8 	bl	8005924 <I2C_TransferConfig>
 8004d74:	e06d      	b.n	8004e52 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	8979      	ldrh	r1, [r7, #10]
 8004d88:	4b49      	ldr	r3, [pc, #292]	; (8004eb0 <HAL_I2C_Master_Receive+0x1e4>)
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fdc7 	bl	8005924 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004d96:	e05c      	b.n	8004e52 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	6a39      	ldr	r1, [r7, #32]
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fc5f 	bl	8005660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e07c      	b.n	8004ea6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d034      	beq.n	8004e52 <HAL_I2C_Master_Receive+0x186>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d130      	bne.n	8004e52 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fb56 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e04d      	b.n	8004ea6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2bff      	cmp	r3, #255	; 0xff
 8004e12:	d90e      	bls.n	8004e32 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	22ff      	movs	r2, #255	; 0xff
 8004e18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	8979      	ldrh	r1, [r7, #10]
 8004e22:	2300      	movs	r3, #0
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fd7a 	bl	8005924 <I2C_TransferConfig>
 8004e30:	e00f      	b.n	8004e52 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	8979      	ldrh	r1, [r7, #10]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 fd69 	bl	8005924 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d19d      	bne.n	8004d98 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	6a39      	ldr	r1, [r7, #32]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fbb9 	bl	80055d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e01a      	b.n	8004ea6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2220      	movs	r2, #32
 8004e76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <HAL_I2C_Master_Receive+0x1e8>)
 8004e84:	400b      	ands	r3, r1
 8004e86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e000      	b.n	8004ea6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
  }
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	80002400 	.word	0x80002400
 8004eb4:	fe00e800 	.word	0xfe00e800

08004eb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	817b      	strh	r3, [r7, #10]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	813b      	strh	r3, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	f040 80f9 	bne.w	80050d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_I2C_Mem_Write+0x34>
 8004ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0ed      	b.n	80050d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_I2C_Mem_Write+0x4e>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0e6      	b.n	80050d4 <HAL_I2C_Mem_Write+0x21c>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f0e:	f7fe ff7b 	bl	8003e08 <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2319      	movs	r3, #25
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fac3 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0d1      	b.n	80050d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2221      	movs	r2, #33	; 0x21
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2240      	movs	r2, #64	; 0x40
 8004f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f58:	88f8      	ldrh	r0, [r7, #6]
 8004f5a:	893a      	ldrh	r2, [r7, #8]
 8004f5c:	8979      	ldrh	r1, [r7, #10]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	4603      	mov	r3, r0
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f9d3 	bl	8005314 <I2C_RequestMemoryWrite>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0a9      	b.n	80050d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2bff      	cmp	r3, #255	; 0xff
 8004f88:	d90e      	bls.n	8004fa8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	22ff      	movs	r2, #255	; 0xff
 8004f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	8979      	ldrh	r1, [r7, #10]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fcbf 	bl	8005924 <I2C_TransferConfig>
 8004fa6:	e00f      	b.n	8004fc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	8979      	ldrh	r1, [r7, #10]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fcae 	bl	8005924 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fabc 	bl	800554a <I2C_WaitOnTXISFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e07b      	b.n	80050d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d034      	beq.n	8005080 <HAL_I2C_Mem_Write+0x1c8>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d130      	bne.n	8005080 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	2200      	movs	r2, #0
 8005026:	2180      	movs	r1, #128	; 0x80
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fa3f 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e04d      	b.n	80050d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	2bff      	cmp	r3, #255	; 0xff
 8005040:	d90e      	bls.n	8005060 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	b2da      	uxtb	r2, r3
 800504e:	8979      	ldrh	r1, [r7, #10]
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fc63 	bl	8005924 <I2C_TransferConfig>
 800505e:	e00f      	b.n	8005080 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	b2da      	uxtb	r2, r3
 8005070:	8979      	ldrh	r1, [r7, #10]
 8005072:	2300      	movs	r3, #0
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fc52 	bl	8005924 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d19e      	bne.n	8004fc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 faa2 	bl	80055d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e01a      	b.n	80050d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2220      	movs	r2, #32
 80050a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6859      	ldr	r1, [r3, #4]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <HAL_I2C_Mem_Write+0x224>)
 80050b2:	400b      	ands	r3, r1
 80050b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
  }
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	fe00e800 	.word	0xfe00e800

080050e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	461a      	mov	r2, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	817b      	strh	r3, [r7, #10]
 80050f2:	460b      	mov	r3, r1
 80050f4:	813b      	strh	r3, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b20      	cmp	r3, #32
 8005104:	f040 80fd 	bne.w	8005302 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_I2C_Mem_Read+0x34>
 800510e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800511a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0f1      	b.n	8005304 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_I2C_Mem_Read+0x4e>
 800512a:	2302      	movs	r3, #2
 800512c:	e0ea      	b.n	8005304 <HAL_I2C_Mem_Read+0x224>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005136:	f7fe fe67 	bl	8003e08 <HAL_GetTick>
 800513a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2319      	movs	r3, #25
 8005142:	2201      	movs	r2, #1
 8005144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f9af 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0d5      	b.n	8005304 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2222      	movs	r2, #34	; 0x22
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2240      	movs	r2, #64	; 0x40
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a3a      	ldr	r2, [r7, #32]
 8005172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005180:	88f8      	ldrh	r0, [r7, #6]
 8005182:	893a      	ldrh	r2, [r7, #8]
 8005184:	8979      	ldrh	r1, [r7, #10]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4603      	mov	r3, r0
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f913 	bl	80053bc <I2C_RequestMemoryRead>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0ad      	b.n	8005304 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2bff      	cmp	r3, #255	; 0xff
 80051b0:	d90e      	bls.n	80051d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	22ff      	movs	r2, #255	; 0xff
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	8979      	ldrh	r1, [r7, #10]
 80051c0:	4b52      	ldr	r3, [pc, #328]	; (800530c <HAL_I2C_Mem_Read+0x22c>)
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fbab 	bl	8005924 <I2C_TransferConfig>
 80051ce:	e00f      	b.n	80051f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	8979      	ldrh	r1, [r7, #10]
 80051e2:	4b4a      	ldr	r3, [pc, #296]	; (800530c <HAL_I2C_Mem_Read+0x22c>)
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fb9a 	bl	8005924 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2200      	movs	r2, #0
 80051f8:	2104      	movs	r1, #4
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f956 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e07c      	b.n	8005304 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d034      	beq.n	80052b0 <HAL_I2C_Mem_Read+0x1d0>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	d130      	bne.n	80052b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	2200      	movs	r2, #0
 8005256:	2180      	movs	r1, #128	; 0x80
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f927 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e04d      	b.n	8005304 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2bff      	cmp	r3, #255	; 0xff
 8005270:	d90e      	bls.n	8005290 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	22ff      	movs	r2, #255	; 0xff
 8005276:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527c:	b2da      	uxtb	r2, r3
 800527e:	8979      	ldrh	r1, [r7, #10]
 8005280:	2300      	movs	r3, #0
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fb4b 	bl	8005924 <I2C_TransferConfig>
 800528e:	e00f      	b.n	80052b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	8979      	ldrh	r1, [r7, #10]
 80052a2:	2300      	movs	r3, #0
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fb3a 	bl	8005924 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d19a      	bne.n	80051f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f98a 	bl	80055d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e01a      	b.n	8005304 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2220      	movs	r2, #32
 80052d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6859      	ldr	r1, [r3, #4]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_I2C_Mem_Read+0x230>)
 80052e2:	400b      	ands	r3, r1
 80052e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e000      	b.n	8005304 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005302:	2302      	movs	r3, #2
  }
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	80002400 	.word	0x80002400
 8005310:	fe00e800 	.word	0xfe00e800

08005314 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	4608      	mov	r0, r1
 800531e:	4611      	mov	r1, r2
 8005320:	461a      	mov	r2, r3
 8005322:	4603      	mov	r3, r0
 8005324:	817b      	strh	r3, [r7, #10]
 8005326:	460b      	mov	r3, r1
 8005328:	813b      	strh	r3, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	8979      	ldrh	r1, [r7, #10]
 8005334:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <I2C_RequestMemoryWrite+0xa4>)
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 faf1 	bl	8005924 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	69b9      	ldr	r1, [r7, #24]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f8ff 	bl	800554a <I2C_WaitOnTXISFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e02c      	b.n	80053b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d105      	bne.n	8005368 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800535c:	893b      	ldrh	r3, [r7, #8]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	629a      	str	r2, [r3, #40]	; 0x28
 8005366:	e015      	b.n	8005394 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005368:	893b      	ldrh	r3, [r7, #8]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	b29b      	uxth	r3, r3
 800536e:	b2da      	uxtb	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	69b9      	ldr	r1, [r7, #24]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f8e5 	bl	800554a <I2C_WaitOnTXISFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e012      	b.n	80053b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800538a:	893b      	ldrh	r3, [r7, #8]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2200      	movs	r2, #0
 800539c:	2180      	movs	r1, #128	; 0x80
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f884 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	80002000 	.word	0x80002000

080053bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	4608      	mov	r0, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	461a      	mov	r2, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	817b      	strh	r3, [r7, #10]
 80053ce:	460b      	mov	r3, r1
 80053d0:	813b      	strh	r3, [r7, #8]
 80053d2:	4613      	mov	r3, r2
 80053d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	8979      	ldrh	r1, [r7, #10]
 80053dc:	4b20      	ldr	r3, [pc, #128]	; (8005460 <I2C_RequestMemoryRead+0xa4>)
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2300      	movs	r3, #0
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fa9e 	bl	8005924 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	69b9      	ldr	r1, [r7, #24]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f8ac 	bl	800554a <I2C_WaitOnTXISFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e02c      	b.n	8005456 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d105      	bne.n	800540e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005402:	893b      	ldrh	r3, [r7, #8]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
 800540c:	e015      	b.n	800543a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800540e:	893b      	ldrh	r3, [r7, #8]
 8005410:	0a1b      	lsrs	r3, r3, #8
 8005412:	b29b      	uxth	r3, r3
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	69b9      	ldr	r1, [r7, #24]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f892 	bl	800554a <I2C_WaitOnTXISFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e012      	b.n	8005456 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005430:	893b      	ldrh	r3, [r7, #8]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2200      	movs	r2, #0
 8005442:	2140      	movs	r1, #64	; 0x40
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f831 	bl	80054ac <I2C_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	80002000 	.word	0x80002000

08005464 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b02      	cmp	r3, #2
 8005478:	d103      	bne.n	8005482 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b01      	cmp	r3, #1
 800548e:	d007      	beq.n	80054a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	619a      	str	r2, [r3, #24]
  }
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054bc:	e031      	b.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d02d      	beq.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7fe fc9f 	bl	8003e08 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d122      	bne.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d113      	bne.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e00f      	b.n	8005542 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4013      	ands	r3, r2
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	bf0c      	ite	eq
 8005532:	2301      	moveq	r3, #1
 8005534:	2300      	movne	r3, #0
 8005536:	b2db      	uxtb	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	429a      	cmp	r2, r3
 800553e:	d0be      	beq.n	80054be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005556:	e033      	b.n	80055c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f901 	bl	8005764 <I2C_IsErrorOccurred>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e031      	b.n	80055d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d025      	beq.n	80055c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005574:	f7fe fc48 	bl	8003e08 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	d302      	bcc.n	800558a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d11a      	bne.n	80055c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d013      	beq.n	80055c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559c:	f043 0220 	orr.w	r2, r3, #32
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e007      	b.n	80055d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d1c4      	bne.n	8005558 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055e4:	e02f      	b.n	8005646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f8ba 	bl	8005764 <I2C_IsErrorOccurred>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e02d      	b.n	8005656 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fa:	f7fe fc05 	bl	8003e08 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d11a      	bne.n	8005646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b20      	cmp	r3, #32
 800561c:	d013      	beq.n	8005646 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	f043 0220 	orr.w	r2, r3, #32
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e007      	b.n	8005656 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b20      	cmp	r3, #32
 8005652:	d1c8      	bne.n	80055e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800566c:	e06b      	b.n	8005746 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f876 	bl	8005764 <I2C_IsErrorOccurred>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e069      	b.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b20      	cmp	r3, #32
 800568e:	d138      	bne.n	8005702 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d105      	bne.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e055      	b.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d107      	bne.n	80056c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2210      	movs	r2, #16
 80056be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2204      	movs	r2, #4
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
 80056c6:	e002      	b.n	80056ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2220      	movs	r2, #32
 80056d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80056e2:	400b      	ands	r3, r1
 80056e4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e029      	b.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fe fb81 	bl	8003e08 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d116      	bne.n	8005746 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b04      	cmp	r3, #4
 8005724:	d00f      	beq.n	8005746 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e007      	b.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b04      	cmp	r3, #4
 8005752:	d18c      	bne.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	fe00e800 	.word	0xfe00e800

08005764 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	d068      	beq.n	8005862 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2210      	movs	r2, #16
 8005796:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005798:	e049      	b.n	800582e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d045      	beq.n	800582e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057a2:	f7fe fb31 	bl	8003e08 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <I2C_IsErrorOccurred+0x54>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d13a      	bne.n	800582e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057da:	d121      	bne.n	8005820 <I2C_IsErrorOccurred+0xbc>
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057e2:	d01d      	beq.n	8005820 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d01a      	beq.n	8005820 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80057fa:	f7fe fb05 	bl	8003e08 <HAL_GetTick>
 80057fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005800:	e00e      	b.n	8005820 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005802:	f7fe fb01 	bl	8003e08 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b19      	cmp	r3, #25
 800580e:	d907      	bls.n	8005820 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f043 0320 	orr.w	r3, r3, #32
 8005816:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800581e:	e006      	b.n	800582e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	d1e9      	bne.n	8005802 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b20      	cmp	r3, #32
 800583a:	d003      	beq.n	8005844 <I2C_IsErrorOccurred+0xe0>
 800583c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0aa      	beq.n	800579a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2220      	movs	r2, #32
 8005852:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005884:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	f043 0308 	orr.w	r3, r3, #8
 800589c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	f043 0302 	orr.w	r3, r3, #2
 80058be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80058d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01c      	beq.n	8005912 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fdc3 	bl	8005464 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6859      	ldr	r1, [r3, #4]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <I2C_IsErrorOccurred+0x1bc>)
 80058ea:	400b      	ands	r3, r1
 80058ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005916:	4618      	mov	r0, r3
 8005918:	3728      	adds	r7, #40	; 0x28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	fe00e800 	.word	0xfe00e800

08005924 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	607b      	str	r3, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	817b      	strh	r3, [r7, #10]
 8005932:	4613      	mov	r3, r2
 8005934:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005936:	897b      	ldrh	r3, [r7, #10]
 8005938:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800593c:	7a7b      	ldrb	r3, [r7, #9]
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005944:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	4313      	orrs	r3, r2
 800594e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005952:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	0d5b      	lsrs	r3, r3, #21
 800595e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005962:	4b08      	ldr	r3, [pc, #32]	; (8005984 <I2C_TransferConfig+0x60>)
 8005964:	430b      	orrs	r3, r1
 8005966:	43db      	mvns	r3, r3
 8005968:	ea02 0103 	and.w	r1, r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	03ff63ff 	.word	0x03ff63ff

08005988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b20      	cmp	r3, #32
 800599c:	d138      	bne.n	8005a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e032      	b.n	8005a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2224      	movs	r2, #36	; 0x24
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e000      	b.n	8005a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a10:	2302      	movs	r3, #2
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d139      	bne.n	8005aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e033      	b.n	8005aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2224      	movs	r2, #36	; 0x24
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e000      	b.n	8005aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
  }
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01e      	beq.n	8005b08 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <HAL_IPCC_Init+0x60>)
 8005acc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fc ff12 	bl	8002904 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005ae0:	68b8      	ldr	r0, [r7, #8]
 8005ae2:	f000 f85b 	bl	8005b9c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f82c 	bl	8005b50 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005b06:	e001      	b.n	8005b0c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	58000c00 	.word	0x58000c00

08005b1c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	4613      	mov	r3, r2
 8005b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e00f      	b.n	8005b7e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	4a0b      	ldr	r2, [pc, #44]	; (8005b94 <IPCC_SetDefaultCallbacks+0x44>)
 8005b68:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3306      	adds	r3, #6
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <IPCC_SetDefaultCallbacks+0x48>)
 8005b76:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b05      	cmp	r3, #5
 8005b82:	d9ec      	bls.n	8005b5e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	08005b1d 	.word	0x08005b1d
 8005b98:	08005b37 	.word	0x08005b37

08005b9c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005bb0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	223f      	movs	r2, #63	; 0x3f
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	58000400 	.word	0x58000400

08005be4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005be8:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	58000400 	.word	0x58000400

08005c00 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c12:	d101      	bne.n	8005c18 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <LL_RCC_HSE_Enable>:
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c36:	6013      	str	r3, [r2, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_RCC_HSE_Disable>:
{
 8005c42:	b480      	push	{r7}
 8005c44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c54:	6013      	str	r3, [r2, #0]
}
 8005c56:	bf00      	nop
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <LL_RCC_HSE_IsReady>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c72:	d101      	bne.n	8005c78 <LL_RCC_HSE_IsReady+0x18>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <LL_RCC_HSE_IsReady+0x1a>
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <LL_RCC_HSI_Enable>:
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c96:	6013      	str	r3, [r2, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <LL_RCC_HSI_Disable>:
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb4:	6013      	str	r3, [r2, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <LL_RCC_HSI_IsReady>:
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd2:	d101      	bne.n	8005cd8 <LL_RCC_HSI_IsReady+0x18>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <LL_RCC_HSI_IsReady+0x1a>
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	061b      	lsls	r3, r3, #24
 8005cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	604b      	str	r3, [r1, #4]
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <LL_RCC_HSI48_Enable>:
{
 8005d0e:	b480      	push	{r7}
 8005d10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005d26:	bf00      	nop
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <LL_RCC_HSI48_Disable>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005d48:	bf00      	nop
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <LL_RCC_HSI48_IsReady>:
{
 8005d52:	b480      	push	{r7}
 8005d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d101      	bne.n	8005d6a <LL_RCC_HSI48_IsReady+0x18>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <LL_RCC_HSI48_IsReady+0x1a>
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <LL_RCC_LSE_Enable>:
{
 8005d76:	b480      	push	{r7}
 8005d78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d8e:	bf00      	nop
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <LL_RCC_LSE_Disable>:
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005db0:	bf00      	nop
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <LL_RCC_LSE_EnableBypass>:
{
 8005dba:	b480      	push	{r7}
 8005dbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dca:	f043 0304 	orr.w	r3, r3, #4
 8005dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dd2:	bf00      	nop
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <LL_RCC_LSE_DisableBypass>:
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dec:	f023 0304 	bic.w	r3, r3, #4
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <LL_RCC_LSE_IsReady>:
{
 8005dfe:	b480      	push	{r7}
 8005e00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d101      	bne.n	8005e16 <LL_RCC_LSE_IsReady+0x18>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <LL_RCC_LSE_IsReady+0x1a>
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <LL_RCC_LSI1_Enable>:
{
 8005e22:	b480      	push	{r7}
 8005e24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e3a:	bf00      	nop
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <LL_RCC_LSI1_Disable>:
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e5c:	bf00      	nop
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <LL_RCC_LSI1_IsReady>:
{
 8005e66:	b480      	push	{r7}
 8005e68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d101      	bne.n	8005e7e <LL_RCC_LSI1_IsReady+0x18>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <LL_RCC_LSI1_IsReady+0x1a>
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <LL_RCC_LSI2_Enable>:
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e9a:	f043 0304 	orr.w	r3, r3, #4
 8005e9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ea2:	bf00      	nop
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <LL_RCC_LSI2_Disable>:
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ebc:	f023 0304 	bic.w	r3, r3, #4
 8005ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ec4:	bf00      	nop
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <LL_RCC_LSI2_IsReady>:
{
 8005ece:	b480      	push	{r7}
 8005ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d101      	bne.n	8005ee6 <LL_RCC_LSI2_IsReady+0x18>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <LL_RCC_LSI2_IsReady+0x1a>
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <LL_RCC_LSI2_SetTrimming>:
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <LL_RCC_MSI_Enable>:
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	6013      	str	r3, [r2, #0]
}
 8005f34:	bf00      	nop
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <LL_RCC_MSI_Disable>:
{
 8005f3e:	b480      	push	{r7}
 8005f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	6013      	str	r3, [r2, #0]
}
 8005f52:	bf00      	nop
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <LL_RCC_MSI_IsReady>:
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d101      	bne.n	8005f72 <LL_RCC_MSI_IsReady+0x16>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <LL_RCC_MSI_IsReady+0x18>
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <LL_RCC_MSI_SetRange>:
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <LL_RCC_MSI_GetRange>:
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2bb0      	cmp	r3, #176	; 0xb0
 8005fbc:	d901      	bls.n	8005fc2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005fbe:	23b0      	movs	r3, #176	; 0xb0
 8005fc0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005fc2:	687b      	ldr	r3, [r7, #4]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fea:	4313      	orrs	r3, r2
 8005fec:	604b      	str	r3, [r1, #4]
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <LL_RCC_SetSysClkSource>:
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f023 0203 	bic.w	r2, r3, #3
 800600c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4313      	orrs	r3, r2
 8006014:	608b      	str	r3, [r1, #8]
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <LL_RCC_GetSysClkSource>:
{
 8006022:	b480      	push	{r7}
 8006024:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 030c 	and.w	r3, r3, #12
}
 8006030:	4618      	mov	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <LL_RCC_SetAHBPrescaler>:
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800604c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4313      	orrs	r3, r2
 8006054:	608b      	str	r3, [r1, #8]
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800606a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <LL_RCC_SetAHB4Prescaler>:
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800609e:	f023 020f 	bic.w	r2, r3, #15
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <LL_RCC_SetAPB1Prescaler>:
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80060c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_RCC_SetAPB2Prescaler>:
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80060ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	608b      	str	r3, [r1, #8]
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <LL_RCC_GetAHBPrescaler>:
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800611a:	4618      	mov	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_RCC_GetAHB4Prescaler>:
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006136:	4618      	mov	r0, r3
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <LL_RCC_GetAPB1Prescaler>:
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800614e:	4618      	mov	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_RCC_GetAPB2Prescaler>:
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800615c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006166:	4618      	mov	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <LL_RCC_PLL_Enable>:
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800617e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006182:	6013      	str	r3, [r2, #0]
}
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <LL_RCC_PLL_Disable>:
{
 800618e:	b480      	push	{r7}
 8006190:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800619c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061a0:	6013      	str	r3, [r2, #0]
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_RCC_PLL_IsReady>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061be:	d101      	bne.n	80061c4 <LL_RCC_PLL_IsReady+0x18>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <LL_RCC_PLL_IsReady+0x1a>
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <LL_RCC_PLL_GetN>:
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80061d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_RCC_PLL_GetR>:
{
 80061ea:	b480      	push	{r7}
 80061ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80061ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <LL_RCC_PLL_GetDivider>:
{
 8006202:	b480      	push	{r7}
 8006204:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006210:	4618      	mov	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <LL_RCC_PLL_GetMainSource>:
{
 800621a:	b480      	push	{r7}
 800621c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800621e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0303 	and.w	r3, r3, #3
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <LL_RCC_IsActiveFlag_HPRE>:
{
 8006232:	b480      	push	{r7}
 8006234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006244:	d101      	bne.n	800624a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8006256:	b480      	push	{r7}
 8006258:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800625a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800626a:	d101      	bne.n	8006270 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006284:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800628c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006290:	d101      	bne.n	8006296 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80062a2:	b480      	push	{r7}
 80062a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80062a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062b4:	d101      	bne.n	80062ba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80062c6:	b480      	push	{r7}
 80062c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80062ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062d8:	d101      	bne.n	80062de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b08d      	sub	sp, #52	; 0x34
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e363      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 808d 	beq.w	8006426 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800630c:	f7ff fe89 	bl	8006022 <LL_RCC_GetSysClkSource>
 8006310:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006312:	f7ff ff82 	bl	800621a <LL_RCC_PLL_GetMainSource>
 8006316:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <HAL_RCC_OscConfig+0x3e>
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	2b0c      	cmp	r3, #12
 8006322:	d147      	bne.n	80063b4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	2b01      	cmp	r3, #1
 8006328:	d144      	bne.n	80063b4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e347      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800633a:	f7ff fe34 	bl	8005fa6 <LL_RCC_MSI_GetRange>
 800633e:	4603      	mov	r3, r0
 8006340:	429c      	cmp	r4, r3
 8006342:	d914      	bls.n	800636e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fd2f 	bl	8006dac <RCC_SetFlashLatencyFromMSIRange>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e336      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fe0e 	bl	8005f7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fe32 	bl	8005fd0 <LL_RCC_MSI_SetCalibTrimming>
 800636c:	e013      	b.n	8006396 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff fe03 	bl	8005f7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fe27 	bl	8005fd0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fd10 	bl	8006dac <RCC_SetFlashLatencyFromMSIRange>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e317      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006396:	f000 fcc9 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 800639a:	4603      	mov	r3, r0
 800639c:	4aa4      	ldr	r2, [pc, #656]	; (8006630 <HAL_RCC_OscConfig+0x344>)
 800639e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063a0:	4ba4      	ldr	r3, [pc, #656]	; (8006634 <HAL_RCC_OscConfig+0x348>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fd fce1 	bl	8003d6c <HAL_InitTick>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d039      	beq.n	8006424 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e308      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01e      	beq.n	80063fa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063bc:	f7ff fdb0 	bl	8005f20 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063c0:	f7fd fd22 	bl	8003e08 <HAL_GetTick>
 80063c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063c8:	f7fd fd1e 	bl	8003e08 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e2f5      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80063da:	f7ff fdbf 	bl	8005f5c <LL_RCC_MSI_IsReady>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0f1      	beq.n	80063c8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fdc8 	bl	8005f7e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fdec 	bl	8005fd0 <LL_RCC_MSI_SetCalibTrimming>
 80063f8:	e015      	b.n	8006426 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063fa:	f7ff fda0 	bl	8005f3e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063fe:	f7fd fd03 	bl	8003e08 <HAL_GetTick>
 8006402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006404:	e008      	b.n	8006418 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006406:	f7fd fcff 	bl	8003e08 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e2d6      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006418:	f7ff fda0 	bl	8005f5c <LL_RCC_MSI_IsReady>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f1      	bne.n	8006406 <HAL_RCC_OscConfig+0x11a>
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006424:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d047      	beq.n	80064c2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006432:	f7ff fdf6 	bl	8006022 <LL_RCC_GetSysClkSource>
 8006436:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006438:	f7ff feef 	bl	800621a <LL_RCC_PLL_GetMainSource>
 800643c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d005      	beq.n	8006450 <HAL_RCC_OscConfig+0x164>
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	2b0c      	cmp	r3, #12
 8006448:	d108      	bne.n	800645c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	2b03      	cmp	r3, #3
 800644e:	d105      	bne.n	800645c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d134      	bne.n	80064c2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e2b4      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006464:	d102      	bne.n	800646c <HAL_RCC_OscConfig+0x180>
 8006466:	f7ff fbdd 	bl	8005c24 <LL_RCC_HSE_Enable>
 800646a:	e001      	b.n	8006470 <HAL_RCC_OscConfig+0x184>
 800646c:	f7ff fbe9 	bl	8005c42 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d012      	beq.n	800649e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7fd fcc6 	bl	8003e08 <HAL_GetTick>
 800647c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006480:	f7fd fcc2 	bl	8003e08 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b64      	cmp	r3, #100	; 0x64
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e299      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006492:	f7ff fbe5 	bl	8005c60 <LL_RCC_HSE_IsReady>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0f1      	beq.n	8006480 <HAL_RCC_OscConfig+0x194>
 800649c:	e011      	b.n	80064c2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649e:	f7fd fcb3 	bl	8003e08 <HAL_GetTick>
 80064a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064a6:	f7fd fcaf 	bl	8003e08 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b64      	cmp	r3, #100	; 0x64
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e286      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80064b8:	f7ff fbd2 	bl	8005c60 <LL_RCC_HSE_IsReady>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f1      	bne.n	80064a6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d04c      	beq.n	8006568 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ce:	f7ff fda8 	bl	8006022 <LL_RCC_GetSysClkSource>
 80064d2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064d4:	f7ff fea1 	bl	800621a <LL_RCC_PLL_GetMainSource>
 80064d8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d005      	beq.n	80064ec <HAL_RCC_OscConfig+0x200>
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b0c      	cmp	r3, #12
 80064e4:	d10e      	bne.n	8006504 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d10b      	bne.n	8006504 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e266      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff fbf1 	bl	8005ce4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006502:	e031      	b.n	8006568 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d019      	beq.n	8006540 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800650c:	f7ff fbba 	bl	8005c84 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fd fc7a 	bl	8003e08 <HAL_GetTick>
 8006514:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006518:	f7fd fc76 	bl	8003e08 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e24d      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800652a:	f7ff fbc9 	bl	8005cc0 <LL_RCC_HSI_IsReady>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0f1      	beq.n	8006518 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fbd3 	bl	8005ce4 <LL_RCC_HSI_SetCalibTrimming>
 800653e:	e013      	b.n	8006568 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006540:	f7ff fbaf 	bl	8005ca2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fd fc60 	bl	8003e08 <HAL_GetTick>
 8006548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800654c:	f7fd fc5c 	bl	8003e08 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e233      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800655e:	f7ff fbaf 	bl	8005cc0 <LL_RCC_HSI_IsReady>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f1      	bne.n	800654c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 80a3 	beq.w	80066c8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d076      	beq.n	8006678 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	d046      	beq.n	8006624 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006596:	f7ff fc66 	bl	8005e66 <LL_RCC_LSI1_IsReady>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d113      	bne.n	80065c8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80065a0:	f7ff fc3f 	bl	8005e22 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065a4:	f7fd fc30 	bl	8003e08 <HAL_GetTick>
 80065a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065ac:	f7fd fc2c 	bl	8003e08 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e203      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80065be:	f7ff fc52 	bl	8005e66 <LL_RCC_LSI1_IsReady>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f1      	beq.n	80065ac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80065c8:	f7ff fc5f 	bl	8005e8a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065cc:	f7fd fc1c 	bl	8003e08 <HAL_GetTick>
 80065d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065d4:	f7fd fc18 	bl	8003e08 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e1ef      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80065e6:	f7ff fc72 	bl	8005ece <LL_RCC_LSI2_IsReady>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f1      	beq.n	80065d4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fc7c 	bl	8005ef2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80065fa:	f7ff fc23 	bl	8005e44 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fe:	f7fd fc03 	bl	8003e08 <HAL_GetTick>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006606:	f7fd fbff 	bl	8003e08 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e1d6      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006618:	f7ff fc25 	bl	8005e66 <LL_RCC_LSI1_IsReady>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f1      	bne.n	8006606 <HAL_RCC_OscConfig+0x31a>
 8006622:	e051      	b.n	80066c8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006624:	f7ff fbfd 	bl	8005e22 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fd fbee 	bl	8003e08 <HAL_GetTick>
 800662c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800662e:	e00c      	b.n	800664a <HAL_RCC_OscConfig+0x35e>
 8006630:	20000020 	.word	0x20000020
 8006634:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006638:	f7fd fbe6 	bl	8003e08 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e1bd      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800664a:	f7ff fc0c 	bl	8005e66 <LL_RCC_LSI1_IsReady>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0f1      	beq.n	8006638 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006654:	f7ff fc2a 	bl	8005eac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800665a:	f7fd fbd5 	bl	8003e08 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b03      	cmp	r3, #3
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e1ac      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800666c:	f7ff fc2f 	bl	8005ece <LL_RCC_LSI2_IsReady>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f1      	bne.n	800665a <HAL_RCC_OscConfig+0x36e>
 8006676:	e027      	b.n	80066c8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006678:	f7ff fc18 	bl	8005eac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667c:	f7fd fbc4 	bl	8003e08 <HAL_GetTick>
 8006680:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006684:	f7fd fbc0 	bl	8003e08 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b03      	cmp	r3, #3
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e197      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006696:	f7ff fc1a 	bl	8005ece <LL_RCC_LSI2_IsReady>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f1      	bne.n	8006684 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80066a0:	f7ff fbd0 	bl	8005e44 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a4:	f7fd fbb0 	bl	8003e08 <HAL_GetTick>
 80066a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80066ac:	f7fd fbac 	bl	8003e08 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e183      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80066be:	f7ff fbd2 	bl	8005e66 <LL_RCC_LSI1_IsReady>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f1      	bne.n	80066ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d05b      	beq.n	800678c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066d4:	4ba7      	ldr	r3, [pc, #668]	; (8006974 <HAL_RCC_OscConfig+0x688>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d114      	bne.n	800670a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066e0:	f7ff fa70 	bl	8005bc4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066e4:	f7fd fb90 	bl	8003e08 <HAL_GetTick>
 80066e8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ec:	f7fd fb8c 	bl	8003e08 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e163      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066fe:	4b9d      	ldr	r3, [pc, #628]	; (8006974 <HAL_RCC_OscConfig+0x688>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d102      	bne.n	8006718 <HAL_RCC_OscConfig+0x42c>
 8006712:	f7ff fb30 	bl	8005d76 <LL_RCC_LSE_Enable>
 8006716:	e00c      	b.n	8006732 <HAL_RCC_OscConfig+0x446>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b05      	cmp	r3, #5
 800671e:	d104      	bne.n	800672a <HAL_RCC_OscConfig+0x43e>
 8006720:	f7ff fb4b 	bl	8005dba <LL_RCC_LSE_EnableBypass>
 8006724:	f7ff fb27 	bl	8005d76 <LL_RCC_LSE_Enable>
 8006728:	e003      	b.n	8006732 <HAL_RCC_OscConfig+0x446>
 800672a:	f7ff fb35 	bl	8005d98 <LL_RCC_LSE_Disable>
 800672e:	f7ff fb55 	bl	8005ddc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d014      	beq.n	8006764 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673a:	f7fd fb65 	bl	8003e08 <HAL_GetTick>
 800673e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006740:	e00a      	b.n	8006758 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006742:	f7fd fb61 	bl	8003e08 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006750:	4293      	cmp	r3, r2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e136      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006758:	f7ff fb51 	bl	8005dfe <LL_RCC_LSE_IsReady>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0ef      	beq.n	8006742 <HAL_RCC_OscConfig+0x456>
 8006762:	e013      	b.n	800678c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006764:	f7fd fb50 	bl	8003e08 <HAL_GetTick>
 8006768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800676a:	e00a      	b.n	8006782 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800676c:	f7fd fb4c 	bl	8003e08 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f241 3288 	movw	r2, #5000	; 0x1388
 800677a:	4293      	cmp	r3, r2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e121      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006782:	f7ff fb3c 	bl	8005dfe <LL_RCC_LSE_IsReady>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1ef      	bne.n	800676c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d02c      	beq.n	80067f2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679c:	2b00      	cmp	r3, #0
 800679e:	d014      	beq.n	80067ca <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067a0:	f7ff fab5 	bl	8005d0e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fd fb30 	bl	8003e08 <HAL_GetTick>
 80067a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067ac:	f7fd fb2c 	bl	8003e08 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e103      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80067be:	f7ff fac8 	bl	8005d52 <LL_RCC_HSI48_IsReady>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0f1      	beq.n	80067ac <HAL_RCC_OscConfig+0x4c0>
 80067c8:	e013      	b.n	80067f2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067ca:	f7ff fab1 	bl	8005d30 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ce:	f7fd fb1b 	bl	8003e08 <HAL_GetTick>
 80067d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80067d4:	e008      	b.n	80067e8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067d6:	f7fd fb17 	bl	8003e08 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e0ee      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80067e8:	f7ff fab3 	bl	8005d52 <LL_RCC_HSI48_IsReady>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f1      	bne.n	80067d6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 80e4 	beq.w	80069c4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067fc:	f7ff fc11 	bl	8006022 <LL_RCC_GetSysClkSource>
 8006800:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	2b02      	cmp	r3, #2
 8006810:	f040 80b4 	bne.w	800697c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f003 0203 	and.w	r2, r3, #3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	429a      	cmp	r2, r3
 8006820:	d123      	bne.n	800686a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800682c:	429a      	cmp	r2, r3
 800682e:	d11c      	bne.n	800686a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800683c:	429a      	cmp	r2, r3
 800683e:	d114      	bne.n	800686a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800684a:	429a      	cmp	r2, r3
 800684c:	d10d      	bne.n	800686a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006858:	429a      	cmp	r2, r3
 800685a:	d106      	bne.n	800686a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d05d      	beq.n	8006926 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2b0c      	cmp	r3, #12
 800686e:	d058      	beq.n	8006922 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e0a1      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006882:	f7ff fc84 	bl	800618e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006886:	f7fd fabf 	bl	8003e08 <HAL_GetTick>
 800688a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800688e:	f7fd fabb 	bl	8003e08 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e092      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1ef      	bne.n	800688e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	4b30      	ldr	r3, [pc, #192]	; (8006978 <HAL_RCC_OscConfig+0x68c>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068c0:	4311      	orrs	r1, r2
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068c6:	0212      	lsls	r2, r2, #8
 80068c8:	4311      	orrs	r1, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80068ce:	4311      	orrs	r1, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80068d4:	4311      	orrs	r1, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80068da:	430a      	orrs	r2, r1
 80068dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068e4:	f7ff fc44 	bl	8006170 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068f8:	f7fd fa86 	bl	8003e08 <HAL_GetTick>
 80068fc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006900:	f7fd fa82 	bl	8003e08 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e059      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0ef      	beq.n	8006900 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006920:	e050      	b.n	80069c4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e04f      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d147      	bne.n	80069c4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006934:	f7ff fc1c 	bl	8006170 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006946:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006948:	f7fd fa5e 	bl	8003e08 <HAL_GetTick>
 800694c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006950:	f7fd fa5a 	bl	8003e08 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e031      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0ef      	beq.n	8006950 <HAL_RCC_OscConfig+0x664>
 8006970:	e028      	b.n	80069c4 <HAL_RCC_OscConfig+0x6d8>
 8006972:	bf00      	nop
 8006974:	58000400 	.word	0x58000400
 8006978:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b0c      	cmp	r3, #12
 8006980:	d01e      	beq.n	80069c0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006982:	f7ff fc04 	bl	800618e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006986:	f7fd fa3f 	bl	8003e08 <HAL_GetTick>
 800698a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800698e:	f7fd fa3b 	bl	8003e08 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e012      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1ef      	bne.n	800698e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80069ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_RCC_OscConfig+0x6e4>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	60cb      	str	r3, [r1, #12]
 80069be:	e001      	b.n	80069c4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3734      	adds	r7, #52	; 0x34
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd90      	pop	{r4, r7, pc}
 80069ce:	bf00      	nop
 80069d0:	eefefffc 	.word	0xeefefffc

080069d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e12d      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069e8:	4b98      	ldr	r3, [pc, #608]	; (8006c4c <HAL_RCC_ClockConfig+0x278>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d91b      	bls.n	8006a2e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f6:	4b95      	ldr	r3, [pc, #596]	; (8006c4c <HAL_RCC_ClockConfig+0x278>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f023 0207 	bic.w	r2, r3, #7
 80069fe:	4993      	ldr	r1, [pc, #588]	; (8006c4c <HAL_RCC_ClockConfig+0x278>)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a06:	f7fd f9ff 	bl	8003e08 <HAL_GetTick>
 8006a0a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a0e:	f7fd f9fb 	bl	8003e08 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e111      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a20:	4b8a      	ldr	r3, [pc, #552]	; (8006c4c <HAL_RCC_ClockConfig+0x278>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d1ef      	bne.n	8006a0e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d016      	beq.n	8006a68 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fafb 	bl	800603a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a44:	f7fd f9e0 	bl	8003e08 <HAL_GetTick>
 8006a48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a4c:	f7fd f9dc 	bl	8003e08 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e0f2      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a5e:	f7ff fbe8 	bl	8006232 <LL_RCC_IsActiveFlag_HPRE>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0f1      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d016      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff faf2 	bl	8006062 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a7e:	f7fd f9c3 	bl	8003e08 <HAL_GetTick>
 8006a82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a86:	f7fd f9bf 	bl	8003e08 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e0d5      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a98:	f7ff fbdd 	bl	8006256 <LL_RCC_IsActiveFlag_C2HPRE>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f1      	beq.n	8006a86 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff faeb 	bl	800608e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ab8:	f7fd f9a6 	bl	8003e08 <HAL_GetTick>
 8006abc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ac0:	f7fd f9a2 	bl	8003e08 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e0b8      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006ad2:	f7ff fbd3 	bl	800627c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0f1      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d016      	beq.n	8006b16 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff fae5 	bl	80060bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006af2:	f7fd f989 	bl	8003e08 <HAL_GetTick>
 8006af6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006af8:	e008      	b.n	8006b0c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006afa:	f7fd f985 	bl	8003e08 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e09b      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006b0c:	f7ff fbc9 	bl	80062a2 <LL_RCC_IsActiveFlag_PPRE1>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f1      	beq.n	8006afa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d017      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fadb 	bl	80060e4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006b2e:	f7fd f96b 	bl	8003e08 <HAL_GetTick>
 8006b32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b34:	e008      	b.n	8006b48 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006b36:	f7fd f967 	bl	8003e08 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e07d      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b48:	f7ff fbbd 	bl	80062c6 <LL_RCC_IsActiveFlag_PPRE2>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f1      	beq.n	8006b36 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d043      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d106      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006b66:	f7ff f87b 	bl	8005c60 <LL_RCC_HSE_IsReady>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d11e      	bne.n	8006bae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e067      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d106      	bne.n	8006b8a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006b7c:	f7ff fb16 	bl	80061ac <LL_RCC_PLL_IsReady>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d113      	bne.n	8006bae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e05c      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006b92:	f7ff f9e3 	bl	8005f5c <LL_RCC_MSI_IsReady>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d108      	bne.n	8006bae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e051      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006ba0:	f7ff f88e 	bl	8005cc0 <LL_RCC_HSI_IsReady>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e04a      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff fa21 	bl	8005ffa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb8:	f7fd f926 	bl	8003e08 <HAL_GetTick>
 8006bbc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bbe:	e00a      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc0:	f7fd f922 	bl	8003e08 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e036      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd6:	f7ff fa24 	bl	8006022 <LL_RCC_GetSysClkSource>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d1ec      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006be6:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <HAL_RCC_ClockConfig+0x278>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d21b      	bcs.n	8006c2c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf4:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <HAL_RCC_ClockConfig+0x278>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f023 0207 	bic.w	r2, r3, #7
 8006bfc:	4913      	ldr	r1, [pc, #76]	; (8006c4c <HAL_RCC_ClockConfig+0x278>)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c04:	f7fd f900 	bl	8003e08 <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c0c:	f7fd f8fc 	bl	8003e08 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e012      	b.n	8006c44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1e:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <HAL_RCC_ClockConfig+0x278>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d1ef      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006c2c:	f000 f87e 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8006c30:	4603      	mov	r3, r0
 8006c32:	4a07      	ldr	r2, [pc, #28]	; (8006c50 <HAL_RCC_ClockConfig+0x27c>)
 8006c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006c36:	f7fd f8f3 	bl	8003e20 <HAL_GetTickPrio>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fd f895 	bl	8003d6c <HAL_InitTick>
 8006c42:	4603      	mov	r3, r0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	58004000 	.word	0x58004000
 8006c50:	20000020 	.word	0x20000020

08006c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c54:	b590      	push	{r4, r7, lr}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c5a:	f7ff f9e2 	bl	8006022 <LL_RCC_GetSysClkSource>
 8006c5e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c66:	f7ff f99e 	bl	8005fa6 <LL_RCC_MSI_GetRange>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	4a2b      	ldr	r2, [pc, #172]	; (8006d20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	e04b      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d102      	bne.n	8006c88 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c82:	4b28      	ldr	r3, [pc, #160]	; (8006d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e045      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d10a      	bne.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c8e:	f7fe ffb7 	bl	8005c00 <LL_RCC_HSE_IsEnabledDiv2>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d102      	bne.n	8006c9e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006c98:	4b22      	ldr	r3, [pc, #136]	; (8006d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	e03a      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006c9e:	4b22      	ldr	r3, [pc, #136]	; (8006d28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	e037      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006ca4:	f7ff fab9 	bl	800621a <LL_RCC_PLL_GetMainSource>
 8006ca8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d003      	beq.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x64>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCC_GetSysClockFreq+0x6a>
 8006cb6:	e00d      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	; (8006d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006cba:	60bb      	str	r3, [r7, #8]
        break;
 8006cbc:	e015      	b.n	8006cea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006cbe:	f7fe ff9f 	bl	8005c00 <LL_RCC_HSE_IsEnabledDiv2>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d102      	bne.n	8006cce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006cc8:	4b16      	ldr	r3, [pc, #88]	; (8006d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006cca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006ccc:	e00d      	b.n	8006cea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006cce:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006cd0:	60bb      	str	r3, [r7, #8]
        break;
 8006cd2:	e00a      	b.n	8006cea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006cd4:	f7ff f967 	bl	8005fa6 <LL_RCC_MSI_GetRange>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	091b      	lsrs	r3, r3, #4
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	4a0f      	ldr	r2, [pc, #60]	; (8006d20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce6:	60bb      	str	r3, [r7, #8]
        break;
 8006ce8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006cea:	f7ff fa71 	bl	80061d0 <LL_RCC_PLL_GetN>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	fb03 f402 	mul.w	r4, r3, r2
 8006cf6:	f7ff fa84 	bl	8006202 <LL_RCC_PLL_GetDivider>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	3301      	adds	r3, #1
 8006d00:	fbb4 f4f3 	udiv	r4, r4, r3
 8006d04:	f7ff fa71 	bl	80061ea <LL_RCC_PLL_GetR>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	0f5b      	lsrs	r3, r3, #29
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006d12:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006d14:	68fb      	ldr	r3, [r7, #12]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd90      	pop	{r4, r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	08010be4 	.word	0x08010be4
 8006d24:	00f42400 	.word	0x00f42400
 8006d28:	01e84800 	.word	0x01e84800

08006d2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d2c:	b598      	push	{r3, r4, r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006d30:	f7ff ff90 	bl	8006c54 <HAL_RCC_GetSysClockFreq>
 8006d34:	4604      	mov	r4, r0
 8006d36:	f7ff f9e9 	bl	800610c <LL_RCC_GetAHBPrescaler>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	091b      	lsrs	r3, r3, #4
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	4a03      	ldr	r2, [pc, #12]	; (8006d50 <HAL_RCC_GetHCLKFreq+0x24>)
 8006d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	bd98      	pop	{r3, r4, r7, pc}
 8006d50:	08010b84 	.word	0x08010b84

08006d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d54:	b598      	push	{r3, r4, r7, lr}
 8006d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d58:	f7ff ffe8 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	f7ff f9ef 	bl	8006140 <LL_RCC_GetAPB1Prescaler>
 8006d62:	4603      	mov	r3, r0
 8006d64:	0a1b      	lsrs	r3, r3, #8
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	4a04      	ldr	r2, [pc, #16]	; (8006d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	bd98      	pop	{r3, r4, r7, pc}
 8006d7c:	08010bc4 	.word	0x08010bc4

08006d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d80:	b598      	push	{r3, r4, r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006d84:	f7ff ffd2 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8006d88:	4604      	mov	r4, r0
 8006d8a:	f7ff f9e5 	bl	8006158 <LL_RCC_GetAPB2Prescaler>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	0adb      	lsrs	r3, r3, #11
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	bd98      	pop	{r3, r4, r7, pc}
 8006da8:	08010bc4 	.word	0x08010bc4

08006dac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006dac:	b590      	push	{r4, r7, lr}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2bb0      	cmp	r3, #176	; 0xb0
 8006db8:	d903      	bls.n	8006dc2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006dba:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e007      	b.n	8006dd2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	091b      	lsrs	r3, r3, #4
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	4a11      	ldr	r2, [pc, #68]	; (8006e10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006dd2:	f7ff f9a7 	bl	8006124 <LL_RCC_GetAHB4Prescaler>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	091b      	lsrs	r3, r3, #4
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	4a0d      	ldr	r2, [pc, #52]	; (8006e14 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006df0:	fba2 2303 	umull	r2, r3, r2, r3
 8006df4:	0c9c      	lsrs	r4, r3, #18
 8006df6:	f7fe fef5 	bl	8005be4 <HAL_PWREx_GetVoltageRange>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 f80c 	bl	8006e1c <RCC_SetFlashLatency>
 8006e04:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd90      	pop	{r4, r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	08010be4 	.word	0x08010be4
 8006e14:	08010b84 	.word	0x08010b84
 8006e18:	431bde83 	.word	0x431bde83

08006e1c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006e1c:	b590      	push	{r4, r7, lr}
 8006e1e:	b093      	sub	sp, #76	; 0x4c
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006e26:	4b37      	ldr	r3, [pc, #220]	; (8006f04 <RCC_SetFlashLatency+0xe8>)
 8006e28:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006e32:	4a35      	ldr	r2, [pc, #212]	; (8006f08 <RCC_SetFlashLatency+0xec>)
 8006e34:	f107 031c 	add.w	r3, r7, #28
 8006e38:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006e3e:	4b33      	ldr	r3, [pc, #204]	; (8006f0c <RCC_SetFlashLatency+0xf0>)
 8006e40:	f107 040c 	add.w	r4, r7, #12
 8006e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e54:	d11a      	bne.n	8006e8c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	643b      	str	r3, [r7, #64]	; 0x40
 8006e5a:	e013      	b.n	8006e84 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	3348      	adds	r3, #72	; 0x48
 8006e62:	443b      	add	r3, r7
 8006e64:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d807      	bhi.n	8006e7e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	3348      	adds	r3, #72	; 0x48
 8006e74:	443b      	add	r3, r7
 8006e76:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e7a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e7c:	e020      	b.n	8006ec0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e80:	3301      	adds	r3, #1
 8006e82:	643b      	str	r3, [r7, #64]	; 0x40
 8006e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d9e8      	bls.n	8006e5c <RCC_SetFlashLatency+0x40>
 8006e8a:	e019      	b.n	8006ec0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e90:	e013      	b.n	8006eba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	3348      	adds	r3, #72	; 0x48
 8006e98:	443b      	add	r3, r7
 8006e9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d807      	bhi.n	8006eb4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	3348      	adds	r3, #72	; 0x48
 8006eaa:	443b      	add	r3, r7
 8006eac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006eb0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006eb2:	e005      	b.n	8006ec0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d9e8      	bls.n	8006e92 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006ec0:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <RCC_SetFlashLatency+0xf4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f023 0207 	bic.w	r2, r3, #7
 8006ec8:	4911      	ldr	r1, [pc, #68]	; (8006f10 <RCC_SetFlashLatency+0xf4>)
 8006eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ed0:	f7fc ff9a 	bl	8003e08 <HAL_GetTick>
 8006ed4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006ed6:	e008      	b.n	8006eea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ed8:	f7fc ff96 	bl	8003e08 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d901      	bls.n	8006eea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e007      	b.n	8006efa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <RCC_SetFlashLatency+0xf4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d1ef      	bne.n	8006ed8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	374c      	adds	r7, #76	; 0x4c
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd90      	pop	{r4, r7, pc}
 8006f02:	bf00      	nop
 8006f04:	08010834 	.word	0x08010834
 8006f08:	08010844 	.word	0x08010844
 8006f0c:	08010850 	.word	0x08010850
 8006f10:	58004000 	.word	0x58004000

08006f14 <LL_RCC_LSE_IsEnabled>:
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <LL_RCC_LSE_IsEnabled+0x18>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <LL_RCC_LSE_IsEnabled+0x1a>
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <LL_RCC_LSE_IsReady>:
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d101      	bne.n	8006f50 <LL_RCC_LSE_IsReady+0x18>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <LL_RCC_LSE_IsReady+0x1a>
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <LL_RCC_SetRFWKPClockSource>:
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <LL_RCC_SetSMPSClockSource>:
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	f023 0203 	bic.w	r2, r3, #3
 8006f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <LL_RCC_SetSMPSPrescaler>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <LL_RCC_SetUSARTClockSource>:
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe8:	f023 0203 	bic.w	r2, r3, #3
 8006fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <LL_RCC_SetLPUARTClockSource>:
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800700c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007014:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <LL_RCC_SetI2CClockSource>:
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	091b      	lsrs	r3, r3, #4
 8007044:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007048:	43db      	mvns	r3, r3
 800704a:	401a      	ands	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007058:	4313      	orrs	r3, r2
 800705a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <LL_RCC_SetLPTIMClockSource>:
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007076:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	0c1b      	lsrs	r3, r3, #16
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	43db      	mvns	r3, r3
 8007082:	401a      	ands	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	041b      	lsls	r3, r3, #16
 8007088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800708c:	4313      	orrs	r3, r2
 800708e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <LL_RCC_SetSAIClockSource>:
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80070a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <LL_RCC_SetRNGClockSource>:
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80070d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80070de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <LL_RCC_SetCLK48ClockSource>:
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80070fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007106:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800710a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4313      	orrs	r3, r2
 8007112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <LL_RCC_SetUSBClockSource>:
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff ffe3 	bl	80070f6 <LL_RCC_SetCLK48ClockSource>
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <LL_RCC_SetADCClockSource>:
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007148:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800714c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <LL_RCC_SetRTCClockSource>:
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800716c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <LL_RCC_GetRTCClockSource>:
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <LL_RCC_ForceBackupDomainReset>:
{
 80071aa:	b480      	push	{r7}
 80071ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80071ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071c2:	bf00      	nop
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <LL_RCC_ReleaseBackupDomainReset>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80071d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071e4:	bf00      	nop
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <LL_RCC_PLLSAI1_Enable>:
{
 80071ee:	b480      	push	{r7}
 80071f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007200:	6013      	str	r3, [r2, #0]
}
 8007202:	bf00      	nop
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <LL_RCC_PLLSAI1_Disable>:
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800721a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800721e:	6013      	str	r3, [r2, #0]
}
 8007220:	bf00      	nop
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <LL_RCC_PLLSAI1_IsReady>:
{
 800722a:	b480      	push	{r7}
 800722c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800722e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800723c:	d101      	bne.n	8007242 <LL_RCC_PLLSAI1_IsReady+0x18>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b088      	sub	sp, #32
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007256:	2300      	movs	r3, #0
 8007258:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800725a:	2300      	movs	r3, #0
 800725c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d034      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007272:	d021      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007274:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007278:	d81b      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800727a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800727e:	d01d      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007280:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007284:	d815      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800728a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800728e:	d110      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800729a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800729e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80072a0:	e00d      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f947 	bl	800753a <RCCEx_PLLSAI1_ConfigNP>
 80072ac:	4603      	mov	r3, r0
 80072ae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80072b0:	e005      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	77fb      	strb	r3, [r7, #31]
        break;
 80072b6:	e002      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80072b8:	bf00      	nop
 80072ba:	e000      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80072bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072be:	7ffb      	ldrb	r3, [r7, #31]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d105      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff fee8 	bl	800709e <LL_RCC_SetSAIClockSource>
 80072ce:	e001      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d0:	7ffb      	ldrb	r3, [r7, #31]
 80072d2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d046      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80072e0:	f7ff ff56 	bl	8007190 <LL_RCC_GetRTCClockSource>
 80072e4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d03c      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80072f0:	f7fe fc68 	bl	8005bc4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff ff30 	bl	8007164 <LL_RCC_SetRTCClockSource>
 8007304:	e02e      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800730a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007310:	f7ff ff4b 	bl	80071aa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007314:	f7ff ff5a 	bl	80071cc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	4313      	orrs	r3, r2
 8007324:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007330:	f7ff fdf0 	bl	8006f14 <LL_RCC_LSE_IsEnabled>
 8007334:	4603      	mov	r3, r0
 8007336:	2b01      	cmp	r3, #1
 8007338:	d114      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800733a:	f7fc fd65 	bl	8003e08 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007340:	e00b      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007342:	f7fc fd61 	bl	8003e08 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007350:	4293      	cmp	r3, r2
 8007352:	d902      	bls.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	77fb      	strb	r3, [r7, #31]
              break;
 8007358:	e004      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800735a:	f7ff fded 	bl	8006f38 <LL_RCC_LSE_IsReady>
 800735e:	4603      	mov	r3, r0
 8007360:	2b01      	cmp	r3, #1
 8007362:	d1ee      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007364:	7ffb      	ldrb	r3, [r7, #31]
 8007366:	77bb      	strb	r3, [r7, #30]
 8007368:	e001      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736a:	7ffb      	ldrb	r3, [r7, #31]
 800736c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d004      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fe2a 	bl	8006fd8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff fe35 	bl	8007004 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0310 	and.w	r3, r3, #16
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff fe5d 	bl	800706a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fe52 	bl	800706a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d004      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff fe2a 	bl	8007030 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fe1f 	bl	8007030 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d022      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff fe8d 	bl	8007122 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007410:	d107      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800741c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007420:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800742a:	d10b      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3304      	adds	r3, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f000 f8dd 	bl	80075f0 <RCCEx_PLLSAI1_ConfigNQ>
 8007436:	4603      	mov	r3, r0
 8007438:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800743a:	7ffb      	ldrb	r3, [r7, #31]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007440:	7ffb      	ldrb	r3, [r7, #31]
 8007442:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800744c:	2b00      	cmp	r3, #0
 800744e:	d02b      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007458:	d008      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007462:	d003      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fe2a 	bl	80070ca <LL_RCC_SetRNGClockSource>
 8007476:	e00a      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	2000      	movs	r0, #0
 8007484:	f7ff fe21 	bl	80070ca <LL_RCC_SetRNGClockSource>
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff fe34 	bl	80070f6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007496:	d107      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d022      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fe3d 	bl	8007138 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c6:	d107      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80074c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074e0:	d10b      	bne.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3304      	adds	r3, #4
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f8dd 	bl	80076a6 <RCCEx_PLLSAI1_ConfigNR>
 80074ec:	4603      	mov	r3, r0
 80074ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80074f0:	7ffb      	ldrb	r3, [r7, #31]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80074f6:	7ffb      	ldrb	r3, [r7, #31]
 80074f8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fd26 	bl	8006f5c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff fd45 	bl	8006fb0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fd2c 	bl	8006f88 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007530:	7fbb      	ldrb	r3, [r7, #30]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007546:	f7ff fe61 	bl	800720c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800754a:	f7fc fc5d 	bl	8003e08 <HAL_GetTick>
 800754e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007550:	e009      	b.n	8007566 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007552:	f7fc fc59 	bl	8003e08 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d902      	bls.n	8007566 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	73fb      	strb	r3, [r7, #15]
      break;
 8007564:	e004      	b.n	8007570 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007566:	f7ff fe60 	bl	800722a <LL_RCC_PLLSAI1_IsReady>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f0      	bne.n	8007552 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d137      	bne.n	80075e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800758a:	4313      	orrs	r3, r2
 800758c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800758e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075a0:	4313      	orrs	r3, r2
 80075a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80075a4:	f7ff fe23 	bl	80071ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a8:	f7fc fc2e 	bl	8003e08 <HAL_GetTick>
 80075ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80075ae:	e009      	b.n	80075c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075b0:	f7fc fc2a 	bl	8003e08 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d902      	bls.n	80075c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	73fb      	strb	r3, [r7, #15]
        break;
 80075c2:	e004      	b.n	80075ce <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80075c4:	f7ff fe31 	bl	800722a <LL_RCC_PLLSAI1_IsReady>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d1f0      	bne.n	80075b0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d108      	bne.n	80075e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80075d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075e2:	4313      	orrs	r3, r2
 80075e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80075fc:	f7ff fe06 	bl	800720c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007600:	f7fc fc02 	bl	8003e08 <HAL_GetTick>
 8007604:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007606:	e009      	b.n	800761c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007608:	f7fc fbfe 	bl	8003e08 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d902      	bls.n	800761c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	73fb      	strb	r3, [r7, #15]
      break;
 800761a:	e004      	b.n	8007626 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800761c:	f7ff fe05 	bl	800722a <LL_RCC_PLLSAI1_IsReady>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1f0      	bne.n	8007608 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d137      	bne.n	800769c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800762c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007640:	4313      	orrs	r3, r2
 8007642:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007656:	4313      	orrs	r3, r2
 8007658:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800765a:	f7ff fdc8 	bl	80071ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800765e:	f7fc fbd3 	bl	8003e08 <HAL_GetTick>
 8007662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007664:	e009      	b.n	800767a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007666:	f7fc fbcf 	bl	8003e08 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d902      	bls.n	800767a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	73fb      	strb	r3, [r7, #15]
        break;
 8007678:	e004      	b.n	8007684 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800767a:	f7ff fdd6 	bl	800722a <LL_RCC_PLLSAI1_IsReady>
 800767e:	4603      	mov	r3, r0
 8007680:	2b01      	cmp	r3, #1
 8007682:	d1f0      	bne.n	8007666 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d108      	bne.n	800769c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800768a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007698:	4313      	orrs	r3, r2
 800769a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80076b2:	f7ff fdab 	bl	800720c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076b6:	f7fc fba7 	bl	8003e08 <HAL_GetTick>
 80076ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80076bc:	e009      	b.n	80076d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076be:	f7fc fba3 	bl	8003e08 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d902      	bls.n	80076d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	73fb      	strb	r3, [r7, #15]
      break;
 80076d0:	e004      	b.n	80076dc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80076d2:	f7ff fdaa 	bl	800722a <LL_RCC_PLLSAI1_IsReady>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f0      	bne.n	80076be <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d137      	bne.n	8007752 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80076e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076f6:	4313      	orrs	r3, r2
 80076f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80076fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800770c:	4313      	orrs	r3, r2
 800770e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007710:	f7ff fd6d 	bl	80071ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007714:	f7fc fb78 	bl	8003e08 <HAL_GetTick>
 8007718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800771a:	e009      	b.n	8007730 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800771c:	f7fc fb74 	bl	8003e08 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d902      	bls.n	8007730 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	73fb      	strb	r3, [r7, #15]
        break;
 800772e:	e004      	b.n	800773a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007730:	f7ff fd7b 	bl	800722a <LL_RCC_PLLSAI1_IsReady>
 8007734:	4603      	mov	r3, r0
 8007736:	2b01      	cmp	r3, #1
 8007738:	d1f0      	bne.n	800771c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d108      	bne.n	8007752 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800774e:	4313      	orrs	r3, r2
 8007750:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e09f      	b.n	80078ae <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fb f954 	bl	8002a30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007790:	4b49      	ldr	r3, [pc, #292]	; (80078b8 <HAL_RTC_Init+0x15c>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b10      	cmp	r3, #16
 800779a:	d07e      	beq.n	800789a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	22ca      	movs	r2, #202	; 0xca
 80077a2:	625a      	str	r2, [r3, #36]	; 0x24
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2253      	movs	r2, #83	; 0x53
 80077aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f8ab 	bl	8007908 <RTC_EnterInitMode>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	22ff      	movs	r2, #255	; 0xff
 80077be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2204      	movs	r2, #4
 80077c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]
 80077cc:	e067      	b.n	800789e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80077dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6899      	ldr	r1, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	68d2      	ldr	r2, [r2, #12]
 8007808:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6919      	ldr	r1, [r3, #16]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	041a      	lsls	r2, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800782c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0203 	bic.w	r2, r2, #3
 800783c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	431a      	orrs	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 0320 	and.w	r3, r3, #32
 8007860:	2b00      	cmp	r3, #0
 8007862:	d113      	bne.n	800788c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f829 	bl	80078bc <HAL_RTC_WaitForSynchro>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00d      	beq.n	800788c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2204      	movs	r2, #4
 800787c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e010      	b.n	80078ae <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	22ff      	movs	r2, #255	; 0xff
 8007892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]
 8007898:	e001      	b.n	800789e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d103      	bne.n	80078ac <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	40002800 	.word	0x40002800

080078bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078d2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80078d4:	f7fc fa98 	bl	8003e08 <HAL_GetTick>
 80078d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078da:	e009      	b.n	80078f0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078dc:	f7fc fa94 	bl	8003e08 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078ea:	d901      	bls.n	80078f0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e007      	b.n	8007900 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0ee      	beq.n	80078dc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d119      	bne.n	8007952 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007928:	f7fc fa6e 	bl	8003e08 <HAL_GetTick>
 800792c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800792e:	e009      	b.n	8007944 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007930:	f7fc fa6a 	bl	8003e08 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800793e:	d901      	bls.n	8007944 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e007      	b.n	8007954 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0ee      	beq.n	8007930 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007972:	2302      	movs	r3, #2
 8007974:	e0a8      	b.n	8007ac8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2202      	movs	r2, #2
 8007982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	22ca      	movs	r2, #202	; 0xca
 800798c:	625a      	str	r2, [r3, #36]	; 0x24
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2253      	movs	r2, #83	; 0x53
 8007994:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d020      	beq.n	80079e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80079a4:	f7fc fa30 	bl	8003e08 <HAL_GetTick>
 80079a8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80079aa:	e015      	b.n	80079d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079ac:	f7fc fa2c 	bl	8003e08 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079ba:	d90d      	bls.n	80079d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	22ff      	movs	r2, #255	; 0xff
 80079c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2203      	movs	r2, #3
 80079c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e077      	b.n	8007ac8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e2      	bne.n	80079ac <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007a06:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007a08:	f7fc f9fe 	bl	8003e08 <HAL_GetTick>
 8007a0c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a0e:	e015      	b.n	8007a3c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a10:	f7fc f9fa 	bl	8003e08 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a1e:	d90d      	bls.n	8007a3c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	22ff      	movs	r2, #255	; 0xff
 8007a26:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2203      	movs	r2, #3
 8007a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e045      	b.n	8007ac8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0e2      	beq.n	8007a10 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0207 	bic.w	r2, r2, #7
 8007a60:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6899      	ldr	r1, [r3, #8]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007a72:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a78:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007a82:	4b13      	ldr	r3, [pc, #76]	; (8007ad0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a12      	ldr	r2, [pc, #72]	; (8007ad0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a8c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a9c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007aac:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	22ff      	movs	r2, #255	; 0xff
 8007ab4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	58000800 	.word	0x58000800

08007ad4 <LL_RCC_GetUSARTClockSource>:
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4013      	ands	r3, r2
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <LL_RCC_GetLPUARTClockSource>:
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4013      	ands	r3, r2
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e042      	b.n	8007bac <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7fa ff07 	bl	800294c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2224      	movs	r2, #36	; 0x24
 8007b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0201 	bic.w	r2, r2, #1
 8007b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f8a2 	bl	8007ca0 <UART_SetConfig>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e022      	b.n	8007bac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fabe 	bl	80080f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0201 	orr.w	r2, r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb45 	bl	8008234 <UART_CheckIdleState>
 8007baa:	4603      	mov	r3, r0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d137      	bne.n	8007c3c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_UART_Receive_DMA+0x24>
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e030      	b.n	8007c3e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <HAL_UART_Receive_DMA+0x94>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d01f      	beq.n	8007c2c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d018      	beq.n	8007c2c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	613b      	str	r3, [r7, #16]
   return(result);
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	623b      	str	r3, [r7, #32]
 8007c1a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	69f9      	ldr	r1, [r7, #28]
 8007c1e:	6a3a      	ldr	r2, [r7, #32]
 8007c20:	e841 2300 	strex	r3, r2, [r1]
 8007c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1e6      	bne.n	8007bfa <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c2c:	88fb      	ldrh	r3, [r7, #6]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fc10 	bl	8008458 <UART_Start_Receive_DMA>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	e000      	b.n	8007c3e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c3c:	2302      	movs	r3, #2
  }
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3728      	adds	r7, #40	; 0x28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	40008000 	.word	0x40008000

08007c4c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ca4:	b08c      	sub	sp, #48	; 0x30
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	4baf      	ldr	r3, [pc, #700]	; (8007f8c <UART_SetConfig+0x2ec>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4aa4      	ldr	r2, [pc, #656]	; (8007f90 <UART_SetConfig+0x2f0>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d004      	beq.n	8007d0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d20:	430b      	orrs	r3, r1
 8007d22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	f023 010f 	bic.w	r1, r3, #15
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a95      	ldr	r2, [pc, #596]	; (8007f94 <UART_SetConfig+0x2f4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d125      	bne.n	8007d90 <UART_SetConfig+0xf0>
 8007d44:	2003      	movs	r0, #3
 8007d46:	f7ff fec5 	bl	8007ad4 <LL_RCC_GetUSARTClockSource>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d81b      	bhi.n	8007d88 <UART_SetConfig+0xe8>
 8007d50:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <UART_SetConfig+0xb8>)
 8007d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d56:	bf00      	nop
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d79 	.word	0x08007d79
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	2301      	movs	r3, #1
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6e:	e042      	b.n	8007df6 <UART_SetConfig+0x156>
 8007d70:	2302      	movs	r3, #2
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d76:	e03e      	b.n	8007df6 <UART_SetConfig+0x156>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	e03a      	b.n	8007df6 <UART_SetConfig+0x156>
 8007d80:	2308      	movs	r3, #8
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d86:	e036      	b.n	8007df6 <UART_SetConfig+0x156>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8e:	e032      	b.n	8007df6 <UART_SetConfig+0x156>
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a7e      	ldr	r2, [pc, #504]	; (8007f90 <UART_SetConfig+0x2f0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d12a      	bne.n	8007df0 <UART_SetConfig+0x150>
 8007d9a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007d9e:	f7ff fea9 	bl	8007af4 <LL_RCC_GetLPUARTClockSource>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007da8:	d01a      	beq.n	8007de0 <UART_SetConfig+0x140>
 8007daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dae:	d81b      	bhi.n	8007de8 <UART_SetConfig+0x148>
 8007db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db4:	d00c      	beq.n	8007dd0 <UART_SetConfig+0x130>
 8007db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dba:	d815      	bhi.n	8007de8 <UART_SetConfig+0x148>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <UART_SetConfig+0x128>
 8007dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc4:	d008      	beq.n	8007dd8 <UART_SetConfig+0x138>
 8007dc6:	e00f      	b.n	8007de8 <UART_SetConfig+0x148>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dce:	e012      	b.n	8007df6 <UART_SetConfig+0x156>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd6:	e00e      	b.n	8007df6 <UART_SetConfig+0x156>
 8007dd8:	2304      	movs	r3, #4
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dde:	e00a      	b.n	8007df6 <UART_SetConfig+0x156>
 8007de0:	2308      	movs	r3, #8
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de6:	e006      	b.n	8007df6 <UART_SetConfig+0x156>
 8007de8:	2310      	movs	r3, #16
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dee:	e002      	b.n	8007df6 <UART_SetConfig+0x156>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a65      	ldr	r2, [pc, #404]	; (8007f90 <UART_SetConfig+0x2f0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	f040 8097 	bne.w	8007f30 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	d823      	bhi.n	8007e52 <UART_SetConfig+0x1b2>
 8007e0a:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <UART_SetConfig+0x170>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007e35 	.word	0x08007e35
 8007e14:	08007e53 	.word	0x08007e53
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e53 	.word	0x08007e53
 8007e20:	08007e43 	.word	0x08007e43
 8007e24:	08007e53 	.word	0x08007e53
 8007e28:	08007e53 	.word	0x08007e53
 8007e2c:	08007e53 	.word	0x08007e53
 8007e30:	08007e4b 	.word	0x08007e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e34:	f7fe ff8e 	bl	8006d54 <HAL_RCC_GetPCLK1Freq>
 8007e38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e3a:	e010      	b.n	8007e5e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e3c:	4b56      	ldr	r3, [pc, #344]	; (8007f98 <UART_SetConfig+0x2f8>)
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e40:	e00d      	b.n	8007e5e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e42:	f7fe ff07 	bl	8006c54 <HAL_RCC_GetSysClockFreq>
 8007e46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e48:	e009      	b.n	8007e5e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e50:	e005      	b.n	8007e5e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 812b 	beq.w	80080bc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	4a4c      	ldr	r2, [pc, #304]	; (8007f9c <UART_SetConfig+0x2fc>)
 8007e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e70:	461a      	mov	r2, r3
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	4413      	add	r3, r2
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d305      	bcc.n	8007e96 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d903      	bls.n	8007e9e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e9c:	e10e      	b.n	80080bc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	60bb      	str	r3, [r7, #8]
 8007ea4:	60fa      	str	r2, [r7, #12]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	4a3c      	ldr	r2, [pc, #240]	; (8007f9c <UART_SetConfig+0x2fc>)
 8007eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	603b      	str	r3, [r7, #0]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ebc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ec0:	f7f8 fe72 	bl	8000ba8 <__aeabi_uldivmod>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4619      	mov	r1, r3
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	020b      	lsls	r3, r1, #8
 8007ed6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007eda:	0202      	lsls	r2, r0, #8
 8007edc:	6979      	ldr	r1, [r7, #20]
 8007ede:	6849      	ldr	r1, [r1, #4]
 8007ee0:	0849      	lsrs	r1, r1, #1
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	eb12 0804 	adds.w	r8, r2, r4
 8007eec:	eb43 0905 	adc.w	r9, r3, r5
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	469a      	mov	sl, r3
 8007ef8:	4693      	mov	fp, r2
 8007efa:	4652      	mov	r2, sl
 8007efc:	465b      	mov	r3, fp
 8007efe:	4640      	mov	r0, r8
 8007f00:	4649      	mov	r1, r9
 8007f02:	f7f8 fe51 	bl	8000ba8 <__aeabi_uldivmod>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f14:	d308      	bcc.n	8007f28 <UART_SetConfig+0x288>
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f1c:	d204      	bcs.n	8007f28 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6a3a      	ldr	r2, [r7, #32]
 8007f24:	60da      	str	r2, [r3, #12]
 8007f26:	e0c9      	b.n	80080bc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f2e:	e0c5      	b.n	80080bc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f38:	d16d      	bne.n	8008016 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	2b07      	cmp	r3, #7
 8007f42:	d82d      	bhi.n	8007fa0 <UART_SetConfig+0x300>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x2ac>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f6d 	.word	0x08007f6d
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007fa1 	.word	0x08007fa1
 8007f58:	08007f7b 	.word	0x08007f7b
 8007f5c:	08007fa1 	.word	0x08007fa1
 8007f60:	08007fa1 	.word	0x08007fa1
 8007f64:	08007fa1 	.word	0x08007fa1
 8007f68:	08007f83 	.word	0x08007f83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f6c:	f7fe ff08 	bl	8006d80 <HAL_RCC_GetPCLK2Freq>
 8007f70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f72:	e01b      	b.n	8007fac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f74:	4b08      	ldr	r3, [pc, #32]	; (8007f98 <UART_SetConfig+0x2f8>)
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f78:	e018      	b.n	8007fac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f7a:	f7fe fe6b 	bl	8006c54 <HAL_RCC_GetSysClockFreq>
 8007f7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f80:	e014      	b.n	8007fac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f88:	e010      	b.n	8007fac <UART_SetConfig+0x30c>
 8007f8a:	bf00      	nop
 8007f8c:	cfff69f3 	.word	0xcfff69f3
 8007f90:	40008000 	.word	0x40008000
 8007f94:	40013800 	.word	0x40013800
 8007f98:	00f42400 	.word	0x00f42400
 8007f9c:	08010c24 	.word	0x08010c24
      default:
        pclk = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007faa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 8084 	beq.w	80080bc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	4a4b      	ldr	r2, [pc, #300]	; (80080e8 <UART_SetConfig+0x448>)
 8007fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc6:	005a      	lsls	r2, r3, #1
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	085b      	lsrs	r3, r3, #1
 8007fce:	441a      	add	r2, r3
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	2b0f      	cmp	r3, #15
 8007fde:	d916      	bls.n	800800e <UART_SetConfig+0x36e>
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe6:	d212      	bcs.n	800800e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	f023 030f 	bic.w	r3, r3, #15
 8007ff0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	8bfb      	ldrh	r3, [r7, #30]
 8008000:	4313      	orrs	r3, r2
 8008002:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	8bfa      	ldrh	r2, [r7, #30]
 800800a:	60da      	str	r2, [r3, #12]
 800800c:	e056      	b.n	80080bc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008014:	e052      	b.n	80080bc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800801a:	3b01      	subs	r3, #1
 800801c:	2b07      	cmp	r3, #7
 800801e:	d822      	bhi.n	8008066 <UART_SetConfig+0x3c6>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <UART_SetConfig+0x388>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	08008049 	.word	0x08008049
 800802c:	08008051 	.word	0x08008051
 8008030:	08008067 	.word	0x08008067
 8008034:	08008057 	.word	0x08008057
 8008038:	08008067 	.word	0x08008067
 800803c:	08008067 	.word	0x08008067
 8008040:	08008067 	.word	0x08008067
 8008044:	0800805f 	.word	0x0800805f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008048:	f7fe fe9a 	bl	8006d80 <HAL_RCC_GetPCLK2Freq>
 800804c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800804e:	e010      	b.n	8008072 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008050:	4b26      	ldr	r3, [pc, #152]	; (80080ec <UART_SetConfig+0x44c>)
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008054:	e00d      	b.n	8008072 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008056:	f7fe fdfd 	bl	8006c54 <HAL_RCC_GetSysClockFreq>
 800805a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800805c:	e009      	b.n	8008072 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008064:	e005      	b.n	8008072 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008070:	bf00      	nop
    }

    if (pclk != 0U)
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	d021      	beq.n	80080bc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	4a1a      	ldr	r2, [pc, #104]	; (80080e8 <UART_SetConfig+0x448>)
 800807e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008082:	461a      	mov	r2, r3
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	fbb3 f2f2 	udiv	r2, r3, r2
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	441a      	add	r2, r3
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	fbb2 f3f3 	udiv	r3, r2, r3
 800809a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	2b0f      	cmp	r3, #15
 80080a0:	d909      	bls.n	80080b6 <UART_SetConfig+0x416>
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a8:	d205      	bcs.n	80080b6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60da      	str	r2, [r3, #12]
 80080b4:	e002      	b.n	80080bc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2201      	movs	r2, #1
 80080c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2200      	movs	r2, #0
 80080d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2200      	movs	r2, #0
 80080d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80080d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3730      	adds	r7, #48	; 0x30
 80080e0:	46bd      	mov	sp, r7
 80080e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080e6:	bf00      	nop
 80080e8:	08010c24 	.word	0x08010c24
 80080ec:	00f42400 	.word	0x00f42400

080080f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00a      	beq.n	800815e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00a      	beq.n	8008180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008184:	f003 0310 	and.w	r3, r3, #16
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00a      	beq.n	80081a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d01a      	beq.n	8008206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ee:	d10a      	bne.n	8008206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	605a      	str	r2, [r3, #4]
  }
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b098      	sub	sp, #96	; 0x60
 8008238:	af02      	add	r7, sp, #8
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008244:	f7fb fde0 	bl	8003e08 <HAL_GetTick>
 8008248:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0308 	and.w	r3, r3, #8
 8008254:	2b08      	cmp	r3, #8
 8008256:	d12f      	bne.n	80082b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008260:	2200      	movs	r2, #0
 8008262:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f88e 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d022      	beq.n	80082b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008286:	653b      	str	r3, [r7, #80]	; 0x50
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008290:	647b      	str	r3, [r7, #68]	; 0x44
 8008292:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800829e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e063      	b.n	8008380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d149      	bne.n	800835a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ce:	2200      	movs	r2, #0
 80082d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f857 	bl	8008388 <UART_WaitOnFlagUntilTimeout>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d03c      	beq.n	800835a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	623b      	str	r3, [r7, #32]
   return(result);
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008300:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e6      	bne.n	80082e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3308      	adds	r3, #8
 8008318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	60fb      	str	r3, [r7, #12]
   return(result);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f023 0301 	bic.w	r3, r3, #1
 8008328:	64bb      	str	r3, [r7, #72]	; 0x48
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008332:	61fa      	str	r2, [r7, #28]
 8008334:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	69b9      	ldr	r1, [r7, #24]
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	617b      	str	r3, [r7, #20]
   return(result);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e5      	bne.n	8008312 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2220      	movs	r2, #32
 800834a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e012      	b.n	8008380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3758      	adds	r7, #88	; 0x58
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	4613      	mov	r3, r2
 8008396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008398:	e049      	b.n	800842e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a0:	d045      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a2:	f7fb fd31 	bl	8003e08 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d302      	bcc.n	80083b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e048      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0304 	and.w	r3, r3, #4
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d031      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d110      	bne.n	80083fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2208      	movs	r2, #8
 80083de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 f920 	bl	8008626 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2208      	movs	r2, #8
 80083ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e029      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008408:	d111      	bne.n	800842e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f906 	bl	8008626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e00f      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4013      	ands	r3, r2
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	429a      	cmp	r2, r3
 800843c:	bf0c      	ite	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	2300      	movne	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	429a      	cmp	r2, r3
 800844a:	d0a6      	beq.n	800839a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b096      	sub	sp, #88	; 0x58
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2222      	movs	r2, #34	; 0x22
 8008480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800848a:	2b00      	cmp	r3, #0
 800848c:	d02d      	beq.n	80084ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008494:	4a40      	ldr	r2, [pc, #256]	; (8008598 <UART_Start_Receive_DMA+0x140>)
 8008496:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800849e:	4a3f      	ldr	r2, [pc, #252]	; (800859c <UART_Start_Receive_DMA+0x144>)
 80084a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084a8:	4a3d      	ldr	r2, [pc, #244]	; (80085a0 <UART_Start_Receive_DMA+0x148>)
 80084aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b2:	2200      	movs	r2, #0
 80084b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3324      	adds	r3, #36	; 0x24
 80084c2:	4619      	mov	r1, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c8:	461a      	mov	r2, r3
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	f7fb ff02 	bl	80042d4 <HAL_DMA_Start_IT>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2210      	movs	r2, #16
 80084da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e051      	b.n	800858e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d018      	beq.n	8008524 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008506:	657b      	str	r3, [r7, #84]	; 0x54
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008510:	64bb      	str	r3, [r7, #72]	; 0x48
 8008512:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800851e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e6      	bne.n	80084f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	f043 0301 	orr.w	r3, r3, #1
 800853a:	653b      	str	r3, [r7, #80]	; 0x50
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3308      	adds	r3, #8
 8008542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008544:	637a      	str	r2, [r7, #52]	; 0x34
 8008546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800854a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e5      	bne.n	8008524 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3308      	adds	r3, #8
 800855e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	613b      	str	r3, [r7, #16]
   return(result);
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800856e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3308      	adds	r3, #8
 8008576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008578:	623a      	str	r2, [r7, #32]
 800857a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	69f9      	ldr	r1, [r7, #28]
 800857e:	6a3a      	ldr	r2, [r7, #32]
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	61bb      	str	r3, [r7, #24]
   return(result);
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e5      	bne.n	8008558 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3758      	adds	r7, #88	; 0x58
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	080086f3 	.word	0x080086f3
 800859c:	0800881f 	.word	0x0800881f
 80085a0:	0800885d 	.word	0x0800885d

080085a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b08f      	sub	sp, #60	; 0x3c
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e6      	bne.n	80085ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3308      	adds	r3, #8
 80085e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80085f4:	633b      	str	r3, [r7, #48]	; 0x30
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fe:	61ba      	str	r2, [r7, #24]
 8008600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6979      	ldr	r1, [r7, #20]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	613b      	str	r3, [r7, #16]
   return(result);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e5      	bne.n	80085de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800861a:	bf00      	nop
 800861c:	373c      	adds	r7, #60	; 0x3c
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008626:	b480      	push	{r7}
 8008628:	b095      	sub	sp, #84	; 0x54
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864c:	643b      	str	r3, [r7, #64]	; 0x40
 800864e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e6      	bne.n	800862e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008676:	f023 0301 	bic.w	r3, r3, #1
 800867a:	64bb      	str	r3, [r7, #72]	; 0x48
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3308      	adds	r3, #8
 8008682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800868a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e3      	bne.n	8008660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800869c:	2b01      	cmp	r3, #1
 800869e:	d118      	bne.n	80086d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f023 0310 	bic.w	r3, r3, #16
 80086b4:	647b      	str	r3, [r7, #68]	; 0x44
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086be:	61bb      	str	r3, [r7, #24]
 80086c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6979      	ldr	r1, [r7, #20]
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	613b      	str	r3, [r7, #16]
   return(result);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e6      	bne.n	80086a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80086e6:	bf00      	nop
 80086e8:	3754      	adds	r7, #84	; 0x54
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b09c      	sub	sp, #112	; 0x70
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d171      	bne.n	80087f2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800870e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008710:	2200      	movs	r2, #0
 8008712:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800872a:	66bb      	str	r3, [r7, #104]	; 0x68
 800872c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008734:	65bb      	str	r3, [r7, #88]	; 0x58
 8008736:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800873a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e6      	bne.n	8008716 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3308      	adds	r3, #8
 800874e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875a:	f023 0301 	bic.w	r3, r3, #1
 800875e:	667b      	str	r3, [r7, #100]	; 0x64
 8008760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3308      	adds	r3, #8
 8008766:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008768:	647a      	str	r2, [r7, #68]	; 0x44
 800876a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800876e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e5      	bne.n	8008748 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800877c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3308      	adds	r3, #8
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	623b      	str	r3, [r7, #32]
   return(result);
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008792:	663b      	str	r3, [r7, #96]	; 0x60
 8008794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3308      	adds	r3, #8
 800879a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800879c:	633a      	str	r2, [r7, #48]	; 0x30
 800879e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e5      	bne.n	800877c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b2:	2220      	movs	r2, #32
 80087b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d118      	bne.n	80087f2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f023 0310 	bic.w	r3, r3, #16
 80087d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087de:	61fb      	str	r3, [r7, #28]
 80087e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	69b9      	ldr	r1, [r7, #24]
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	617b      	str	r3, [r7, #20]
   return(result);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e6      	bne.n	80087c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f4:	2200      	movs	r2, #0
 80087f6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d107      	bne.n	8008810 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008802:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008806:	4619      	mov	r1, r3
 8008808:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800880a:	f7ff fa3d 	bl	8007c88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800880e:	e002      	b.n	8008816 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008810:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008812:	f7ff fa1b 	bl	8007c4c <HAL_UART_RxCpltCallback>
}
 8008816:	bf00      	nop
 8008818:	3770      	adds	r7, #112	; 0x70
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008836:	2b01      	cmp	r3, #1
 8008838:	d109      	bne.n	800884e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	b29b      	uxth	r3, r3
 8008844:	4619      	mov	r1, r3
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7ff fa1e 	bl	8007c88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800884c:	e002      	b.n	8008854 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f7ff fa06 	bl	8007c60 <HAL_UART_RxHalfCpltCallback>
}
 8008854:	bf00      	nop
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008870:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008878:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008884:	2b80      	cmp	r3, #128	; 0x80
 8008886:	d109      	bne.n	800889c <UART_DMAError+0x40>
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	2b21      	cmp	r3, #33	; 0x21
 800888c:	d106      	bne.n	800889c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2200      	movs	r2, #0
 8008892:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008896:	6978      	ldr	r0, [r7, #20]
 8008898:	f7ff fe84 	bl	80085a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a6:	2b40      	cmp	r3, #64	; 0x40
 80088a8:	d109      	bne.n	80088be <UART_DMAError+0x62>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b22      	cmp	r3, #34	; 0x22
 80088ae:	d106      	bne.n	80088be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80088b8:	6978      	ldr	r0, [r7, #20]
 80088ba:	f7ff feb4 	bl	8008626 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c4:	f043 0210 	orr.w	r2, r3, #16
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	f7ff f9d0 	bl	8007c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d4:	bf00      	nop
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e027      	b.n	8008942 <HAL_UARTEx_DisableFifoMode+0x66>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2224      	movs	r2, #36	; 0x24
 80088fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0201 	bic.w	r2, r2, #1
 8008918:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008920:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2220      	movs	r2, #32
 8008934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008962:	2302      	movs	r3, #2
 8008964:	e02d      	b.n	80089c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2224      	movs	r2, #36	; 0x24
 8008972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0201 	bic.w	r2, r2, #1
 800898c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f850 	bl	8008a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d101      	bne.n	80089e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089de:	2302      	movs	r3, #2
 80089e0:	e02d      	b.n	8008a3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2224      	movs	r2, #36	; 0x24
 80089ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0201 	bic.w	r2, r2, #1
 8008a08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f812 	bl	8008a48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d108      	bne.n	8008a6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a68:	e031      	b.n	8008ace <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a6a:	2308      	movs	r3, #8
 8008a6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a6e:	2308      	movs	r3, #8
 8008a70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	0e5b      	lsrs	r3, r3, #25
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	0f5b      	lsrs	r3, r3, #29
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	7b3a      	ldrb	r2, [r7, #12]
 8008a96:	4911      	ldr	r1, [pc, #68]	; (8008adc <UARTEx_SetNbDataToProcess+0x94>)
 8008a98:	5c8a      	ldrb	r2, [r1, r2]
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a9e:	7b3a      	ldrb	r2, [r7, #12]
 8008aa0:	490f      	ldr	r1, [pc, #60]	; (8008ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8008aa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008aa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	7b7a      	ldrb	r2, [r7, #13]
 8008ab4:	4909      	ldr	r1, [pc, #36]	; (8008adc <UARTEx_SetNbDataToProcess+0x94>)
 8008ab6:	5c8a      	ldrb	r2, [r1, r2]
 8008ab8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008abc:	7b7a      	ldrb	r2, [r7, #13]
 8008abe:	4908      	ldr	r1, [pc, #32]	; (8008ae0 <UARTEx_SetNbDataToProcess+0x98>)
 8008ac0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ace:	bf00      	nop
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	08010c3c 	.word	0x08010c3c
 8008ae0:	08010c44 	.word	0x08010c44

08008ae4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008aee:	f107 0308 	add.w	r3, r7, #8
 8008af2:	2218      	movs	r2, #24
 8008af4:	2100      	movs	r1, #0
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 fa6e 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008afc:	233f      	movs	r3, #63	; 0x3f
 8008afe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008b00:	2381      	movs	r3, #129	; 0x81
 8008b02:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b04:	1dfb      	adds	r3, r7, #7
 8008b06:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b0c:	f107 0308 	add.w	r3, r7, #8
 8008b10:	2100      	movs	r1, #0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 f924 	bl	8009d60 <hci_send_req>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da01      	bge.n	8008b22 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008b1e:	23ff      	movs	r3, #255	; 0xff
 8008b20:	e000      	b.n	8008b24 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008b22:	79fb      	ldrb	r3, [r7, #7]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3720      	adds	r7, #32
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008b2c:	b5b0      	push	{r4, r5, r7, lr}
 8008b2e:	b0ce      	sub	sp, #312	; 0x138
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4605      	mov	r5, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	4610      	mov	r0, r2
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b3e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008b42:	462a      	mov	r2, r5
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b4a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008b4e:	4622      	mov	r2, r4
 8008b50:	801a      	strh	r2, [r3, #0]
 8008b52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b56:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	801a      	strh	r2, [r3, #0]
 8008b5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b62:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008b66:	460a      	mov	r2, r1
 8008b68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008b6a:	f107 0310 	add.w	r3, r7, #16
 8008b6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008b72:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008b76:	3308      	adds	r3, #8
 8008b78:	f107 0210 	add.w	r2, r7, #16
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008b82:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008b86:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008b8a:	4413      	add	r3, r2
 8008b8c:	3309      	adds	r3, #9
 8008b8e:	f107 0210 	add.w	r2, r7, #16
 8008b92:	4413      	add	r3, r2
 8008b94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b9c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008baa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008bae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008bb2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008bb6:	7812      	ldrb	r2, [r2, #0]
 8008bb8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008bc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008bc8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008bcc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008bd0:	8812      	ldrh	r2, [r2, #0]
 8008bd2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bda:	3302      	adds	r3, #2
 8008bdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008be0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008be4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008be8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008bec:	8812      	ldrh	r2, [r2, #0]
 8008bee:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008bf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008bfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c00:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c04:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008c08:	7812      	ldrb	r2, [r2, #0]
 8008c0a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008c0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c10:	3301      	adds	r3, #1
 8008c12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008c16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c1a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008c1e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c24:	3301      	adds	r3, #1
 8008c26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008c2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c2e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008c32:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c38:	3301      	adds	r3, #1
 8008c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008c3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c42:	3308      	adds	r3, #8
 8008c44:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008c48:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 f9b3 	bl	8009fb8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008c52:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008c56:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008c60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c64:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008c68:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008c6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c6e:	3301      	adds	r3, #1
 8008c70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008c74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c78:	3301      	adds	r3, #1
 8008c7a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008c7e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f998 	bl	8009fb8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008c88:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008c8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008c90:	4413      	add	r3, r2
 8008c92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c9a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008c9e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008ca0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ca4:	3302      	adds	r3, #2
 8008ca6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8008caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cae:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008cb2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cb8:	3302      	adds	r3, #2
 8008cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cc2:	2218      	movs	r2, #24
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 f986 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ccc:	233f      	movs	r3, #63	; 0x3f
 8008cce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008cd2:	2383      	movs	r3, #131	; 0x83
 8008cd4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cd8:	f107 0310 	add.w	r3, r7, #16
 8008cdc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ce0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ce4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ce8:	f107 030f 	add.w	r3, r7, #15
 8008cec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008cf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 f82f 	bl	8009d60 <hci_send_req>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	da01      	bge.n	8008d0c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008d08:	23ff      	movs	r3, #255	; 0xff
 8008d0a:	e004      	b.n	8008d16 <aci_gap_set_discoverable+0x1ea>
  return status;
 8008d0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d10:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d14:	781b      	ldrb	r3, [r3, #0]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bdb0      	pop	{r4, r5, r7, pc}

08008d20 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b0cc      	sub	sp, #304	; 0x130
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4602      	mov	r2, r0
 8008d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008d32:	f107 0310 	add.w	r3, r7, #16
 8008d36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d42:	2200      	movs	r2, #0
 8008d44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d54:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008d58:	7812      	ldrb	r2, [r2, #0]
 8008d5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d60:	3301      	adds	r3, #1
 8008d62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d6a:	2218      	movs	r2, #24
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 f932 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d74:	233f      	movs	r3, #63	; 0x3f
 8008d76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008d7a:	2385      	movs	r3, #133	; 0x85
 8008d7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d80:	f107 0310 	add.w	r3, r7, #16
 8008d84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d90:	f107 030f 	add.w	r3, r7, #15
 8008d94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008da2:	2100      	movs	r1, #0
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 ffdb 	bl	8009d60 <hci_send_req>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	da01      	bge.n	8008db4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008db0:	23ff      	movs	r3, #255	; 0xff
 8008db2:	e004      	b.n	8008dbe <aci_gap_set_io_capability+0x9e>
  return status;
 8008db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008dbc:	781b      	ldrb	r3, [r3, #0]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008dc8:	b5b0      	push	{r4, r5, r7, lr}
 8008dca:	b0cc      	sub	sp, #304	; 0x130
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4605      	mov	r5, r0
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dda:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008dde:	462a      	mov	r2, r5
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008dea:	4622      	mov	r2, r4
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008df6:	4602      	mov	r2, r0
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e02:	460a      	mov	r2, r1
 8008e04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008e06:	f107 0310 	add.w	r3, r7, #16
 8008e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e28:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008e2c:	7812      	ldrb	r2, [r2, #0]
 8008e2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e34:	3301      	adds	r3, #1
 8008e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e42:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008e46:	7812      	ldrb	r2, [r2, #0]
 8008e48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e4e:	3301      	adds	r3, #1
 8008e50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e5c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008e60:	7812      	ldrb	r2, [r2, #0]
 8008e62:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e68:	3301      	adds	r3, #1
 8008e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e76:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008e7a:	7812      	ldrb	r2, [r2, #0]
 8008e7c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e82:	3301      	adds	r3, #1
 8008e84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e8c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008e90:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e96:	3301      	adds	r3, #1
 8008e98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008ea4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008ea6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eaa:	3301      	adds	r3, #1
 8008eac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eb4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008eb8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008ecc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008ed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ede:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008ee2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008eee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ef2:	2218      	movs	r2, #24
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 f86e 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008efc:	233f      	movs	r3, #63	; 0x3f
 8008efe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008f02:	2386      	movs	r3, #134	; 0x86
 8008f04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f08:	f107 0310 	add.w	r3, r7, #16
 8008f0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f18:	f107 030f 	add.w	r3, r7, #15
 8008f1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 ff17 	bl	8009d60 <hci_send_req>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	da01      	bge.n	8008f3c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008f38:	23ff      	movs	r3, #255	; 0xff
 8008f3a:	e004      	b.n	8008f46 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f44:	781b      	ldrb	r3, [r3, #0]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bdb0      	pop	{r4, r5, r7, pc}

08008f50 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b0cc      	sub	sp, #304	; 0x130
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4602      	mov	r2, r0
 8008f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f60:	6019      	str	r1, [r3, #0]
 8008f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f66:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008f6a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008f6c:	f107 0310 	add.w	r3, r7, #16
 8008f70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f78:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f8e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008f92:	8812      	ldrh	r2, [r2, #0]
 8008f94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f9a:	3302      	adds	r3, #2
 8008f9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fa8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008fac:	6812      	ldr	r2, [r2, #0]
 8008fae:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008fb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008fbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fc0:	2218      	movs	r2, #24
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f001 f807 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008fca:	233f      	movs	r3, #63	; 0x3f
 8008fcc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008fd0:	2388      	movs	r3, #136	; 0x88
 8008fd2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008fd6:	f107 0310 	add.w	r3, r7, #16
 8008fda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008fde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fe2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008fe6:	f107 030f 	add.w	r3, r7, #15
 8008fea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ff4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 feb0 	bl	8009d60 <hci_send_req>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	da01      	bge.n	800900a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009006:	23ff      	movs	r3, #255	; 0xff
 8009008:	e004      	b.n	8009014 <aci_gap_pass_key_resp+0xc4>
  return status;
 800900a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009012:	781b      	ldrb	r3, [r3, #0]
}
 8009014:	4618      	mov	r0, r3
 8009016:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800901e:	b590      	push	{r4, r7, lr}
 8009020:	b0cd      	sub	sp, #308	; 0x134
 8009022:	af00      	add	r7, sp, #0
 8009024:	4604      	mov	r4, r0
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800902e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009038:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800903c:	4622      	mov	r2, r4
 800903e:	701a      	strb	r2, [r3, #0]
 8009040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009044:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009048:	4602      	mov	r2, r0
 800904a:	701a      	strb	r2, [r3, #0]
 800904c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009050:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009054:	460a      	mov	r2, r1
 8009056:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009058:	f107 0310 	add.w	r3, r7, #16
 800905c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009060:	f107 0308 	add.w	r3, r7, #8
 8009064:	2207      	movs	r2, #7
 8009066:	2100      	movs	r1, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f000 ffb5 	bl	8009fd8 <Osal_MemSet>
  int index_input = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8009074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009078:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800907c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009080:	7812      	ldrb	r2, [r2, #0]
 8009082:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009084:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009088:	3301      	adds	r3, #1
 800908a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800908e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009092:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009096:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800909a:	7812      	ldrb	r2, [r2, #0]
 800909c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800909e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090a2:	3301      	adds	r3, #1
 80090a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80090a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090b0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80090b4:	7812      	ldrb	r2, [r2, #0]
 80090b6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80090b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090bc:	3301      	adds	r3, #1
 80090be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090c6:	2218      	movs	r2, #24
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 ff84 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090d0:	233f      	movs	r3, #63	; 0x3f
 80090d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80090d6:	238a      	movs	r3, #138	; 0x8a
 80090d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80090dc:	f107 0310 	add.w	r3, r7, #16
 80090e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80090ec:	f107 0308 	add.w	r3, r7, #8
 80090f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80090f4:	2307      	movs	r3, #7
 80090f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fe2d 	bl	8009d60 <hci_send_req>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	da01      	bge.n	8009110 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800910c:	23ff      	movs	r3, #255	; 0xff
 800910e:	e02e      	b.n	800916e <aci_gap_init+0x150>
  if ( resp.Status )
 8009110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009114:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d005      	beq.n	800912a <aci_gap_init+0x10c>
    return resp.Status;
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	e021      	b.n	800916e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800912a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009132:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009136:	b29a      	uxth	r2, r3
 8009138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009148:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800914c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009150:	b29a      	uxth	r2, r3
 8009152:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009156:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009160:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009164:	b29a      	uxth	r2, r3
 8009166:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800916a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009174:	46bd      	mov	sp, r7
 8009176:	bd90      	pop	{r4, r7, pc}

08009178 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b0cc      	sub	sp, #304	; 0x130
 800917c:	af00      	add	r7, sp, #0
 800917e:	4602      	mov	r2, r0
 8009180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009188:	6019      	str	r1, [r3, #0]
 800918a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800918e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009192:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009194:	f107 0310 	add.w	r3, r7, #16
 8009198:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800919c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80091a4:	2200      	movs	r2, #0
 80091a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80091ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091b6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80091ba:	7812      	ldrb	r2, [r2, #0]
 80091bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80091be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091c2:	3301      	adds	r3, #1
 80091c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80091c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091cc:	1c58      	adds	r0, r3, #1
 80091ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091e0:	6819      	ldr	r1, [r3, #0]
 80091e2:	f000 fee9 	bl	8009fb8 <Osal_MemCpy>
  index_input += AdvDataLen;
 80091e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ea:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80091f4:	4413      	add	r3, r2
 80091f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091fe:	2218      	movs	r2, #24
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fee8 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009208:	233f      	movs	r3, #63	; 0x3f
 800920a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800920e:	238e      	movs	r3, #142	; 0x8e
 8009210:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009214:	f107 0310 	add.w	r3, r7, #16
 8009218:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800921c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009220:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009224:	f107 030f 	add.w	r3, r7, #15
 8009228:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800922c:	2301      	movs	r3, #1
 800922e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009232:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fd91 	bl	8009d60 <hci_send_req>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	da01      	bge.n	8009248 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009244:	23ff      	movs	r3, #255	; 0xff
 8009246:	e004      	b.n	8009252 <aci_gap_update_adv_data+0xda>
  return status;
 8009248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800924c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009250:	781b      	ldrb	r3, [r3, #0]
}
 8009252:	4618      	mov	r0, r3
 8009254:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009266:	f107 0308 	add.w	r3, r7, #8
 800926a:	2218      	movs	r2, #24
 800926c:	2100      	movs	r1, #0
 800926e:	4618      	mov	r0, r3
 8009270:	f000 feb2 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009274:	233f      	movs	r3, #63	; 0x3f
 8009276:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009278:	2392      	movs	r3, #146	; 0x92
 800927a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800927c:	1dfb      	adds	r3, r7, #7
 800927e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009280:	2301      	movs	r3, #1
 8009282:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009284:	f107 0308 	add.w	r3, r7, #8
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fd68 	bl	8009d60 <hci_send_req>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	da01      	bge.n	800929a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009296:	23ff      	movs	r3, #255	; 0xff
 8009298:	e000      	b.n	800929c <aci_gap_configure_whitelist+0x40>
  return status;
 800929a:	79fb      	ldrb	r3, [r7, #7]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3720      	adds	r7, #32
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b0cc      	sub	sp, #304	; 0x130
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4602      	mov	r2, r0
 80092ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80092b4:	801a      	strh	r2, [r3, #0]
 80092b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ba:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80092be:	460a      	mov	r2, r1
 80092c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80092c2:	f107 0310 	add.w	r3, r7, #16
 80092c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80092dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092e4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80092e8:	8812      	ldrh	r2, [r2, #0]
 80092ea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80092ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092f0:	3302      	adds	r3, #2
 80092f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80092f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092fe:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009302:	7812      	ldrb	r2, [r2, #0]
 8009304:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009306:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800930a:	3301      	adds	r3, #1
 800930c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009310:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009314:	2218      	movs	r2, #24
 8009316:	2100      	movs	r1, #0
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fe5d 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800931e:	233f      	movs	r3, #63	; 0x3f
 8009320:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009324:	23a5      	movs	r3, #165	; 0xa5
 8009326:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800932a:	f107 0310 	add.w	r3, r7, #16
 800932e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009336:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800933a:	f107 030f 	add.w	r3, r7, #15
 800933e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009342:	2301      	movs	r3, #1
 8009344:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009348:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800934c:	2100      	movs	r1, #0
 800934e:	4618      	mov	r0, r3
 8009350:	f000 fd06 	bl	8009d60 <hci_send_req>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	da01      	bge.n	800935e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800935a:	23ff      	movs	r3, #255	; 0xff
 800935c:	e004      	b.n	8009368 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800935e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009362:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009366:	781b      	ldrb	r3, [r3, #0]
}
 8009368:	4618      	mov	r0, r3
 800936a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b088      	sub	sp, #32
 8009376:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800937c:	f107 0308 	add.w	r3, r7, #8
 8009380:	2218      	movs	r2, #24
 8009382:	2100      	movs	r1, #0
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fe27 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800938a:	233f      	movs	r3, #63	; 0x3f
 800938c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800938e:	f240 1301 	movw	r3, #257	; 0x101
 8009392:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009394:	1dfb      	adds	r3, r7, #7
 8009396:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009398:	2301      	movs	r3, #1
 800939a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800939c:	f107 0308 	add.w	r3, r7, #8
 80093a0:	2100      	movs	r1, #0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fcdc 	bl	8009d60 <hci_send_req>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	da01      	bge.n	80093b2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80093ae:	23ff      	movs	r3, #255	; 0xff
 80093b0:	e000      	b.n	80093b4 <aci_gatt_init+0x42>
  return status;
 80093b2:	79fb      	ldrb	r3, [r7, #7]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3720      	adds	r7, #32
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80093bc:	b590      	push	{r4, r7, lr}
 80093be:	b0cf      	sub	sp, #316	; 0x13c
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4604      	mov	r4, r0
 80093c4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80093c8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80093cc:	6001      	str	r1, [r0, #0]
 80093ce:	4610      	mov	r0, r2
 80093d0:	4619      	mov	r1, r3
 80093d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093d6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80093da:	4622      	mov	r2, r4
 80093dc:	701a      	strb	r2, [r3, #0]
 80093de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093e2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80093e6:	4602      	mov	r2, r0
 80093e8:	701a      	strb	r2, [r3, #0]
 80093ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093ee:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80093f2:	460a      	mov	r2, r1
 80093f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80093f6:	f107 0310 	add.w	r3, r7, #16
 80093fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80093fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009402:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d00a      	beq.n	8009422 <aci_gatt_add_service+0x66>
 800940c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009410:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	2b02      	cmp	r3, #2
 8009418:	d101      	bne.n	800941e <aci_gatt_add_service+0x62>
 800941a:	2311      	movs	r3, #17
 800941c:	e002      	b.n	8009424 <aci_gatt_add_service+0x68>
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <aci_gatt_add_service+0x68>
 8009422:	2303      	movs	r3, #3
 8009424:	f107 0210 	add.w	r2, r7, #16
 8009428:	4413      	add	r3, r2
 800942a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800942e:	f107 030c 	add.w	r3, r7, #12
 8009432:	2203      	movs	r2, #3
 8009434:	2100      	movs	r1, #0
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fdce 	bl	8009fd8 <Osal_MemSet>
  int index_input = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009442:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009446:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800944a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800944e:	7812      	ldrb	r2, [r2, #0]
 8009450:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009452:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009456:	3301      	adds	r3, #1
 8009458:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800945c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009460:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d002      	beq.n	8009470 <aci_gatt_add_service+0xb4>
 800946a:	2b02      	cmp	r3, #2
 800946c:	d004      	beq.n	8009478 <aci_gatt_add_service+0xbc>
 800946e:	e007      	b.n	8009480 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009470:	2302      	movs	r3, #2
 8009472:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009476:	e005      	b.n	8009484 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009478:	2310      	movs	r3, #16
 800947a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800947e:	e001      	b.n	8009484 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009480:	2397      	movs	r3, #151	; 0x97
 8009482:	e06c      	b.n	800955e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009484:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009488:	1c58      	adds	r0, r3, #1
 800948a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800948e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009492:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009496:	6819      	ldr	r1, [r3, #0]
 8009498:	f000 fd8e 	bl	8009fb8 <Osal_MemCpy>
    index_input += size;
 800949c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80094a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80094a4:	4413      	add	r3, r2
 80094a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80094aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80094b2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80094b6:	7812      	ldrb	r2, [r2, #0]
 80094b8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80094ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094be:	3301      	adds	r3, #1
 80094c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80094c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80094cc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80094d0:	7812      	ldrb	r2, [r2, #0]
 80094d2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80094d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094d8:	3301      	adds	r3, #1
 80094da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094e2:	2218      	movs	r2, #24
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 fd76 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80094ec:	233f      	movs	r3, #63	; 0x3f
 80094ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80094f2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80094f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094fa:	f107 0310 	add.w	r3, r7, #16
 80094fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009506:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800950a:	f107 030c 	add.w	r3, r7, #12
 800950e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009512:	2303      	movs	r3, #3
 8009514:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009518:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800951c:	2100      	movs	r1, #0
 800951e:	4618      	mov	r0, r3
 8009520:	f000 fc1e 	bl	8009d60 <hci_send_req>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	da01      	bge.n	800952e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800952a:	23ff      	movs	r3, #255	; 0xff
 800952c:	e017      	b.n	800955e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800952e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009532:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d005      	beq.n	8009548 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800953c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	e00a      	b.n	800955e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009548:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800954c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009550:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009554:	b29a      	uxth	r2, r3
 8009556:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800955a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009564:	46bd      	mov	sp, r7
 8009566:	bd90      	pop	{r4, r7, pc}

08009568 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009568:	b590      	push	{r4, r7, lr}
 800956a:	b0d1      	sub	sp, #324	; 0x144
 800956c:	af00      	add	r7, sp, #0
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009576:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800957a:	600a      	str	r2, [r1, #0]
 800957c:	4619      	mov	r1, r3
 800957e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009582:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009586:	4622      	mov	r2, r4
 8009588:	801a      	strh	r2, [r3, #0]
 800958a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800958e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009592:	4602      	mov	r2, r0
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800959a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800959e:	460a      	mov	r2, r1
 80095a0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80095a2:	f107 0318 	add.w	r3, r7, #24
 80095a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80095aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80095ae:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d00a      	beq.n	80095ce <aci_gatt_add_char+0x66>
 80095b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80095bc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d101      	bne.n	80095ca <aci_gatt_add_char+0x62>
 80095c6:	2313      	movs	r3, #19
 80095c8:	e002      	b.n	80095d0 <aci_gatt_add_char+0x68>
 80095ca:	2303      	movs	r3, #3
 80095cc:	e000      	b.n	80095d0 <aci_gatt_add_char+0x68>
 80095ce:	2305      	movs	r3, #5
 80095d0:	f107 0218 	add.w	r2, r7, #24
 80095d4:	4413      	add	r3, r2
 80095d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80095da:	f107 0314 	add.w	r3, r7, #20
 80095de:	2203      	movs	r2, #3
 80095e0:	2100      	movs	r1, #0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fcf8 	bl	8009fd8 <Osal_MemSet>
  int index_input = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80095ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80095f2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80095f6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80095fa:	8812      	ldrh	r2, [r2, #0]
 80095fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80095fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009602:	3302      	adds	r3, #2
 8009604:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009608:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800960c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009610:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009614:	7812      	ldrb	r2, [r2, #0]
 8009616:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009618:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800961c:	3301      	adds	r3, #1
 800961e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009622:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009626:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d002      	beq.n	8009636 <aci_gatt_add_char+0xce>
 8009630:	2b02      	cmp	r3, #2
 8009632:	d004      	beq.n	800963e <aci_gatt_add_char+0xd6>
 8009634:	e007      	b.n	8009646 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009636:	2302      	movs	r3, #2
 8009638:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800963c:	e005      	b.n	800964a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800963e:	2310      	movs	r3, #16
 8009640:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009644:	e001      	b.n	800964a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009646:	2397      	movs	r3, #151	; 0x97
 8009648:	e091      	b.n	800976e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800964a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800964e:	1cd8      	adds	r0, r3, #3
 8009650:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009654:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009658:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800965c:	6819      	ldr	r1, [r3, #0]
 800965e:	f000 fcab 	bl	8009fb8 <Osal_MemCpy>
    index_input += size;
 8009662:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009666:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800966a:	4413      	add	r3, r2
 800966c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009670:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009674:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009678:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800967c:	8812      	ldrh	r2, [r2, #0]
 800967e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009680:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009684:	3302      	adds	r3, #2
 8009686:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800968a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800968e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009692:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009694:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009698:	3301      	adds	r3, #1
 800969a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800969e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80096a2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80096a6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80096a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096ac:	3301      	adds	r3, #1
 80096ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80096b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80096b6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80096ba:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80096bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096c0:	3301      	adds	r3, #1
 80096c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80096c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80096ca:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80096ce:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80096d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096d4:	3301      	adds	r3, #1
 80096d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80096da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80096de:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80096e2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80096e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096e8:	3301      	adds	r3, #1
 80096ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80096f2:	2218      	movs	r2, #24
 80096f4:	2100      	movs	r1, #0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 fc6e 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80096fc:	233f      	movs	r3, #63	; 0x3f
 80096fe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009702:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009706:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800970a:	f107 0318 	add.w	r3, r7, #24
 800970e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009712:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009716:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800971a:	f107 0314 	add.w	r3, r7, #20
 800971e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009722:	2303      	movs	r3, #3
 8009724:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009728:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800972c:	2100      	movs	r1, #0
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fb16 	bl	8009d60 <hci_send_req>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	da01      	bge.n	800973e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800973a:	23ff      	movs	r3, #255	; 0xff
 800973c:	e017      	b.n	800976e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800973e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009742:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800974c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	e00a      	b.n	800976e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009758:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800975c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009760:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009764:	b29a      	uxth	r2, r3
 8009766:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800976a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009774:	46bd      	mov	sp, r7
 8009776:	bd90      	pop	{r4, r7, pc}

08009778 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009778:	b5b0      	push	{r4, r5, r7, lr}
 800977a:	b0cc      	sub	sp, #304	; 0x130
 800977c:	af00      	add	r7, sp, #0
 800977e:	4605      	mov	r5, r0
 8009780:	460c      	mov	r4, r1
 8009782:	4610      	mov	r0, r2
 8009784:	4619      	mov	r1, r3
 8009786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800978e:	462a      	mov	r2, r5
 8009790:	801a      	strh	r2, [r3, #0]
 8009792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800979a:	4622      	mov	r2, r4
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80097a6:	4602      	mov	r2, r0
 80097a8:	701a      	strb	r2, [r3, #0]
 80097aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ae:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80097b2:	460a      	mov	r2, r1
 80097b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80097b6:	f107 0310 	add.w	r3, r7, #16
 80097ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80097be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80097d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097d8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80097dc:	8812      	ldrh	r2, [r2, #0]
 80097de:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80097e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097e4:	3302      	adds	r3, #2
 80097e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80097ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097f2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80097f6:	8812      	ldrh	r2, [r2, #0]
 80097f8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80097fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097fe:	3302      	adds	r3, #2
 8009800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009808:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800980c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009810:	7812      	ldrb	r2, [r2, #0]
 8009812:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009814:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009818:	3301      	adds	r3, #1
 800981a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800981e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009822:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009826:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800982a:	7812      	ldrb	r2, [r2, #0]
 800982c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800982e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009832:	3301      	adds	r3, #1
 8009834:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800983c:	1d98      	adds	r0, r3, #6
 800983e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009842:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	461a      	mov	r2, r3
 800984a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800984e:	f000 fbb3 	bl	8009fb8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009856:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009860:	4413      	add	r3, r2
 8009862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800986a:	2218      	movs	r2, #24
 800986c:	2100      	movs	r1, #0
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fbb2 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009874:	233f      	movs	r3, #63	; 0x3f
 8009876:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800987a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800987e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009882:	f107 0310 	add.w	r3, r7, #16
 8009886:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800988a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800988e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009892:	f107 030f 	add.w	r3, r7, #15
 8009896:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800989a:	2301      	movs	r3, #1
 800989c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fa5a 	bl	8009d60 <hci_send_req>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	da01      	bge.n	80098b6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80098b2:	23ff      	movs	r3, #255	; 0xff
 80098b4:	e004      	b.n	80098c0 <aci_gatt_update_char_value+0x148>
  return status;
 80098b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80098be:	781b      	ldrb	r3, [r3, #0]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bdb0      	pop	{r4, r5, r7, pc}

080098ca <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b0cc      	sub	sp, #304	; 0x130
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80098e2:	4602      	mov	r2, r0
 80098e4:	701a      	strb	r2, [r3, #0]
 80098e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80098ee:	460a      	mov	r2, r1
 80098f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80098f2:	f107 0310 	add.w	r3, r7, #16
 80098f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80098fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009902:	2200      	movs	r2, #0
 8009904:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800990c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009910:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009914:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009918:	7812      	ldrb	r2, [r2, #0]
 800991a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800991c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009920:	3301      	adds	r3, #1
 8009922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800992a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800992e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009932:	7812      	ldrb	r2, [r2, #0]
 8009934:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009936:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800993a:	3301      	adds	r3, #1
 800993c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009944:	1c98      	adds	r0, r3, #2
 8009946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800994a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800994e:	781a      	ldrb	r2, [r3, #0]
 8009950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009958:	6819      	ldr	r1, [r3, #0]
 800995a:	f000 fb2d 	bl	8009fb8 <Osal_MemCpy>
  index_input += Length;
 800995e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009962:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800996c:	4413      	add	r3, r2
 800996e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009976:	2218      	movs	r2, #24
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fb2c 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009980:	233f      	movs	r3, #63	; 0x3f
 8009982:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009986:	230c      	movs	r3, #12
 8009988:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800998c:	f107 0310 	add.w	r3, r7, #16
 8009990:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009994:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800999c:	f107 030f 	add.w	r3, r7, #15
 80099a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80099a4:	2301      	movs	r3, #1
 80099a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099ae:	2100      	movs	r1, #0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f9d5 	bl	8009d60 <hci_send_req>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	da01      	bge.n	80099c0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80099bc:	23ff      	movs	r3, #255	; 0xff
 80099be:	e004      	b.n	80099ca <aci_hal_write_config_data+0x100>
  return status;
 80099c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80099c8:	781b      	ldrb	r3, [r3, #0]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b0cc      	sub	sp, #304	; 0x130
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4602      	mov	r2, r0
 80099dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099e0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80099e4:	701a      	strb	r2, [r3, #0]
 80099e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80099ee:	460a      	mov	r2, r1
 80099f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80099f2:	f107 0310 	add.w	r3, r7, #16
 80099f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80099fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a02:	2200      	movs	r2, #0
 8009a04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a14:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009a18:	7812      	ldrb	r2, [r2, #0]
 8009a1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a20:	3301      	adds	r3, #1
 8009a22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a2e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009a32:	7812      	ldrb	r2, [r2, #0]
 8009a34:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a44:	2218      	movs	r2, #24
 8009a46:	2100      	movs	r1, #0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 fac5 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a4e:	233f      	movs	r3, #63	; 0x3f
 8009a50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009a54:	230f      	movs	r3, #15
 8009a56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009a5a:	f107 0310 	add.w	r3, r7, #16
 8009a5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009a62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009a6a:	f107 030f 	add.w	r3, r7, #15
 8009a6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 f96e 	bl	8009d60 <hci_send_req>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	da01      	bge.n	8009a8e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009a8a:	23ff      	movs	r3, #255	; 0xff
 8009a8c:	e004      	b.n	8009a98 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a96:	781b      	ldrb	r3, [r3, #0]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b0cc      	sub	sp, #304	; 0x130
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009ab2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009ab4:	f107 0310 	add.w	r3, r7, #16
 8009ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ac0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ad6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ada:	8812      	ldrh	r2, [r2, #0]
 8009adc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ae8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009aec:	2218      	movs	r2, #24
 8009aee:	2100      	movs	r1, #0
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fa71 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009af6:	233f      	movs	r3, #63	; 0x3f
 8009af8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009afc:	2318      	movs	r3, #24
 8009afe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b02:	f107 0310 	add.w	r3, r7, #16
 8009b06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b12:	f107 030f 	add.w	r3, r7, #15
 8009b16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b24:	2100      	movs	r1, #0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 f91a 	bl	8009d60 <hci_send_req>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	da01      	bge.n	8009b36 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009b32:	23ff      	movs	r3, #255	; 0xff
 8009b34:	e004      	b.n	8009b40 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b3e:	781b      	ldrb	r3, [r3, #0]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b088      	sub	sp, #32
 8009b4e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b54:	f107 0308 	add.w	r3, r7, #8
 8009b58:	2218      	movs	r2, #24
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 fa3b 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x03;
 8009b62:	2303      	movs	r3, #3
 8009b64:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009b66:	2303      	movs	r3, #3
 8009b68:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009b6a:	1dfb      	adds	r3, r7, #7
 8009b6c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b72:	f107 0308 	add.w	r3, r7, #8
 8009b76:	2100      	movs	r1, #0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 f8f1 	bl	8009d60 <hci_send_req>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	da01      	bge.n	8009b88 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009b84:	23ff      	movs	r3, #255	; 0xff
 8009b86:	e000      	b.n	8009b8a <hci_reset+0x40>
  return status;
 8009b88:	79fb      	ldrb	r3, [r7, #7]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009b92:	b590      	push	{r4, r7, lr}
 8009b94:	b0cd      	sub	sp, #308	; 0x134
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	4604      	mov	r4, r0
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ba2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	701a      	strb	r2, [r3, #0]
 8009baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	701a      	strb	r2, [r3, #0]
 8009bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bba:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009bbe:	460a      	mov	r2, r1
 8009bc0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009bc2:	f107 0310 	add.w	r3, r7, #16
 8009bc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009be0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009be4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009be8:	7812      	ldrb	r2, [r2, #0]
 8009bea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bfe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009c02:	7812      	ldrb	r2, [r2, #0]
 8009c04:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c18:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009c1c:	7812      	ldrb	r2, [r2, #0]
 8009c1e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c24:	3301      	adds	r3, #1
 8009c26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c2e:	2218      	movs	r2, #24
 8009c30:	2100      	movs	r1, #0
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 f9d0 	bl	8009fd8 <Osal_MemSet>
  rq.ogf = 0x08;
 8009c38:	2308      	movs	r3, #8
 8009c3a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009c3e:	2331      	movs	r3, #49	; 0x31
 8009c40:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c44:	f107 0310 	add.w	r3, r7, #16
 8009c48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009c54:	f107 030f 	add.w	r3, r7, #15
 8009c58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c66:	2100      	movs	r1, #0
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 f879 	bl	8009d60 <hci_send_req>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da01      	bge.n	8009c78 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009c74:	23ff      	movs	r3, #255	; 0xff
 8009c76:	e004      	b.n	8009c82 <hci_le_set_default_phy+0xf0>
  return status;
 8009c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c80:	781b      	ldrb	r3, [r3, #0]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd90      	pop	{r4, r7, pc}

08009c8c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	4a08      	ldr	r2, [pc, #32]	; (8009cbc <hci_init+0x30>)
 8009c9c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009c9e:	4a08      	ldr	r2, [pc, #32]	; (8009cc0 <hci_init+0x34>)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009ca4:	4806      	ldr	r0, [pc, #24]	; (8009cc0 <hci_init+0x34>)
 8009ca6:	f000 f973 	bl	8009f90 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f8d4 	bl	8009e5c <TlInit>

  return;
 8009cb4:	bf00      	nop
}
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	20001758 	.word	0x20001758
 8009cc0:	20001730 	.word	0x20001730

08009cc4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009cca:	4822      	ldr	r0, [pc, #136]	; (8009d54 <hci_user_evt_proc+0x90>)
 8009ccc:	f000 fbf2 	bl	800a4b4 <LST_is_empty>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d12b      	bne.n	8009d2e <hci_user_evt_proc+0x6a>
 8009cd6:	4b20      	ldr	r3, [pc, #128]	; (8009d58 <hci_user_evt_proc+0x94>)
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d027      	beq.n	8009d2e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009cde:	f107 030c 	add.w	r3, r7, #12
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	481b      	ldr	r0, [pc, #108]	; (8009d54 <hci_user_evt_proc+0x90>)
 8009ce6:	f000 fc74 	bl	800a5d2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009cea:	4b1c      	ldr	r3, [pc, #112]	; (8009d5c <hci_user_evt_proc+0x98>)
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00c      	beq.n	8009d0c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009cfa:	4b18      	ldr	r3, [pc, #96]	; (8009d5c <hci_user_evt_proc+0x98>)
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	1d3a      	adds	r2, r7, #4
 8009d00:	4610      	mov	r0, r2
 8009d02:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009d04:	793a      	ldrb	r2, [r7, #4]
 8009d06:	4b14      	ldr	r3, [pc, #80]	; (8009d58 <hci_user_evt_proc+0x94>)
 8009d08:	701a      	strb	r2, [r3, #0]
 8009d0a:	e002      	b.n	8009d12 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009d0c:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <hci_user_evt_proc+0x94>)
 8009d0e:	2201      	movs	r2, #1
 8009d10:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009d12:	4b11      	ldr	r3, [pc, #68]	; (8009d58 <hci_user_evt_proc+0x94>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 ff19 	bl	800ab54 <TL_MM_EvtDone>
 8009d22:	e004      	b.n	8009d2e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	4619      	mov	r1, r3
 8009d28:	480a      	ldr	r0, [pc, #40]	; (8009d54 <hci_user_evt_proc+0x90>)
 8009d2a:	f000 fbe5 	bl	800a4f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009d2e:	4809      	ldr	r0, [pc, #36]	; (8009d54 <hci_user_evt_proc+0x90>)
 8009d30:	f000 fbc0 	bl	800a4b4 <LST_is_empty>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d107      	bne.n	8009d4a <hci_user_evt_proc+0x86>
 8009d3a:	4b07      	ldr	r3, [pc, #28]	; (8009d58 <hci_user_evt_proc+0x94>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009d42:	4804      	ldr	r0, [pc, #16]	; (8009d54 <hci_user_evt_proc+0x90>)
 8009d44:	f7f9 f9c6 	bl	80030d4 <hci_notify_asynch_evt>
  }


  return;
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
}
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	2000092c 	.word	0x2000092c
 8009d58:	20000938 	.word	0x20000938
 8009d5c:	20001730 	.word	0x20001730

08009d60 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b088      	sub	sp, #32
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	f000 f8cb 	bl	8009f08 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009d72:	2300      	movs	r3, #0
 8009d74:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	885b      	ldrh	r3, [r3, #2]
 8009d7a:	b21b      	sxth	r3, r3
 8009d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d80:	b21a      	sxth	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	029b      	lsls	r3, r3, #10
 8009d88:	b21b      	sxth	r3, r3
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	b21b      	sxth	r3, r3
 8009d8e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	b2d9      	uxtb	r1, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	689a      	ldr	r2, [r3, #8]
 8009d9a:	8bbb      	ldrh	r3, [r7, #28]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 f88d 	bl	8009ebc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009da2:	e04e      	b.n	8009e42 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009da4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009da8:	f7f9 f9ab 	bl	8003102 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009dac:	e043      	b.n	8009e36 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009dae:	f107 030c 	add.w	r3, r7, #12
 8009db2:	4619      	mov	r1, r3
 8009db4:	4828      	ldr	r0, [pc, #160]	; (8009e58 <hci_send_req+0xf8>)
 8009db6:	f000 fc0c 	bl	800a5d2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	7a5b      	ldrb	r3, [r3, #9]
 8009dbe:	2b0f      	cmp	r3, #15
 8009dc0:	d114      	bne.n	8009dec <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	330b      	adds	r3, #11
 8009dc6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	885b      	ldrh	r3, [r3, #2]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	8bba      	ldrh	r2, [r7, #28]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d104      	bne.n	8009dde <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	7812      	ldrb	r2, [r2, #0]
 8009ddc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	785b      	ldrb	r3, [r3, #1]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d027      	beq.n	8009e36 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009de6:	2301      	movs	r3, #1
 8009de8:	77fb      	strb	r3, [r7, #31]
 8009dea:	e024      	b.n	8009e36 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	330b      	adds	r3, #11
 8009df0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	8bba      	ldrh	r2, [r7, #28]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d114      	bne.n	8009e2a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	7a9b      	ldrb	r3, [r3, #10]
 8009e04:	3b03      	subs	r3, #3
 8009e06:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	695a      	ldr	r2, [r3, #20]
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	bfa8      	it	ge
 8009e12:	461a      	movge	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6918      	ldr	r0, [r3, #16]
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	1cd9      	adds	r1, r3, #3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	461a      	mov	r2, r3
 8009e26:	f004 ffab 	bl	800ed80 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009e32:	2301      	movs	r3, #1
 8009e34:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009e36:	4808      	ldr	r0, [pc, #32]	; (8009e58 <hci_send_req+0xf8>)
 8009e38:	f000 fb3c 	bl	800a4b4 <LST_is_empty>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0b5      	beq.n	8009dae <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009e42:	7ffb      	ldrb	r3, [r7, #31]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0ad      	beq.n	8009da4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009e48:	2001      	movs	r0, #1
 8009e4a:	f000 f85d 	bl	8009f08 <NotifyCmdStatus>

  return 0;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3720      	adds	r7, #32
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20001750 	.word	0x20001750

08009e5c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009e64:	480f      	ldr	r0, [pc, #60]	; (8009ea4 <TlInit+0x48>)
 8009e66:	f000 fb15 	bl	800a494 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009e6a:	4a0f      	ldr	r2, [pc, #60]	; (8009ea8 <TlInit+0x4c>)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009e70:	480e      	ldr	r0, [pc, #56]	; (8009eac <TlInit+0x50>)
 8009e72:	f000 fb0f 	bl	800a494 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009e76:	4b0e      	ldr	r3, [pc, #56]	; (8009eb0 <TlInit+0x54>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009e7c:	4b0d      	ldr	r3, [pc, #52]	; (8009eb4 <TlInit+0x58>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00a      	beq.n	8009e9a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009e88:	4b0b      	ldr	r3, [pc, #44]	; (8009eb8 <TlInit+0x5c>)
 8009e8a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009e8c:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <TlInit+0x58>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f107 0208 	add.w	r2, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
  }

  return;
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
}
 8009e9c:	3718      	adds	r7, #24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20001750 	.word	0x20001750
 8009ea8:	20000934 	.word	0x20000934
 8009eac:	2000092c 	.word	0x2000092c
 8009eb0:	20000938 	.word	0x20000938
 8009eb4:	20001730 	.word	0x20001730
 8009eb8:	08009f49 	.word	0x08009f49

08009ebc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	603a      	str	r2, [r7, #0]
 8009ec6:	80fb      	strh	r3, [r7, #6]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009ecc:	4b0c      	ldr	r3, [pc, #48]	; (8009f00 <SendCmd+0x44>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009ed6:	4b0a      	ldr	r3, [pc, #40]	; (8009f00 <SendCmd+0x44>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	797a      	ldrb	r2, [r7, #5]
 8009edc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009ede:	4b08      	ldr	r3, [pc, #32]	; (8009f00 <SendCmd+0x44>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	330c      	adds	r3, #12
 8009ee4:	797a      	ldrb	r2, [r7, #5]
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f004 ff49 	bl	800ed80 <memcpy>

  hciContext.io.Send(0,0);
 8009eee:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <SendCmd+0x48>)
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	4798      	blx	r3

  return;
 8009ef8:	bf00      	nop
}
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20000934 	.word	0x20000934
 8009f04:	20001730 	.word	0x20001730

08009f08 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009f12:	79fb      	ldrb	r3, [r7, #7]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d108      	bne.n	8009f2a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009f18:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <NotifyCmdStatus+0x3c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00d      	beq.n	8009f3c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009f20:	4b08      	ldr	r3, [pc, #32]	; (8009f44 <NotifyCmdStatus+0x3c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2000      	movs	r0, #0
 8009f26:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009f28:	e008      	b.n	8009f3c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009f2a:	4b06      	ldr	r3, [pc, #24]	; (8009f44 <NotifyCmdStatus+0x3c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d004      	beq.n	8009f3c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009f32:	4b04      	ldr	r3, [pc, #16]	; (8009f44 <NotifyCmdStatus+0x3c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2001      	movs	r0, #1
 8009f38:	4798      	blx	r3
  return;
 8009f3a:	bf00      	nop
 8009f3c:	bf00      	nop
}
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	20001758 	.word	0x20001758

08009f48 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	7a5b      	ldrb	r3, [r3, #9]
 8009f54:	2b0f      	cmp	r3, #15
 8009f56:	d003      	beq.n	8009f60 <TlEvtReceived+0x18>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7a5b      	ldrb	r3, [r3, #9]
 8009f5c:	2b0e      	cmp	r3, #14
 8009f5e:	d107      	bne.n	8009f70 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	4809      	ldr	r0, [pc, #36]	; (8009f88 <TlEvtReceived+0x40>)
 8009f64:	f000 faee 	bl	800a544 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f7f9 f8bf 	bl	80030ec <hci_cmd_resp_release>
 8009f6e:	e006      	b.n	8009f7e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4806      	ldr	r0, [pc, #24]	; (8009f8c <TlEvtReceived+0x44>)
 8009f74:	f000 fae6 	bl	800a544 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009f78:	4804      	ldr	r0, [pc, #16]	; (8009f8c <TlEvtReceived+0x44>)
 8009f7a:	f7f9 f8ab 	bl	80030d4 <hci_notify_asynch_evt>
  }

  return;
 8009f7e:	bf00      	nop
}
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20001750 	.word	0x20001750
 8009f8c:	2000092c 	.word	0x2000092c

08009f90 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a05      	ldr	r2, [pc, #20]	; (8009fb0 <hci_register_io_bus+0x20>)
 8009f9c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a04      	ldr	r2, [pc, #16]	; (8009fb4 <hci_register_io_bus+0x24>)
 8009fa2:	611a      	str	r2, [r3, #16]

  return;
 8009fa4:	bf00      	nop
}
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	0800a8cd 	.word	0x0800a8cd
 8009fb4:	0800a935 	.word	0x0800a935

08009fb8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f004 fed9 	bl	800ed80 <memcpy>
 8009fce:	4603      	mov	r3, r0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f004 fed7 	bl	800ed9c <memset>
 8009fee:	4603      	mov	r3, r0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a002:	4b0f      	ldr	r3, [pc, #60]	; (800a040 <OTP_Read+0x48>)
 800a004:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a006:	e002      	b.n	800a00e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3b08      	subs	r3, #8
 800a00c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3307      	adds	r3, #7
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	79fa      	ldrb	r2, [r7, #7]
 800a016:	429a      	cmp	r2, r3
 800a018:	d003      	beq.n	800a022 <OTP_Read+0x2a>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4a09      	ldr	r2, [pc, #36]	; (800a044 <OTP_Read+0x4c>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d1f2      	bne.n	800a008 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3307      	adds	r3, #7
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	79fa      	ldrb	r2, [r7, #7]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d001      	beq.n	800a032 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a032:	68fb      	ldr	r3, [r7, #12]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	1fff73f8 	.word	0x1fff73f8
 800a044:	1fff7000 	.word	0x1fff7000

0800a048 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a050:	f107 030c 	add.w	r3, r7, #12
 800a054:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	212e      	movs	r1, #46	; 0x2e
 800a060:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a064:	f000 f94c 	bl	800a300 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	330b      	adds	r3, #11
 800a06c:	78db      	ldrb	r3, [r3, #3]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3720      	adds	r7, #32
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b088      	sub	sp, #32
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a07e:	f107 030c 	add.w	r3, r7, #12
 800a082:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	210f      	movs	r1, #15
 800a08e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a092:	f000 f935 	bl	800a300 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	330b      	adds	r3, #11
 800a09a:	78db      	ldrb	r3, [r3, #3]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a0ac:	f107 030c 	add.w	r3, r7, #12
 800a0b0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	2110      	movs	r1, #16
 800a0b8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a0bc:	f000 f920 	bl	800a300 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	330b      	adds	r3, #11
 800a0c4:	78db      	ldrb	r3, [r3, #3]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3720      	adds	r7, #32
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b08b      	sub	sp, #44	; 0x2c
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a0f8:	4b4a      	ldr	r3, [pc, #296]	; (800a224 <SHCI_GetWirelessFwInfo+0x154>)
 800a0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a100:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a10a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a44      	ldr	r2, [pc, #272]	; (800a228 <SHCI_GetWirelessFwInfo+0x158>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d10f      	bne.n	800a13c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	617b      	str	r3, [r7, #20]
 800a13a:	e01a      	b.n	800a172 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a144:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a148:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	695b      	ldr	r3, [r3, #20]
 800a158:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	0e1b      	lsrs	r3, r3, #24
 800a176:	b2da      	uxtb	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	0c1b      	lsrs	r3, r3, #16
 800a180:	b2da      	uxtb	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	0a1b      	lsrs	r3, r3, #8
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	091b      	lsrs	r3, r3, #4
 800a194:	b2db      	uxtb	r3, r3
 800a196:	f003 030f 	and.w	r3, r3, #15
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	0e1b      	lsrs	r3, r3, #24
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	0c1b      	lsrs	r3, r3, #16
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	0a1b      	lsrs	r3, r3, #8
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	0e1b      	lsrs	r3, r3, #24
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	0c1b      	lsrs	r3, r3, #16
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	0a1b      	lsrs	r3, r3, #8
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	0e1b      	lsrs	r3, r3, #24
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	0c1b      	lsrs	r3, r3, #16
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	b2da      	uxtb	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	372c      	adds	r7, #44	; 0x2c
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	58004000 	.word	0x58004000
 800a228:	a94656b9 	.word	0xa94656b9

0800a22c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	4a08      	ldr	r2, [pc, #32]	; (800a25c <shci_init+0x30>)
 800a23c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a23e:	4a08      	ldr	r2, [pc, #32]	; (800a260 <shci_init+0x34>)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a244:	4806      	ldr	r0, [pc, #24]	; (800a260 <shci_init+0x34>)
 800a246:	f000 f911 	bl	800a46c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f894 	bl	800a37c <TlInit>

  return;
 800a254:	bf00      	nop
}
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	2000177c 	.word	0x2000177c
 800a260:	2000175c 	.word	0x2000175c

0800a264 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a26a:	4822      	ldr	r0, [pc, #136]	; (800a2f4 <shci_user_evt_proc+0x90>)
 800a26c:	f000 f922 	bl	800a4b4 <LST_is_empty>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d12b      	bne.n	800a2ce <shci_user_evt_proc+0x6a>
 800a276:	4b20      	ldr	r3, [pc, #128]	; (800a2f8 <shci_user_evt_proc+0x94>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d027      	beq.n	800a2ce <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a27e:	f107 030c 	add.w	r3, r7, #12
 800a282:	4619      	mov	r1, r3
 800a284:	481b      	ldr	r0, [pc, #108]	; (800a2f4 <shci_user_evt_proc+0x90>)
 800a286:	f000 f9a4 	bl	800a5d2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a28a:	4b1c      	ldr	r3, [pc, #112]	; (800a2fc <shci_user_evt_proc+0x98>)
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00c      	beq.n	800a2ac <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a296:	2301      	movs	r3, #1
 800a298:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a29a:	4b18      	ldr	r3, [pc, #96]	; (800a2fc <shci_user_evt_proc+0x98>)
 800a29c:	69db      	ldr	r3, [r3, #28]
 800a29e:	1d3a      	adds	r2, r7, #4
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a2a4:	793a      	ldrb	r2, [r7, #4]
 800a2a6:	4b14      	ldr	r3, [pc, #80]	; (800a2f8 <shci_user_evt_proc+0x94>)
 800a2a8:	701a      	strb	r2, [r3, #0]
 800a2aa:	e002      	b.n	800a2b2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a2ac:	4b12      	ldr	r3, [pc, #72]	; (800a2f8 <shci_user_evt_proc+0x94>)
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a2b2:	4b11      	ldr	r3, [pc, #68]	; (800a2f8 <shci_user_evt_proc+0x94>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 fc49 	bl	800ab54 <TL_MM_EvtDone>
 800a2c2:	e004      	b.n	800a2ce <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	480a      	ldr	r0, [pc, #40]	; (800a2f4 <shci_user_evt_proc+0x90>)
 800a2ca:	f000 f915 	bl	800a4f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a2ce:	4809      	ldr	r0, [pc, #36]	; (800a2f4 <shci_user_evt_proc+0x90>)
 800a2d0:	f000 f8f0 	bl	800a4b4 <LST_is_empty>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d107      	bne.n	800a2ea <shci_user_evt_proc+0x86>
 800a2da:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <shci_user_evt_proc+0x94>)
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a2e2:	4804      	ldr	r0, [pc, #16]	; (800a2f4 <shci_user_evt_proc+0x90>)
 800a2e4:	f7f7 f930 	bl	8001548 <shci_notify_asynch_evt>
  }


  return;
 800a2e8:	bf00      	nop
 800a2ea:	bf00      	nop
}
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20000960 	.word	0x20000960
 800a2f8:	20000970 	.word	0x20000970
 800a2fc:	2000175c 	.word	0x2000175c

0800a300 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	60ba      	str	r2, [r7, #8]
 800a308:	607b      	str	r3, [r7, #4]
 800a30a:	4603      	mov	r3, r0
 800a30c:	81fb      	strh	r3, [r7, #14]
 800a30e:	460b      	mov	r3, r1
 800a310:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a312:	2000      	movs	r0, #0
 800a314:	f000 f864 	bl	800a3e0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a318:	4b16      	ldr	r3, [pc, #88]	; (800a374 <shci_send+0x74>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	89fa      	ldrh	r2, [r7, #14]
 800a31e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a322:	4b14      	ldr	r3, [pc, #80]	; (800a374 <shci_send+0x74>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	7b7a      	ldrb	r2, [r7, #13]
 800a328:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a32a:	4b12      	ldr	r3, [pc, #72]	; (800a374 <shci_send+0x74>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	330c      	adds	r3, #12
 800a330:	7b7a      	ldrb	r2, [r7, #13]
 800a332:	68b9      	ldr	r1, [r7, #8]
 800a334:	4618      	mov	r0, r3
 800a336:	f004 fd23 	bl	800ed80 <memcpy>

  shciContext.io.Send(0,0);
 800a33a:	4b0f      	ldr	r3, [pc, #60]	; (800a378 <shci_send+0x78>)
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	2100      	movs	r1, #0
 800a340:	2000      	movs	r0, #0
 800a342:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a344:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a348:	f7f7 f915 	bl	8001576 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f103 0008 	add.w	r0, r3, #8
 800a352:	4b08      	ldr	r3, [pc, #32]	; (800a374 <shci_send+0x74>)
 800a354:	6819      	ldr	r1, [r3, #0]
 800a356:	4b07      	ldr	r3, [pc, #28]	; (800a374 <shci_send+0x74>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	789b      	ldrb	r3, [r3, #2]
 800a35c:	3303      	adds	r3, #3
 800a35e:	461a      	mov	r2, r3
 800a360:	f004 fd0e 	bl	800ed80 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a364:	2001      	movs	r0, #1
 800a366:	f000 f83b 	bl	800a3e0 <Cmd_SetStatus>

  return;
 800a36a:	bf00      	nop
}
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	2000096c 	.word	0x2000096c
 800a378:	2000175c 	.word	0x2000175c

0800a37c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a384:	4a10      	ldr	r2, [pc, #64]	; (800a3c8 <TlInit+0x4c>)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a38a:	4810      	ldr	r0, [pc, #64]	; (800a3cc <TlInit+0x50>)
 800a38c:	f000 f882 	bl	800a494 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a390:	2001      	movs	r0, #1
 800a392:	f000 f825 	bl	800a3e0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a396:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <TlInit+0x54>)
 800a398:	2201      	movs	r2, #1
 800a39a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a39c:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <TlInit+0x58>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00c      	beq.n	800a3be <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a3a8:	4b0b      	ldr	r3, [pc, #44]	; (800a3d8 <TlInit+0x5c>)
 800a3aa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <TlInit+0x60>)
 800a3ae:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a3b0:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <TlInit+0x58>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f107 020c 	add.w	r2, r7, #12
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4798      	blx	r3
  }

  return;
 800a3bc:	bf00      	nop
 800a3be:	bf00      	nop
}
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	2000096c 	.word	0x2000096c
 800a3cc:	20000960 	.word	0x20000960
 800a3d0:	20000970 	.word	0x20000970
 800a3d4:	2000175c 	.word	0x2000175c
 800a3d8:	0800a431 	.word	0x0800a431
 800a3dc:	0800a449 	.word	0x0800a449

0800a3e0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10b      	bne.n	800a408 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a3f0:	4b0d      	ldr	r3, [pc, #52]	; (800a428 <Cmd_SetStatus+0x48>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d003      	beq.n	800a400 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a3f8:	4b0b      	ldr	r3, [pc, #44]	; (800a428 <Cmd_SetStatus+0x48>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <Cmd_SetStatus+0x4c>)
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a406:	e00b      	b.n	800a420 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a408:	4b08      	ldr	r3, [pc, #32]	; (800a42c <Cmd_SetStatus+0x4c>)
 800a40a:	2201      	movs	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a40e:	4b06      	ldr	r3, [pc, #24]	; (800a428 <Cmd_SetStatus+0x48>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d004      	beq.n	800a420 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a416:	4b04      	ldr	r3, [pc, #16]	; (800a428 <Cmd_SetStatus+0x48>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2001      	movs	r0, #1
 800a41c:	4798      	blx	r3
  return;
 800a41e:	bf00      	nop
 800a420:	bf00      	nop
}
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	2000177c 	.word	0x2000177c
 800a42c:	20000968 	.word	0x20000968

0800a430 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a438:	2000      	movs	r0, #0
 800a43a:	f7f7 f891 	bl	8001560 <shci_cmd_resp_release>

  return;
 800a43e:	bf00      	nop
}
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	4805      	ldr	r0, [pc, #20]	; (800a468 <TlUserEvtReceived+0x20>)
 800a454:	f000 f876 	bl	800a544 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a458:	4803      	ldr	r0, [pc, #12]	; (800a468 <TlUserEvtReceived+0x20>)
 800a45a:	f7f7 f875 	bl	8001548 <shci_notify_asynch_evt>

  return;
 800a45e:	bf00      	nop
}
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20000960 	.word	0x20000960

0800a46c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a05      	ldr	r2, [pc, #20]	; (800a48c <shci_register_io_bus+0x20>)
 800a478:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a04      	ldr	r2, [pc, #16]	; (800a490 <shci_register_io_bus+0x24>)
 800a47e:	611a      	str	r2, [r3, #16]

  return;
 800a480:	bf00      	nop
}
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	0800a9e1 	.word	0x0800a9e1
 800a490:	0800aa35 	.word	0x0800aa35

0800a494 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	605a      	str	r2, [r3, #4]
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a4c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4c6:	b672      	cpsid	i
}
 800a4c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d102      	bne.n	800a4da <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	75fb      	strb	r3, [r7, #23]
 800a4d8:	e001      	b.n	800a4de <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	75fb      	strb	r3, [r7, #23]
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f383 8810 	msr	PRIMASK, r3
}
 800a4e8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a502:	f3ef 8310 	mrs	r3, PRIMASK
 800a506:	60fb      	str	r3, [r7, #12]
  return(result);
 800a508:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a50a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a50c:	b672      	cpsid	i
}
 800a50e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	605a      	str	r2, [r3, #4]
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	f383 8810 	msr	PRIMASK, r3
}
 800a536:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a538:	bf00      	nop
 800a53a:	371c      	adds	r7, #28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a54e:	f3ef 8310 	mrs	r3, PRIMASK
 800a552:	60fb      	str	r3, [r7, #12]
  return(result);
 800a554:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a558:	b672      	cpsid	i
}
 800a55a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f383 8810 	msr	PRIMASK, r3
}
 800a582:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a584:	bf00      	nop
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a598:	f3ef 8310 	mrs	r3, PRIMASK
 800a59c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a59e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5a2:	b672      	cpsid	i
}
 800a5a4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	6812      	ldr	r2, [r2, #0]
 800a5ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	6852      	ldr	r2, [r2, #4]
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f383 8810 	msr	PRIMASK, r3
}
 800a5c4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a5c6:	bf00      	nop
 800a5c8:	371c      	adds	r7, #28
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b086      	sub	sp, #24
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a5e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5e6:	b672      	cpsid	i
}
 800a5e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff ffca 	bl	800a590 <LST_remove_node>
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f383 8810 	msr	PRIMASK, r3
}
 800a606:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a608:	bf00      	nop
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a610:	b480      	push	{r7}
 800a612:	af00      	add	r7, sp, #0
  return;
 800a614:	bf00      	nop
}
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a61e:	b480      	push	{r7}
 800a620:	af00      	add	r7, sp, #0
  return;
 800a622:	bf00      	nop
}
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
  return;
 800a630:	bf00      	nop
}
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a63a:	b480      	push	{r7}
 800a63c:	af00      	add	r7, sp, #0
  return;
 800a63e:	bf00      	nop
}
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  return;
 800a64c:	bf00      	nop
}
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a656:	b480      	push	{r7}
 800a658:	af00      	add	r7, sp, #0
  return;
 800a65a:	bf00      	nop
}
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
  return;
 800a668:	bf00      	nop
}
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a672:	b480      	push	{r7}
 800a674:	af00      	add	r7, sp, #0
  return;
 800a676:	bf00      	nop
}
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
  return;
 800a684:	bf00      	nop
}
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a68e:	b480      	push	{r7}
 800a690:	af00      	add	r7, sp, #0
  return;
 800a692:	bf00      	nop
}
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
  return;
 800a6a0:	bf00      	nop
}
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	af00      	add	r7, sp, #0
  return;
 800a6ae:	bf00      	nop
}
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	af00      	add	r7, sp, #0
  return;
 800a6bc:	bf00      	nop
}
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	af00      	add	r7, sp, #0
  return;
 800a6ca:	bf00      	nop
}
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	af00      	add	r7, sp, #0
  return;
 800a6d8:	bf00      	nop
}
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	af00      	add	r7, sp, #0
  return;
 800a6e6:	bf00      	nop
}
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0
  return;
 800a6f4:	bf00      	nop
}
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
	...

0800a700 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a704:	4b04      	ldr	r3, [pc, #16]	; (800a718 <SVCCTL_Init+0x18>)
 800a706:	2200      	movs	r2, #0
 800a708:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a70a:	4b04      	ldr	r3, [pc, #16]	; (800a71c <SVCCTL_Init+0x1c>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a710:	f000 f806 	bl	800a720 <SVCCTL_SvcInit>

  return;
 800a714:	bf00      	nop
}
 800a716:	bd80      	pop	{r7, pc}
 800a718:	2000093c 	.word	0x2000093c
 800a71c:	2000095c 	.word	0x2000095c

0800a720 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	af00      	add	r7, sp, #0
  BAS_Init();
 800a724:	f7ff ff74 	bl	800a610 <BAS_Init>

  BLS_Init();
 800a728:	f7ff ff79 	bl	800a61e <BLS_Init>

  CRS_STM_Init();
 800a72c:	f7ff ff7e 	bl	800a62c <CRS_STM_Init>

  DIS_Init();
 800a730:	f7ff ff83 	bl	800a63a <DIS_Init>

  EDS_STM_Init();
 800a734:	f7ff ff88 	bl	800a648 <EDS_STM_Init>

  HIDS_Init();
 800a738:	f7ff ff8d 	bl	800a656 <HIDS_Init>

  HRS_Init();
 800a73c:	f7ff ff92 	bl	800a664 <HRS_Init>

  HTS_Init();
 800a740:	f7ff ff97 	bl	800a672 <HTS_Init>

  IAS_Init();
 800a744:	f7ff ff9c 	bl	800a680 <IAS_Init>

  LLS_Init();
 800a748:	f7ff ffa1 	bl	800a68e <LLS_Init>

  TPS_Init();
 800a74c:	f7ff ffa6 	bl	800a69c <TPS_Init>

  MOTENV_STM_Init();
 800a750:	f7ff ffab 	bl	800a6aa <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a754:	f7ff ffb0 	bl	800a6b8 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a758:	f7ff ffb5 	bl	800a6c6 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a75c:	f7ff ffba 	bl	800a6d4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a760:	f7ff ffc6 	bl	800a6f0 <BVOPUS_STM_Init>

  MESH_Init();
 800a764:	f7ff ffbd 	bl	800a6e2 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a768:	f7f8 ff6c 	bl	8003644 <SVCCTL_InitCustomSvc>
  
  return;
 800a76c:	bf00      	nop
}
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a778:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800a77a:	7f1b      	ldrb	r3, [r3, #28]
 800a77c:	4619      	mov	r1, r3
 800a77e:	4a08      	ldr	r2, [pc, #32]	; (800a7a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a786:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800a788:	7f1b      	ldrb	r3, [r3, #28]
 800a78a:	3301      	adds	r3, #1
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	4b04      	ldr	r3, [pc, #16]	; (800a7a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800a790:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a792:	bf00      	nop
}
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	2000093c 	.word	0x2000093c

0800a7a4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	2bff      	cmp	r3, #255	; 0xff
 800a7bc:	d125      	bne.n	800a80a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	3302      	adds	r3, #2
 800a7c2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	881b      	ldrh	r3, [r3, #0]
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a7ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7d2:	d118      	bne.n	800a806 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	757b      	strb	r3, [r7, #21]
 800a7d8:	e00d      	b.n	800a7f6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a7da:	7d7b      	ldrb	r3, [r7, #21]
 800a7dc:	4a1a      	ldr	r2, [pc, #104]	; (800a848 <SVCCTL_UserEvtRx+0xa4>)
 800a7de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	4798      	blx	r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d108      	bne.n	800a802 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a7f0:	7d7b      	ldrb	r3, [r7, #21]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	757b      	strb	r3, [r7, #21]
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <SVCCTL_UserEvtRx+0xa4>)
 800a7f8:	7f1b      	ldrb	r3, [r3, #28]
 800a7fa:	7d7a      	ldrb	r2, [r7, #21]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d3ec      	bcc.n	800a7da <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a800:	e002      	b.n	800a808 <SVCCTL_UserEvtRx+0x64>
              break;
 800a802:	bf00      	nop
          break;
 800a804:	e000      	b.n	800a808 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a806:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a808:	e000      	b.n	800a80c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a80a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d00f      	beq.n	800a832 <SVCCTL_UserEvtRx+0x8e>
 800a812:	2b02      	cmp	r3, #2
 800a814:	dc10      	bgt.n	800a838 <SVCCTL_UserEvtRx+0x94>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d002      	beq.n	800a820 <SVCCTL_UserEvtRx+0x7c>
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d006      	beq.n	800a82c <SVCCTL_UserEvtRx+0x88>
 800a81e:	e00b      	b.n	800a838 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7f8 fa39 	bl	8002c98 <SVCCTL_App_Notification>
 800a826:	4603      	mov	r3, r0
 800a828:	75bb      	strb	r3, [r7, #22]
      break;
 800a82a:	e008      	b.n	800a83e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a82c:	2301      	movs	r3, #1
 800a82e:	75bb      	strb	r3, [r7, #22]
      break;
 800a830:	e005      	b.n	800a83e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a832:	2300      	movs	r3, #0
 800a834:	75bb      	strb	r3, [r7, #22]
      break;
 800a836:	e002      	b.n	800a83e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a838:	2301      	movs	r3, #1
 800a83a:	75bb      	strb	r3, [r7, #22]
      break;
 800a83c:	bf00      	nop
  }

  return (return_status);
 800a83e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	2000093c 	.word	0x2000093c

0800a84c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a850:	f7f9 f90e 	bl	8003a70 <HW_IPCC_Enable>

  return;
 800a854:	bf00      	nop
}
 800a856:	bd80      	pop	{r7, pc}

0800a858 <TL_Init>:


void TL_Init( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a85c:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <TL_Init+0x48>)
 800a85e:	4a11      	ldr	r2, [pc, #68]	; (800a8a4 <TL_Init+0x4c>)
 800a860:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a862:	4b0f      	ldr	r3, [pc, #60]	; (800a8a0 <TL_Init+0x48>)
 800a864:	4a10      	ldr	r2, [pc, #64]	; (800a8a8 <TL_Init+0x50>)
 800a866:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a868:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <TL_Init+0x48>)
 800a86a:	4a10      	ldr	r2, [pc, #64]	; (800a8ac <TL_Init+0x54>)
 800a86c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a86e:	4b0c      	ldr	r3, [pc, #48]	; (800a8a0 <TL_Init+0x48>)
 800a870:	4a0f      	ldr	r2, [pc, #60]	; (800a8b0 <TL_Init+0x58>)
 800a872:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a874:	4b0a      	ldr	r3, [pc, #40]	; (800a8a0 <TL_Init+0x48>)
 800a876:	4a0f      	ldr	r2, [pc, #60]	; (800a8b4 <TL_Init+0x5c>)
 800a878:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a87a:	4b09      	ldr	r3, [pc, #36]	; (800a8a0 <TL_Init+0x48>)
 800a87c:	4a0e      	ldr	r2, [pc, #56]	; (800a8b8 <TL_Init+0x60>)
 800a87e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a880:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <TL_Init+0x48>)
 800a882:	4a0e      	ldr	r2, [pc, #56]	; (800a8bc <TL_Init+0x64>)
 800a884:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a886:	4b06      	ldr	r3, [pc, #24]	; (800a8a0 <TL_Init+0x48>)
 800a888:	4a0d      	ldr	r2, [pc, #52]	; (800a8c0 <TL_Init+0x68>)
 800a88a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a88c:	4b04      	ldr	r3, [pc, #16]	; (800a8a0 <TL_Init+0x48>)
 800a88e:	4a0d      	ldr	r2, [pc, #52]	; (800a8c4 <TL_Init+0x6c>)
 800a890:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a892:	4b03      	ldr	r3, [pc, #12]	; (800a8a0 <TL_Init+0x48>)
 800a894:	4a0c      	ldr	r2, [pc, #48]	; (800a8c8 <TL_Init+0x70>)
 800a896:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a898:	f7f9 f8fe 	bl	8003a98 <HW_IPCC_Init>

  return;
 800a89c:	bf00      	nop
}
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	20030000 	.word	0x20030000
 800a8a4:	20030134 	.word	0x20030134
 800a8a8:	20030154 	.word	0x20030154
 800a8ac:	20030164 	.word	0x20030164
 800a8b0:	20030174 	.word	0x20030174
 800a8b4:	2003017c 	.word	0x2003017c
 800a8b8:	20030184 	.word	0x20030184
 800a8bc:	2003018c 	.word	0x2003018c
 800a8c0:	200301a8 	.word	0x200301a8
 800a8c4:	200301ac 	.word	0x200301ac
 800a8c8:	200301b8 	.word	0x200301b8

0800a8cc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a8d8:	4811      	ldr	r0, [pc, #68]	; (800a920 <TL_BLE_Init+0x54>)
 800a8da:	f7ff fddb 	bl	800a494 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a8de:	4b11      	ldr	r3, [pc, #68]	; (800a924 <TL_BLE_Init+0x58>)
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	689a      	ldr	r2, [r3, #8]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	4a0c      	ldr	r2, [pc, #48]	; (800a928 <TL_BLE_Init+0x5c>)
 800a8f8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	4a08      	ldr	r2, [pc, #32]	; (800a920 <TL_BLE_Init+0x54>)
 800a8fe:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a900:	f7f9 f8e0 	bl	8003ac4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a08      	ldr	r2, [pc, #32]	; (800a92c <TL_BLE_Init+0x60>)
 800a90a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	4a07      	ldr	r2, [pc, #28]	; (800a930 <TL_BLE_Init+0x64>)
 800a912:	6013      	str	r3, [r2, #0]

  return 0;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	200301d4 	.word	0x200301d4
 800a924:	20030000 	.word	0x20030000
 800a928:	20000918 	.word	0x20000918
 800a92c:	20001788 	.word	0x20001788
 800a930:	2000178c 	.word	0x2000178c

0800a934 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a940:	4b09      	ldr	r3, [pc, #36]	; (800a968 <TL_BLE_SendCmd+0x34>)
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2201      	movs	r2, #1
 800a948:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a94a:	4b07      	ldr	r3, [pc, #28]	; (800a968 <TL_BLE_SendCmd+0x34>)
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4619      	mov	r1, r3
 800a952:	2001      	movs	r0, #1
 800a954:	f000 f96c 	bl	800ac30 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a958:	f7f9 f8be 	bl	8003ad8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20030000 	.word	0x20030000

0800a96c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a972:	e01c      	b.n	800a9ae <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a974:	1d3b      	adds	r3, r7, #4
 800a976:	4619      	mov	r1, r3
 800a978:	4812      	ldr	r0, [pc, #72]	; (800a9c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a97a:	f7ff fe2a 	bl	800a5d2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	7a5b      	ldrb	r3, [r3, #9]
 800a982:	2b0f      	cmp	r3, #15
 800a984:	d003      	beq.n	800a98e <HW_IPCC_BLE_RxEvtNot+0x22>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	7a5b      	ldrb	r3, [r3, #9]
 800a98a:	2b0e      	cmp	r3, #14
 800a98c:	d105      	bne.n	800a99a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4619      	mov	r1, r3
 800a992:	2002      	movs	r0, #2
 800a994:	f000 f94c 	bl	800ac30 <OutputDbgTrace>
 800a998:	e004      	b.n	800a9a4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4619      	mov	r1, r3
 800a99e:	2003      	movs	r0, #3
 800a9a0:	f000 f946 	bl	800ac30 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a9a4:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a9ae:	4805      	ldr	r0, [pc, #20]	; (800a9c4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a9b0:	f7ff fd80 	bl	800a4b4 <LST_is_empty>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d0dc      	beq.n	800a974 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a9ba:	bf00      	nop
}
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	200301d4 	.word	0x200301d4
 800a9c8:	20001788 	.word	0x20001788

0800a9cc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a9d0:	4b02      	ldr	r3, [pc, #8]	; (800a9dc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4798      	blx	r3

  return;
 800a9d6:	bf00      	nop
}
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	2000178c 	.word	0x2000178c

0800a9e0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a9ec:	480d      	ldr	r0, [pc, #52]	; (800aa24 <TL_SYS_Init+0x44>)
 800a9ee:	f7ff fd51 	bl	800a494 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	; (800aa28 <TL_SYS_Init+0x48>)
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	4a08      	ldr	r2, [pc, #32]	; (800aa24 <TL_SYS_Init+0x44>)
 800aa04:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800aa06:	f7f9 f889 	bl	8003b1c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a07      	ldr	r2, [pc, #28]	; (800aa2c <TL_SYS_Init+0x4c>)
 800aa10:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	4a06      	ldr	r2, [pc, #24]	; (800aa30 <TL_SYS_Init+0x50>)
 800aa18:	6013      	str	r3, [r2, #0]

  return 0;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	200301dc 	.word	0x200301dc
 800aa28:	20030000 	.word	0x20030000
 800aa2c:	20001790 	.word	0x20001790
 800aa30:	20001794 	.word	0x20001794

0800aa34 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800aa40:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <TL_SYS_SendCmd+0x34>)
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2210      	movs	r2, #16
 800aa48:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800aa4a:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <TL_SYS_SendCmd+0x34>)
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4619      	mov	r1, r3
 800aa52:	2004      	movs	r0, #4
 800aa54:	f000 f8ec 	bl	800ac30 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800aa58:	f7f9 f86a 	bl	8003b30 <HW_IPCC_SYS_SendCmd>

  return 0;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	20030000 	.word	0x20030000

0800aa6c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4619      	mov	r1, r3
 800aa78:	2005      	movs	r0, #5
 800aa7a:	f000 f8d9 	bl	800ac30 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a03      	ldr	r2, [pc, #12]	; (800aa90 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aa84:	68d2      	ldr	r2, [r2, #12]
 800aa86:	6812      	ldr	r2, [r2, #0]
 800aa88:	4610      	mov	r0, r2
 800aa8a:	4798      	blx	r3

  return;
 800aa8c:	bf00      	nop
}
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	20030000 	.word	0x20030000
 800aa94:	20001790 	.word	0x20001790

0800aa98 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aa9e:	e00e      	b.n	800aabe <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800aaa0:	1d3b      	adds	r3, r7, #4
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	480b      	ldr	r0, [pc, #44]	; (800aad4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aaa6:	f7ff fd94 	bl	800a5d2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4619      	mov	r1, r3
 800aaae:	2006      	movs	r0, #6
 800aab0:	f000 f8be 	bl	800ac30 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800aab4:	4b08      	ldr	r3, [pc, #32]	; (800aad8 <HW_IPCC_SYS_EvtNot+0x40>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	4610      	mov	r0, r2
 800aabc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aabe:	4805      	ldr	r0, [pc, #20]	; (800aad4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aac0:	f7ff fcf8 	bl	800a4b4 <LST_is_empty>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0ea      	beq.n	800aaa0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800aaca:	bf00      	nop
}
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	200301dc 	.word	0x200301dc
 800aad8:	20001794 	.word	0x20001794

0800aadc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800aae4:	4817      	ldr	r0, [pc, #92]	; (800ab44 <TL_MM_Init+0x68>)
 800aae6:	f7ff fcd5 	bl	800a494 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800aaea:	4817      	ldr	r0, [pc, #92]	; (800ab48 <TL_MM_Init+0x6c>)
 800aaec:	f7ff fcd2 	bl	800a494 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800aaf0:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <TL_MM_Init+0x70>)
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	4a16      	ldr	r2, [pc, #88]	; (800ab50 <TL_MM_Init+0x74>)
 800aaf6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800aaf8:	4b15      	ldr	r3, [pc, #84]	; (800ab50 <TL_MM_Init+0x74>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6892      	ldr	r2, [r2, #8]
 800ab00:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ab02:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <TL_MM_Init+0x74>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	68d2      	ldr	r2, [r2, #12]
 800ab0a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ab0c:	4b10      	ldr	r3, [pc, #64]	; (800ab50 <TL_MM_Init+0x74>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a0c      	ldr	r2, [pc, #48]	; (800ab44 <TL_MM_Init+0x68>)
 800ab12:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ab14:	4b0e      	ldr	r3, [pc, #56]	; (800ab50 <TL_MM_Init+0x74>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	6812      	ldr	r2, [r2, #0]
 800ab1c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ab1e:	4b0c      	ldr	r3, [pc, #48]	; (800ab50 <TL_MM_Init+0x74>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	6852      	ldr	r2, [r2, #4]
 800ab26:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ab28:	4b09      	ldr	r3, [pc, #36]	; (800ab50 <TL_MM_Init+0x74>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6912      	ldr	r2, [r2, #16]
 800ab30:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ab32:	4b07      	ldr	r3, [pc, #28]	; (800ab50 <TL_MM_Init+0x74>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	6952      	ldr	r2, [r2, #20]
 800ab3a:	619a      	str	r2, [r3, #24]

  return;
 800ab3c:	bf00      	nop
}
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	200301c4 	.word	0x200301c4
 800ab48:	20001780 	.word	0x20001780
 800ab4c:	20030000 	.word	0x20030000
 800ab50:	20001798 	.word	0x20001798

0800ab54 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ab5c:	6879      	ldr	r1, [r7, #4]
 800ab5e:	4807      	ldr	r0, [pc, #28]	; (800ab7c <TL_MM_EvtDone+0x28>)
 800ab60:	f7ff fcf0 	bl	800a544 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	2000      	movs	r0, #0
 800ab68:	f000 f862 	bl	800ac30 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ab6c:	4804      	ldr	r0, [pc, #16]	; (800ab80 <TL_MM_EvtDone+0x2c>)
 800ab6e:	f7f9 f805 	bl	8003b7c <HW_IPCC_MM_SendFreeBuf>

  return;
 800ab72:	bf00      	nop
}
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20001780 	.word	0x20001780
 800ab80:	0800ab85 	.word	0x0800ab85

0800ab84 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ab8a:	e00c      	b.n	800aba6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ab8c:	1d3b      	adds	r3, r7, #4
 800ab8e:	4619      	mov	r1, r3
 800ab90:	480a      	ldr	r0, [pc, #40]	; (800abbc <SendFreeBuf+0x38>)
 800ab92:	f7ff fd1e 	bl	800a5d2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ab96:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <SendFreeBuf+0x3c>)
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	4611      	mov	r1, r2
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff fccf 	bl	800a544 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800aba6:	4805      	ldr	r0, [pc, #20]	; (800abbc <SendFreeBuf+0x38>)
 800aba8:	f7ff fc84 	bl	800a4b4 <LST_is_empty>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0ec      	beq.n	800ab8c <SendFreeBuf+0x8>
  }

  return;
 800abb2:	bf00      	nop
}
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	20001780 	.word	0x20001780
 800abc0:	20030000 	.word	0x20030000

0800abc4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800abc8:	4805      	ldr	r0, [pc, #20]	; (800abe0 <TL_TRACES_Init+0x1c>)
 800abca:	f7ff fc63 	bl	800a494 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800abce:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <TL_TRACES_Init+0x20>)
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	4a03      	ldr	r2, [pc, #12]	; (800abe0 <TL_TRACES_Init+0x1c>)
 800abd4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800abd6:	f7f9 f807 	bl	8003be8 <HW_IPCC_TRACES_Init>

  return;
 800abda:	bf00      	nop
}
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	200301cc 	.word	0x200301cc
 800abe4:	20030000 	.word	0x20030000

0800abe8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800abee:	e008      	b.n	800ac02 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800abf0:	1d3b      	adds	r3, r7, #4
 800abf2:	4619      	mov	r1, r3
 800abf4:	4808      	ldr	r0, [pc, #32]	; (800ac18 <HW_IPCC_TRACES_EvtNot+0x30>)
 800abf6:	f7ff fcec 	bl	800a5d2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f000 f80d 	bl	800ac1c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ac02:	4805      	ldr	r0, [pc, #20]	; (800ac18 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ac04:	f7ff fc56 	bl	800a4b4 <LST_is_empty>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0f0      	beq.n	800abf0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ac0e:	bf00      	nop
}
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	200301cc 	.word	0x200301cc

0800ac1c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	6039      	str	r1, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ac3c:	79fb      	ldrb	r3, [r7, #7]
 800ac3e:	2b06      	cmp	r3, #6
 800ac40:	d845      	bhi.n	800acce <OutputDbgTrace+0x9e>
 800ac42:	a201      	add	r2, pc, #4	; (adr r2, 800ac48 <OutputDbgTrace+0x18>)
 800ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac48:	0800ac65 	.word	0x0800ac65
 800ac4c:	0800ac89 	.word	0x0800ac89
 800ac50:	0800ac8f 	.word	0x0800ac8f
 800ac54:	0800aca3 	.word	0x0800aca3
 800ac58:	0800acaf 	.word	0x0800acaf
 800ac5c:	0800acb5 	.word	0x0800acb5
 800ac60:	0800acc3 	.word	0x0800acc3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	7a5b      	ldrb	r3, [r3, #9]
 800ac6c:	2bff      	cmp	r3, #255	; 0xff
 800ac6e:	d005      	beq.n	800ac7c <OutputDbgTrace+0x4c>
 800ac70:	2bff      	cmp	r3, #255	; 0xff
 800ac72:	dc05      	bgt.n	800ac80 <OutputDbgTrace+0x50>
 800ac74:	2b0e      	cmp	r3, #14
 800ac76:	d005      	beq.n	800ac84 <OutputDbgTrace+0x54>
 800ac78:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ac7a:	e001      	b.n	800ac80 <OutputDbgTrace+0x50>
          break;
 800ac7c:	bf00      	nop
 800ac7e:	e027      	b.n	800acd0 <OutputDbgTrace+0xa0>
          break;
 800ac80:	bf00      	nop
 800ac82:	e025      	b.n	800acd0 <OutputDbgTrace+0xa0>
          break;
 800ac84:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ac86:	e023      	b.n	800acd0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ac8c:	e020      	b.n	800acd0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	7a5b      	ldrb	r3, [r3, #9]
 800ac96:	2b0e      	cmp	r3, #14
 800ac98:	d001      	beq.n	800ac9e <OutputDbgTrace+0x6e>
 800ac9a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ac9c:	e000      	b.n	800aca0 <OutputDbgTrace+0x70>
          break;
 800ac9e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aca0:	e016      	b.n	800acd0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	7a5b      	ldrb	r3, [r3, #9]
 800acaa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800acac:	e010      	b.n	800acd0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800acb2:	e00d      	b.n	800acd0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	7a5b      	ldrb	r3, [r3, #9]
 800acbc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800acbe:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800acc0:	e006      	b.n	800acd0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	7a5b      	ldrb	r3, [r3, #9]
 800acca:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800accc:	e000      	b.n	800acd0 <OutputDbgTrace+0xa0>

    default:
      break;
 800acce:	bf00      	nop
  }

  return;
 800acd0:	bf00      	nop
}
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <UTIL_LPM_Init+0x1c>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <UTIL_LPM_Init+0x20>)
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800acec:	bf00      	nop
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	2000179c 	.word	0x2000179c
 800acfc:	200017a0 	.word	0x200017a0

0800ad00 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ad10:	613b      	str	r3, [r7, #16]
  return(result);
 800ad12:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ad14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad16:	b672      	cpsid	i
}
 800ad18:	bf00      	nop
  
  switch(state)
 800ad1a:	78fb      	ldrb	r3, [r7, #3]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d008      	beq.n	800ad32 <UTIL_LPM_SetOffMode+0x32>
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d10e      	bne.n	800ad42 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ad24:	4b0d      	ldr	r3, [pc, #52]	; (800ad5c <UTIL_LPM_SetOffMode+0x5c>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	4a0b      	ldr	r2, [pc, #44]	; (800ad5c <UTIL_LPM_SetOffMode+0x5c>)
 800ad2e:	6013      	str	r3, [r2, #0]
      break;
 800ad30:	e008      	b.n	800ad44 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	43da      	mvns	r2, r3
 800ad36:	4b09      	ldr	r3, [pc, #36]	; (800ad5c <UTIL_LPM_SetOffMode+0x5c>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	4a07      	ldr	r2, [pc, #28]	; (800ad5c <UTIL_LPM_SetOffMode+0x5c>)
 800ad3e:	6013      	str	r3, [r2, #0]
      break;
 800ad40:	e000      	b.n	800ad44 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ad42:	bf00      	nop
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f383 8810 	msr	PRIMASK, r3
}
 800ad4e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ad50:	bf00      	nop
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	200017a0 	.word	0x200017a0

0800ad60 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b090      	sub	sp, #64	; 0x40
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ad68:	4b73      	ldr	r3, [pc, #460]	; (800af38 <UTIL_SEQ_Run+0x1d8>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800ad6e:	4b72      	ldr	r3, [pc, #456]	; (800af38 <UTIL_SEQ_Run+0x1d8>)
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4013      	ands	r3, r2
 800ad76:	4a70      	ldr	r2, [pc, #448]	; (800af38 <UTIL_SEQ_Run+0x1d8>)
 800ad78:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800ad7a:	4b70      	ldr	r3, [pc, #448]	; (800af3c <UTIL_SEQ_Run+0x1dc>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800ad80:	4b6f      	ldr	r3, [pc, #444]	; (800af40 <UTIL_SEQ_Run+0x1e0>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800ad86:	4b6f      	ldr	r3, [pc, #444]	; (800af44 <UTIL_SEQ_Run+0x1e4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800ad8c:	4b6e      	ldr	r3, [pc, #440]	; (800af48 <UTIL_SEQ_Run+0x1e8>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ad92:	e08d      	b.n	800aeb0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ad98:	e002      	b.n	800ada0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800ad9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ada0:	4a6a      	ldr	r2, [pc, #424]	; (800af4c <UTIL_SEQ_Run+0x1ec>)
 800ada2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ada4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	401a      	ands	r2, r3
 800adac:	4b62      	ldr	r3, [pc, #392]	; (800af38 <UTIL_SEQ_Run+0x1d8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4013      	ands	r3, r2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d0f1      	beq.n	800ad9a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800adb6:	4a65      	ldr	r2, [pc, #404]	; (800af4c <UTIL_SEQ_Run+0x1ec>)
 800adb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	401a      	ands	r2, r3
 800adc2:	4b5d      	ldr	r3, [pc, #372]	; (800af38 <UTIL_SEQ_Run+0x1d8>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4013      	ands	r3, r2
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800adca:	4a60      	ldr	r2, [pc, #384]	; (800af4c <UTIL_SEQ_Run+0x1ec>)
 800adcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	4413      	add	r3, r2
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	4013      	ands	r3, r2
 800add8:	2b00      	cmp	r3, #0
 800adda:	d106      	bne.n	800adea <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800addc:	4a5b      	ldr	r2, [pc, #364]	; (800af4c <UTIL_SEQ_Run+0x1ec>)
 800adde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade0:	00db      	lsls	r3, r3, #3
 800ade2:	4413      	add	r3, r2
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295
 800ade8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800adea:	4a58      	ldr	r2, [pc, #352]	; (800af4c <UTIL_SEQ_Run+0x1ec>)
 800adec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	4413      	add	r3, r2
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf6:	4013      	ands	r3, r2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 f9b3 	bl	800b164 <SEQ_BitPosition>
 800adfe:	4603      	mov	r3, r0
 800ae00:	461a      	mov	r2, r3
 800ae02:	4b53      	ldr	r3, [pc, #332]	; (800af50 <UTIL_SEQ_Run+0x1f0>)
 800ae04:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ae06:	4a51      	ldr	r2, [pc, #324]	; (800af4c <UTIL_SEQ_Run+0x1ec>)
 800ae08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0a:	00db      	lsls	r3, r3, #3
 800ae0c:	4413      	add	r3, r2
 800ae0e:	685a      	ldr	r2, [r3, #4]
 800ae10:	4b4f      	ldr	r3, [pc, #316]	; (800af50 <UTIL_SEQ_Run+0x1f0>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2101      	movs	r1, #1
 800ae16:	fa01 f303 	lsl.w	r3, r1, r3
 800ae1a:	43db      	mvns	r3, r3
 800ae1c:	401a      	ands	r2, r3
 800ae1e:	494b      	ldr	r1, [pc, #300]	; (800af4c <UTIL_SEQ_Run+0x1ec>)
 800ae20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	440b      	add	r3, r1
 800ae26:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae28:	f3ef 8310 	mrs	r3, PRIMASK
 800ae2c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae2e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ae30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae32:	b672      	cpsid	i
}
 800ae34:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ae36:	4b46      	ldr	r3, [pc, #280]	; (800af50 <UTIL_SEQ_Run+0x1f0>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae40:	43da      	mvns	r2, r3
 800ae42:	4b3e      	ldr	r3, [pc, #248]	; (800af3c <UTIL_SEQ_Run+0x1dc>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4013      	ands	r3, r2
 800ae48:	4a3c      	ldr	r2, [pc, #240]	; (800af3c <UTIL_SEQ_Run+0x1dc>)
 800ae4a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae50:	e013      	b.n	800ae7a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ae52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae54:	3b01      	subs	r3, #1
 800ae56:	4a3d      	ldr	r2, [pc, #244]	; (800af4c <UTIL_SEQ_Run+0x1ec>)
 800ae58:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ae5c:	4b3c      	ldr	r3, [pc, #240]	; (800af50 <UTIL_SEQ_Run+0x1f0>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2201      	movs	r2, #1
 800ae62:	fa02 f303 	lsl.w	r3, r2, r3
 800ae66:	43da      	mvns	r2, r3
 800ae68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	400a      	ands	r2, r1
 800ae6e:	4937      	ldr	r1, [pc, #220]	; (800af4c <UTIL_SEQ_Run+0x1ec>)
 800ae70:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ae74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae76:	3b01      	subs	r3, #1
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e8      	bne.n	800ae52 <UTIL_SEQ_Run+0xf2>
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f383 8810 	msr	PRIMASK, r3
}
 800ae8a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800ae8c:	4b30      	ldr	r3, [pc, #192]	; (800af50 <UTIL_SEQ_Run+0x1f0>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a30      	ldr	r2, [pc, #192]	; (800af54 <UTIL_SEQ_Run+0x1f4>)
 800ae92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae96:	4798      	blx	r3

    local_taskset = TaskSet;
 800ae98:	4b28      	ldr	r3, [pc, #160]	; (800af3c <UTIL_SEQ_Run+0x1dc>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800ae9e:	4b28      	ldr	r3, [pc, #160]	; (800af40 <UTIL_SEQ_Run+0x1e0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800aea4:	4b27      	ldr	r3, [pc, #156]	; (800af44 <UTIL_SEQ_Run+0x1e4>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800aeaa:	4b27      	ldr	r3, [pc, #156]	; (800af48 <UTIL_SEQ_Run+0x1e8>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800aeb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	401a      	ands	r2, r3
 800aeb6:	4b20      	ldr	r3, [pc, #128]	; (800af38 <UTIL_SEQ_Run+0x1d8>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4013      	ands	r3, r2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d005      	beq.n	800aecc <UTIL_SEQ_Run+0x16c>
 800aec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec4:	4013      	ands	r3, r2
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f43f af64 	beq.w	800ad94 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800aecc:	4b20      	ldr	r3, [pc, #128]	; (800af50 <UTIL_SEQ_Run+0x1f0>)
 800aece:	f04f 32ff 	mov.w	r2, #4294967295
 800aed2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800aed4:	f000 f938 	bl	800b148 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aed8:	f3ef 8310 	mrs	r3, PRIMASK
 800aedc:	613b      	str	r3, [r7, #16]
  return(result);
 800aede:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800aee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800aee2:	b672      	cpsid	i
}
 800aee4:	bf00      	nop
  local_taskset = TaskSet;
 800aee6:	4b15      	ldr	r3, [pc, #84]	; (800af3c <UTIL_SEQ_Run+0x1dc>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800aeec:	4b14      	ldr	r3, [pc, #80]	; (800af40 <UTIL_SEQ_Run+0x1e0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800aef2:	4b14      	ldr	r3, [pc, #80]	; (800af44 <UTIL_SEQ_Run+0x1e4>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800aef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	401a      	ands	r2, r3
 800aefe:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <UTIL_SEQ_Run+0x1d8>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4013      	ands	r3, r2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d107      	bne.n	800af18 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800af08:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <UTIL_SEQ_Run+0x1e8>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0e:	4013      	ands	r3, r2
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800af14:	f7f6 fb04 	bl	8001520 <UTIL_SEQ_Idle>
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f383 8810 	msr	PRIMASK, r3
}
 800af22:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800af24:	f000 f917 	bl	800b156 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800af28:	4a03      	ldr	r2, [pc, #12]	; (800af38 <UTIL_SEQ_Run+0x1d8>)
 800af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2c:	6013      	str	r3, [r2, #0]

  return;
 800af2e:	bf00      	nop
}
 800af30:	3740      	adds	r7, #64	; 0x40
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20000030 	.word	0x20000030
 800af3c:	200017a4 	.word	0x200017a4
 800af40:	200017a8 	.word	0x200017a8
 800af44:	2000002c 	.word	0x2000002c
 800af48:	200017ac 	.word	0x200017ac
 800af4c:	20001834 	.word	0x20001834
 800af50:	200017b0 	.word	0x200017b0
 800af54:	200017b4 	.word	0x200017b4

0800af58 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af64:	f3ef 8310 	mrs	r3, PRIMASK
 800af68:	617b      	str	r3, [r7, #20]
  return(result);
 800af6a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800af6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800af6e:	b672      	cpsid	i
}
 800af70:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f000 f8f6 	bl	800b164 <SEQ_BitPosition>
 800af78:	4603      	mov	r3, r0
 800af7a:	4619      	mov	r1, r3
 800af7c:	4a06      	ldr	r2, [pc, #24]	; (800af98 <UTIL_SEQ_RegTask+0x40>)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	f383 8810 	msr	PRIMASK, r3
}
 800af8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800af90:	bf00      	nop
}
 800af92:	3720      	adds	r7, #32
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	200017b4 	.word	0x200017b4

0800af9c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa6:	f3ef 8310 	mrs	r3, PRIMASK
 800afaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800afac:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800afae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afb0:	b672      	cpsid	i
}
 800afb2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800afb4:	4b0d      	ldr	r3, [pc, #52]	; (800afec <UTIL_SEQ_SetTask+0x50>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4313      	orrs	r3, r2
 800afbc:	4a0b      	ldr	r2, [pc, #44]	; (800afec <UTIL_SEQ_SetTask+0x50>)
 800afbe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800afc0:	4a0b      	ldr	r2, [pc, #44]	; (800aff0 <UTIL_SEQ_SetTask+0x54>)
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	431a      	orrs	r2, r3
 800afcc:	4908      	ldr	r1, [pc, #32]	; (800aff0 <UTIL_SEQ_SetTask+0x54>)
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f383 8810 	msr	PRIMASK, r3
}
 800afde:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800afe0:	bf00      	nop
}
 800afe2:	371c      	adds	r7, #28
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr
 800afec:	200017a4 	.word	0x200017a4
 800aff0:	20001834 	.word	0x20001834

0800aff4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800affc:	f3ef 8310 	mrs	r3, PRIMASK
 800b000:	60fb      	str	r3, [r7, #12]
  return(result);
 800b002:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b006:	b672      	cpsid	i
}
 800b008:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	43da      	mvns	r2, r3
 800b00e:	4b08      	ldr	r3, [pc, #32]	; (800b030 <UTIL_SEQ_PauseTask+0x3c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4013      	ands	r3, r2
 800b014:	4a06      	ldr	r2, [pc, #24]	; (800b030 <UTIL_SEQ_PauseTask+0x3c>)
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f383 8810 	msr	PRIMASK, r3
}
 800b022:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b024:	bf00      	nop
}
 800b026:	371c      	adds	r7, #28
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	2000002c 	.word	0x2000002c

0800b034 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b03c:	f3ef 8310 	mrs	r3, PRIMASK
 800b040:	60fb      	str	r3, [r7, #12]
  return(result);
 800b042:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b044:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b046:	b672      	cpsid	i
}
 800b048:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b04a:	4b09      	ldr	r3, [pc, #36]	; (800b070 <UTIL_SEQ_ResumeTask+0x3c>)
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4313      	orrs	r3, r2
 800b052:	4a07      	ldr	r2, [pc, #28]	; (800b070 <UTIL_SEQ_ResumeTask+0x3c>)
 800b054:	6013      	str	r3, [r2, #0]
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f383 8810 	msr	PRIMASK, r3
}
 800b060:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b062:	bf00      	nop
}
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	2000002c 	.word	0x2000002c

0800b074 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b07c:	f3ef 8310 	mrs	r3, PRIMASK
 800b080:	60fb      	str	r3, [r7, #12]
  return(result);
 800b082:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b084:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b086:	b672      	cpsid	i
}
 800b088:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <UTIL_SEQ_SetEvt+0x3c>)
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4313      	orrs	r3, r2
 800b092:	4a07      	ldr	r2, [pc, #28]	; (800b0b0 <UTIL_SEQ_SetEvt+0x3c>)
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f383 8810 	msr	PRIMASK, r3
}
 800b0a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b0a2:	bf00      	nop
}
 800b0a4:	371c      	adds	r7, #28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	200017a8 	.word	0x200017a8

0800b0b4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b088      	sub	sp, #32
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b0bc:	4b1f      	ldr	r3, [pc, #124]	; (800b13c <UTIL_SEQ_WaitEvt+0x88>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b0c2:	4b1e      	ldr	r3, [pc, #120]	; (800b13c <UTIL_SEQ_WaitEvt+0x88>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ca:	d102      	bne.n	800b0d2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	61fb      	str	r3, [r7, #28]
 800b0d0:	e005      	b.n	800b0de <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b0d2:	4b1a      	ldr	r3, [pc, #104]	; (800b13c <UTIL_SEQ_WaitEvt+0x88>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0dc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b0de:	4b18      	ldr	r3, [pc, #96]	; (800b140 <UTIL_SEQ_WaitEvt+0x8c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b0e4:	4a16      	ldr	r2, [pc, #88]	; (800b140 <UTIL_SEQ_WaitEvt+0x8c>)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b0ea:	e003      	b.n	800b0f4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	69f8      	ldr	r0, [r7, #28]
 800b0f0:	f7f6 fa1d 	bl	800152e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b0f4:	4b13      	ldr	r3, [pc, #76]	; (800b144 <UTIL_SEQ_WaitEvt+0x90>)
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0f5      	beq.n	800b0ec <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b100:	4a0e      	ldr	r2, [pc, #56]	; (800b13c <UTIL_SEQ_WaitEvt+0x88>)
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b106:	f3ef 8310 	mrs	r3, PRIMASK
 800b10a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b10c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b10e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b110:	b672      	cpsid	i
}
 800b112:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	43da      	mvns	r2, r3
 800b118:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <UTIL_SEQ_WaitEvt+0x90>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4013      	ands	r3, r2
 800b11e:	4a09      	ldr	r2, [pc, #36]	; (800b144 <UTIL_SEQ_WaitEvt+0x90>)
 800b120:	6013      	str	r3, [r2, #0]
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f383 8810 	msr	PRIMASK, r3
}
 800b12c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b12e:	4a04      	ldr	r2, [pc, #16]	; (800b140 <UTIL_SEQ_WaitEvt+0x8c>)
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	6013      	str	r3, [r2, #0]
  return;
 800b134:	bf00      	nop
}
 800b136:	3720      	adds	r7, #32
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	200017b0 	.word	0x200017b0
 800b140:	200017ac 	.word	0x200017ac
 800b144:	200017a8 	.word	0x200017a8

0800b148 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b148:	b480      	push	{r7}
 800b14a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b14c:	bf00      	nop
}
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b156:	b480      	push	{r7}
 800b158:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b15a:	bf00      	nop
}
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b16c:	2300      	movs	r3, #0
 800b16e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	0c1b      	lsrs	r3, r3, #16
 800b178:	041b      	lsls	r3, r3, #16
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d104      	bne.n	800b188 <SEQ_BitPosition+0x24>
 800b17e:	2310      	movs	r3, #16
 800b180:	73fb      	strb	r3, [r7, #15]
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	041b      	lsls	r3, r3, #16
 800b186:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d105      	bne.n	800b19e <SEQ_BitPosition+0x3a>
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	3308      	adds	r3, #8
 800b196:	73fb      	strb	r3, [r7, #15]
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	021b      	lsls	r3, r3, #8
 800b19c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d105      	bne.n	800b1b4 <SEQ_BitPosition+0x50>
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	73fb      	strb	r3, [r7, #15]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	011b      	lsls	r3, r3, #4
 800b1b2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	0f1b      	lsrs	r3, r3, #28
 800b1b8:	4a07      	ldr	r2, [pc, #28]	; (800b1d8 <SEQ_BitPosition+0x74>)
 800b1ba:	5cd2      	ldrb	r2, [r2, r3]
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	4413      	add	r3, r2
 800b1c0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	f1c3 031f 	rsb	r3, r3, #31
 800b1c8:	b2db      	uxtb	r3, r3
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	08010c4c 	.word	0x08010c4c
 800b1dc:	00000000 	.word	0x00000000

0800b1e0 <rf_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 800b1e0:	b5b0      	push	{r4, r5, r7, lr}
 800b1e2:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 800b1e6:	af02      	add	r7, sp, #8
 800b1e8:	f507 745a 	add.w	r4, r7, #872	; 0x368
 800b1ec:	f5a4 7457 	sub.w	r4, r4, #860	; 0x35c
 800b1f0:	6020      	str	r0, [r4, #0]
 800b1f2:	f507 705a 	add.w	r0, r7, #872	; 0x368
 800b1f6:	f5a0 7058 	sub.w	r0, r0, #864	; 0x360
 800b1fa:	6001      	str	r1, [r0, #0]
 800b1fc:	f507 715a 	add.w	r1, r7, #872	; 0x368
 800b200:	f5a1 7159 	sub.w	r1, r1, #868	; 0x364
 800b204:	600a      	str	r2, [r1, #0]
 800b206:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800b20a:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 800b20e:	6013      	str	r3, [r2, #0]
  float beta_ir, beta_red, x;
  float an_x[BUFFER_SIZE], *ptr_x; //ir
  float an_y[BUFFER_SIZE], *ptr_y; //red

  // calculates DC mean and subtracts DC from ir and red
  f_ir_mean=0.0;
 800b210:	f04f 0300 	mov.w	r3, #0
 800b214:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  f_red_mean=0.0;
 800b218:	f04f 0300 	mov.w	r3, #0
 800b21c:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
  for (k=0; k<n_ir_buffer_length; ++k) {
 800b220:	2300      	movs	r3, #0
 800b222:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b226:	e02c      	b.n	800b282 <rf_heart_rate_and_oxygen_saturation+0xa2>
    f_ir_mean += pun_ir_buffer[k];
 800b228:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800b232:	f5a2 7257 	sub.w	r2, r2, #860	; 0x35c
 800b236:	6812      	ldr	r2, [r2, #0]
 800b238:	4413      	add	r3, r2
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	ee07 3a90 	vmov	s15, r3
 800b240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b244:	ed97 7ad8 	vldr	s14, [r7, #864]	; 0x360
 800b248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b24c:	edc7 7ad8 	vstr	s15, [r7, #864]	; 0x360
    f_red_mean += pun_red_buffer[k];
 800b250:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800b25a:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 800b25e:	6812      	ldr	r2, [r2, #0]
 800b260:	4413      	add	r3, r2
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	ee07 3a90 	vmov	s15, r3
 800b268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b26c:	ed97 7ad7 	vldr	s14, [r7, #860]	; 0x35c
 800b270:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b274:	edc7 7ad7 	vstr	s15, [r7, #860]	; 0x35c
  for (k=0; k<n_ir_buffer_length; ++k) {
 800b278:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800b27c:	3301      	adds	r3, #1
 800b27e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b282:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b286:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800b28a:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	429a      	cmp	r2, r3
 800b292:	dbc9      	blt.n	800b228 <rf_heart_rate_and_oxygen_saturation+0x48>
  }
  f_ir_mean=f_ir_mean/n_ir_buffer_length ;
 800b294:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b298:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2a6:	edd7 6ad8 	vldr	s13, [r7, #864]	; 0x360
 800b2aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ae:	edc7 7ad8 	vstr	s15, [r7, #864]	; 0x360
  f_red_mean=f_red_mean/n_ir_buffer_length ;
 800b2b2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b2b6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	ee07 3a90 	vmov	s15, r3
 800b2c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2c4:	edd7 6ad7 	vldr	s13, [r7, #860]	; 0x35c
 800b2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2cc:	edc7 7ad7 	vstr	s15, [r7, #860]	; 0x35c

  // remove DC
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b2d6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800b2da:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800b2de:	f107 0314 	add.w	r3, r7, #20
 800b2e2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800b2e6:	e03a      	b.n	800b35e <rf_heart_rate_and_oxygen_saturation+0x17e>
    *ptr_x = pun_ir_buffer[k] - f_ir_mean;
 800b2e8:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800b2f2:	f5a2 7257 	sub.w	r2, r2, #860	; 0x35c
 800b2f6:	6812      	ldr	r2, [r2, #0]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b304:	edd7 7ad8 	vldr	s15, [r7, #864]	; 0x360
 800b308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b30c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800b310:	edc3 7a00 	vstr	s15, [r3]
    *ptr_y = pun_red_buffer[k] - f_red_mean;
 800b314:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800b31e:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 800b322:	6812      	ldr	r2, [r2, #0]
 800b324:	4413      	add	r3, r2
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	ee07 3a90 	vmov	s15, r3
 800b32c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b330:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 800b334:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b338:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800b33c:	edc3 7a00 	vstr	s15, [r3]
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 800b340:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800b344:	3301      	adds	r3, #1
 800b346:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b34a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800b34e:	3304      	adds	r3, #4
 800b350:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800b354:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800b358:	3304      	adds	r3, #4
 800b35a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800b35e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b362:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800b366:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	dbbb      	blt.n	800b2e8 <rf_heart_rate_and_oxygen_saturation+0x108>
  }

  // RF, remove linear trend (baseline leveling)
  beta_ir = rf_linear_regression_beta(an_x, mean_X, sum_X2);
 800b370:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800b374:	eddf 0aca 	vldr	s1, [pc, #808]	; 800b6a0 <rf_heart_rate_and_oxygen_saturation+0x4c0>
 800b378:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800b6a4 <rf_heart_rate_and_oxygen_saturation+0x4c4>
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 f99d 	bl	800b6bc <rf_linear_regression_beta>
 800b382:	ed87 0ad3 	vstr	s0, [r7, #844]	; 0x34c
  beta_red = rf_linear_regression_beta(an_y, mean_X, sum_X2);
 800b386:	f107 0314 	add.w	r3, r7, #20
 800b38a:	eddf 0ac5 	vldr	s1, [pc, #788]	; 800b6a0 <rf_heart_rate_and_oxygen_saturation+0x4c0>
 800b38e:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 800b6a4 <rf_heart_rate_and_oxygen_saturation+0x4c4>
 800b392:	4618      	mov	r0, r3
 800b394:	f000 f992 	bl	800b6bc <rf_linear_regression_beta>
 800b398:	ed87 0ad2 	vstr	s0, [r7, #840]	; 0x348
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 800b39c:	2300      	movs	r3, #0
 800b39e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b3a2:	4bc1      	ldr	r3, [pc, #772]	; (800b6a8 <rf_heart_rate_and_oxygen_saturation+0x4c8>)
 800b3a4:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800b3a8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800b3ac:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800b3b0:	f107 0314 	add.w	r3, r7, #20
 800b3b4:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800b3b8:	e036      	b.n	800b428 <rf_heart_rate_and_oxygen_saturation+0x248>
    *ptr_x -= beta_ir*x;
 800b3ba:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800b3be:	ed93 7a00 	vldr	s14, [r3]
 800b3c2:	edd7 6ad3 	vldr	s13, [r7, #844]	; 0x34c
 800b3c6:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 800b3ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3d2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800b3d6:	edc3 7a00 	vstr	s15, [r3]
    *ptr_y -= beta_red*x;
 800b3da:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800b3de:	ed93 7a00 	vldr	s14, [r3]
 800b3e2:	edd7 6ad2 	vldr	s13, [r7, #840]	; 0x348
 800b3e6:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 800b3ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3f2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800b3f6:	edc3 7a00 	vstr	s15, [r3]
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 800b3fa:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800b3fe:	3301      	adds	r3, #1
 800b400:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b404:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 800b408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b40c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b410:	edc7 7ad6 	vstr	s15, [r7, #856]	; 0x358
 800b414:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800b418:	3304      	adds	r3, #4
 800b41a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800b41e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800b422:	3304      	adds	r3, #4
 800b424:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800b428:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b42c:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800b430:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	429a      	cmp	r2, r3
 800b438:	dbbf      	blt.n	800b3ba <rf_heart_rate_and_oxygen_saturation+0x1da>
  }

    // For SpO2 calculate RMS of both AC signals. In addition, pulse detector needs raw sum of squares for IR
  f_y_ac=rf_rms(an_y,n_ir_buffer_length,&f_red_sumsq);
 800b43a:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800b43e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b442:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800b446:	f107 0014 	add.w	r0, r7, #20
 800b44a:	6819      	ldr	r1, [r3, #0]
 800b44c:	f000 fad7 	bl	800b9fe <rf_rms>
 800b450:	ed87 0ad1 	vstr	s0, [r7, #836]	; 0x344
  f_x_ac=rf_rms(an_x,n_ir_buffer_length,&f_ir_sumsq);
 800b454:	f507 724e 	add.w	r2, r7, #824	; 0x338
 800b458:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b45c:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800b460:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 800b464:	6819      	ldr	r1, [r3, #0]
 800b466:	f000 faca 	bl	800b9fe <rf_rms>
 800b46a:	ed87 0ad0 	vstr	s0, [r7, #832]	; 0x340

  // Calculate Pearson correlation between red and IR
  *correl=rf_Pcorrelation(an_x, an_y, n_ir_buffer_length)/sqrt(f_red_sumsq*f_ir_sumsq);
 800b46e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b472:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800b476:	f107 0114 	add.w	r1, r7, #20
 800b47a:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	f000 fb0d 	bl	800ba9e <rf_Pcorrelation>
 800b484:	ee10 3a10 	vmov	r3, s0
 800b488:	4618      	mov	r0, r3
 800b48a:	f7f5 f835 	bl	80004f8 <__aeabi_f2d>
 800b48e:	4604      	mov	r4, r0
 800b490:	460d      	mov	r5, r1
 800b492:	ed97 7acd 	vldr	s14, [r7, #820]	; 0x334
 800b496:	edd7 7ace 	vldr	s15, [r7, #824]	; 0x338
 800b49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b49e:	ee17 0a90 	vmov	r0, s15
 800b4a2:	f7f5 f829 	bl	80004f8 <__aeabi_f2d>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	ec43 2b10 	vmov	d0, r2, r3
 800b4ae:	f004 fdcb 	bl	8010048 <sqrt>
 800b4b2:	ec53 2b10 	vmov	r2, r3, d0
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	f7f5 f99f 	bl	80007fc <__aeabi_ddiv>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	f7f5 fb1f 	bl	8000b08 <__aeabi_d2f>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800b4d0:	601a      	str	r2, [r3, #0]

  // Find signal periodicity
  if(*correl>=min_pearson_correlation) {
 800b4d2:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800b4d6:	edd3 7a00 	vldr	s15, [r3]
 800b4da:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800b6ac <rf_heart_rate_and_oxygen_saturation+0x4cc>
 800b4de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e6:	db27      	blt.n	800b538 <rf_heart_rate_and_oxygen_saturation+0x358>
    // At the beginning of oximetry run the exact range of heart rate is unknown. This may lead to wrong rate if the next call does not find the _first_
    // peak of the autocorrelation function. E.g., second peak would yield only 50% of the true rate.
    if(LOWEST_PERIOD==n_last_peak_interval)
 800b4e8:	4b71      	ldr	r3, [pc, #452]	; (800b6b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b08      	cmp	r3, #8
 800b4ee:	d10c      	bne.n	800b50a <rf_heart_rate_and_oxygen_saturation+0x32a>
      rf_initialize_periodicity_search(an_x, BUFFER_SIZE, &n_last_peak_interval, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq);
 800b4f0:	edd7 7ace 	vldr	s15, [r7, #824]	; 0x338
 800b4f4:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 800b4f8:	eef0 0a67 	vmov.f32	s1, s15
 800b4fc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b500:	2325      	movs	r3, #37	; 0x25
 800b502:	4a6b      	ldr	r2, [pc, #428]	; (800b6b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800b504:	2164      	movs	r1, #100	; 0x64
 800b506:	f000 f968 	bl	800b7da <rf_initialize_periodicity_search>
    // RF, If correlation os good, then find average periodicity of the IR signal. If aperiodic, return periodicity of 0
    if(n_last_peak_interval!=0)
 800b50a:	4b69      	ldr	r3, [pc, #420]	; (800b6b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d015      	beq.n	800b53e <rf_heart_rate_and_oxygen_saturation+0x35e>
      rf_signal_periodicity(an_x, BUFFER_SIZE, &n_last_peak_interval, LOWEST_PERIOD, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq, ratio);
 800b512:	edd7 7ace 	vldr	s15, [r7, #824]	; 0x338
 800b516:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 800b51a:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800b51e:	9301      	str	r3, [sp, #4]
 800b520:	2325      	movs	r3, #37	; 0x25
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	eef0 0a67 	vmov.f32	s1, s15
 800b528:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b52c:	2308      	movs	r3, #8
 800b52e:	4a60      	ldr	r2, [pc, #384]	; (800b6b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800b530:	2164      	movs	r1, #100	; 0x64
 800b532:	f000 f9d1 	bl	800b8d8 <rf_signal_periodicity>
 800b536:	e002      	b.n	800b53e <rf_heart_rate_and_oxygen_saturation+0x35e>
  } else n_last_peak_interval=0;
 800b538:	4b5d      	ldr	r3, [pc, #372]	; (800b6b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]

  // Calculate heart rate if periodicity detector was successful. Otherwise, reset peak interval to its initial value and report error.
  if(n_last_peak_interval!=0) {
 800b53e:	4b5c      	ldr	r3, [pc, #368]	; (800b6b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d029      	beq.n	800b59a <rf_heart_rate_and_oxygen_saturation+0x3ba>
    *pn_heart_rate = (int32_t)(FS60/n_last_peak_interval);
 800b546:	4b5a      	ldr	r3, [pc, #360]	; (800b6b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b54e:	fb92 f2f3 	sdiv	r2, r2, r3
 800b552:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800b556:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 800b558:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800b55c:	2201      	movs	r2, #1
 800b55e:	701a      	strb	r2, [r3, #0]
    *pch_spo2_valid  = 0;
    return;
  }

  // After trend removal, the mean represents DC level
  xy_ratio= (f_y_ac*f_ir_mean)/(f_x_ac*f_red_mean);  //formula is (f_y_ac*f_x_dc) / (f_x_ac*f_y_dc) ;
 800b560:	ed97 7ad1 	vldr	s14, [r7, #836]	; 0x344
 800b564:	edd7 7ad8 	vldr	s15, [r7, #864]	; 0x360
 800b568:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b56c:	ed97 7ad0 	vldr	s14, [r7, #832]	; 0x340
 800b570:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 800b574:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b57c:	edc7 7acf 	vstr	s15, [r7, #828]	; 0x33c
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 800b580:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 800b584:	f7f4 ffb8 	bl	80004f8 <__aeabi_f2d>
 800b588:	a33b      	add	r3, pc, #236	; (adr r3, 800b678 <rf_heart_rate_and_oxygen_saturation+0x498>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f5 fa9b 	bl	8000ac8 <__aeabi_dcmpgt>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d117      	bne.n	800b5c8 <rf_heart_rate_and_oxygen_saturation+0x3e8>
 800b598:	e05d      	b.n	800b656 <rf_heart_rate_and_oxygen_saturation+0x476>
    n_last_peak_interval=LOWEST_PERIOD;
 800b59a:	4b45      	ldr	r3, [pc, #276]	; (800b6b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800b59c:	2208      	movs	r2, #8
 800b59e:	601a      	str	r2, [r3, #0]
    *pn_heart_rate = -999; // unable to calculate because signal looks aperiodic
 800b5a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800b5a4:	4a43      	ldr	r2, [pc, #268]	; (800b6b4 <rf_heart_rate_and_oxygen_saturation+0x4d4>)
 800b5a6:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 800b5a8:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
    *pn_spo2 =  -999 ; // do not use SPO2 from this corrupt signal
 800b5b0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b5b4:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a3f      	ldr	r2, [pc, #252]	; (800b6b8 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 800b5bc:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 800b5be:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	701a      	strb	r2, [r3, #0]
 800b5c6:	e051      	b.n	800b66c <rf_heart_rate_and_oxygen_saturation+0x48c>
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 800b5c8:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 800b5cc:	f7f4 ff94 	bl	80004f8 <__aeabi_f2d>
 800b5d0:	a32b      	add	r3, pc, #172	; (adr r3, 800b680 <rf_heart_rate_and_oxygen_saturation+0x4a0>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	f7f5 fa59 	bl	8000a8c <__aeabi_dcmplt>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d03a      	beq.n	800b656 <rf_heart_rate_and_oxygen_saturation+0x476>
    *pn_spo2 = (-45.060*xy_ratio + 30.354)*xy_ratio + 94.845;
 800b5e0:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 800b5e4:	f7f4 ff88 	bl	80004f8 <__aeabi_f2d>
 800b5e8:	a327      	add	r3, pc, #156	; (adr r3, 800b688 <rf_heart_rate_and_oxygen_saturation+0x4a8>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f4 ffdb 	bl	80005a8 <__aeabi_dmul>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	a325      	add	r3, pc, #148	; (adr r3, 800b690 <rf_heart_rate_and_oxygen_saturation+0x4b0>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7f4 fe1c 	bl	800023c <__adddf3>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	4614      	mov	r4, r2
 800b60a:	461d      	mov	r5, r3
 800b60c:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 800b610:	f7f4 ff72 	bl	80004f8 <__aeabi_f2d>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4620      	mov	r0, r4
 800b61a:	4629      	mov	r1, r5
 800b61c:	f7f4 ffc4 	bl	80005a8 <__aeabi_dmul>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	4610      	mov	r0, r2
 800b626:	4619      	mov	r1, r3
 800b628:	a31b      	add	r3, pc, #108	; (adr r3, 800b698 <rf_heart_rate_and_oxygen_saturation+0x4b8>)
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f7f4 fe05 	bl	800023c <__adddf3>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4610      	mov	r0, r2
 800b638:	4619      	mov	r1, r3
 800b63a:	f7f5 fa65 	bl	8000b08 <__aeabi_d2f>
 800b63e:	4602      	mov	r2, r0
 800b640:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b644:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid = 1;
 800b64c:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800b650:	2201      	movs	r2, #1
 800b652:	701a      	strb	r2, [r3, #0]
 800b654:	e00a      	b.n	800b66c <rf_heart_rate_and_oxygen_saturation+0x48c>
  } else {
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 800b656:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800b65a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a15      	ldr	r2, [pc, #84]	; (800b6b8 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 800b662:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 800b664:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800b668:	2200      	movs	r2, #0
 800b66a:	701a      	strb	r2, [r3, #0]
  }
}
 800b66c:	f507 775a 	add.w	r7, r7, #872	; 0x368
 800b670:	46bd      	mov	sp, r7
 800b672:	bdb0      	pop	{r4, r5, r7, pc}
 800b674:	f3af 8000 	nop.w
 800b678:	47ae147b 	.word	0x47ae147b
 800b67c:	3f947ae1 	.word	0x3f947ae1
 800b680:	d70a3d71 	.word	0xd70a3d71
 800b684:	3ffd70a3 	.word	0x3ffd70a3
 800b688:	147ae148 	.word	0x147ae148
 800b68c:	c04687ae 	.word	0xc04687ae
 800b690:	be76c8b4 	.word	0xbe76c8b4
 800b694:	403e5a9f 	.word	0x403e5a9f
 800b698:	7ae147ae 	.word	0x7ae147ae
 800b69c:	4057b614 	.word	0x4057b614
 800b6a0:	47a2be80 	.word	0x47a2be80
 800b6a4:	42460000 	.word	0x42460000
 800b6a8:	c2460000 	.word	0xc2460000
 800b6ac:	3f4ccccd 	.word	0x3f4ccccd
 800b6b0:	20000034 	.word	0x20000034
 800b6b4:	fffffc19 	.word	0xfffffc19
 800b6b8:	c479c000 	.word	0xc479c000

0800b6bc <rf_linear_regression_beta>:
*               point index values (0 to BUFFER_SIZE-1). xmean must equal to (BUFFER_SIZE-1)/2! sum_x2 is
*               the sum of squares of the mean-centered index values.
*               Robert Fraczkiewicz, 12/22/2017
* \retval       Beta
*/
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b089      	sub	sp, #36	; 0x24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b6c8:	edc7 0a01 	vstr	s1, [r7, #4]
  float x,beta,*pn_ptr;
  beta=0.0;
 800b6cc:	f04f 0300 	mov.w	r3, #0
 800b6d0:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 800b6d2:	edd7 7a02 	vldr	s15, [r7, #8]
 800b6d6:	eef1 7a67 	vneg.f32	s15, s15
 800b6da:	edc7 7a07 	vstr	s15, [r7, #28]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	e017      	b.n	800b714 <rf_linear_regression_beta+0x58>
    beta+=x*(*pn_ptr);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	ed93 7a00 	vldr	s14, [r3]
 800b6ea:	edd7 7a07 	vldr	s15, [r7, #28]
 800b6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f2:	ed97 7a06 	vldr	s14, [r7, #24]
 800b6f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6fa:	edc7 7a06 	vstr	s15, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 800b6fe:	edd7 7a07 	vldr	s15, [r7, #28]
 800b702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b70a:	edc7 7a07 	vstr	s15, [r7, #28]
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	3304      	adds	r3, #4
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	ed97 7a07 	vldr	s14, [r7, #28]
 800b718:	edd7 7a02 	vldr	s15, [r7, #8]
 800b71c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b724:	d9de      	bls.n	800b6e4 <rf_linear_regression_beta+0x28>
  return beta/sum_x2;
 800b726:	ed97 7a06 	vldr	s14, [r7, #24]
 800b72a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b72e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b732:	eef0 7a66 	vmov.f32	s15, s13
}
 800b736:	eeb0 0a67 	vmov.f32	s0, s15
 800b73a:	3724      	adds	r7, #36	; 0x24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <rf_autocorrelation>:
* \par          Details
*               Compute autocorrelation sequence's n_lag's element for a given series pn_x
*               Robert Fraczkiewicz, 12/21/2017
* \retval       Autocorrelation sum
*/
{
 800b744:	b480      	push	{r7}
 800b746:	b089      	sub	sp, #36	; 0x24
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
  int16_t i, n_temp=n_size-n_lag;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	b29a      	uxth	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	b29b      	uxth	r3, r3
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	827b      	strh	r3, [r7, #18]
  float sum=0.0,*pn_ptr;
 800b75e:	f04f 0300 	mov.w	r3, #0
 800b762:	61bb      	str	r3, [r7, #24]
  if(n_temp<=0) return sum;
 800b764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dc02      	bgt.n	800b772 <rf_autocorrelation+0x2e>
 800b76c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b770:	e02c      	b.n	800b7cc <rf_autocorrelation+0x88>
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 800b772:	2300      	movs	r3, #0
 800b774:	83fb      	strh	r3, [r7, #30]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	e017      	b.n	800b7ac <rf_autocorrelation+0x68>
    sum += (*pn_ptr)*(*(pn_ptr+n_lag));
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	ed93 7a00 	vldr	s14, [r3]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	4413      	add	r3, r2
 800b78a:	edd3 7a00 	vldr	s15, [r3]
 800b78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b792:	ed97 7a06 	vldr	s14, [r7, #24]
 800b796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b79a:	edc7 7a06 	vstr	s15, [r7, #24]
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 800b79e:	8bfb      	ldrh	r3, [r7, #30]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	83fb      	strh	r3, [r7, #30]
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	617b      	str	r3, [r7, #20]
 800b7ac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b7b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	dbe1      	blt.n	800b77c <rf_autocorrelation+0x38>
  }
  return sum/n_temp;
 800b7b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7bc:	ee07 3a90 	vmov	s15, r3
 800b7c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b7c4:	edd7 6a06 	vldr	s13, [r7, #24]
 800b7c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 800b7cc:	eeb0 0a67 	vmov.f32	s0, s15
 800b7d0:	3724      	adds	r7, #36	; 0x24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <rf_initialize_periodicity_search>:
*               of the autocorrelation at lag=0, then the input signal is insufficiently
*               periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 04/25/2020
* \retval       Average distance between peaks
*/
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b08a      	sub	sp, #40	; 0x28
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6178      	str	r0, [r7, #20]
 800b7e2:	6139      	str	r1, [r7, #16]
 800b7e4:	60fa      	str	r2, [r7, #12]
 800b7e6:	60bb      	str	r3, [r7, #8]
 800b7e8:	ed87 0a01 	vstr	s0, [r7, #4]
 800b7ec:	edc7 0a00 	vstr	s1, [r7]
  int32_t n_lag;
  float aut,aut_right;
  // At this point, *p_last_periodicity = LOWEST_PERIOD. Start walking to the right,
  // two steps at a time, until lag ratio fulfills quality criteria or HIGHEST_PERIOD
  // is reached.
  n_lag=*p_last_periodicity;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	627b      	str	r3, [r7, #36]	; 0x24
  aut_right=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 800b7f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f8:	6939      	ldr	r1, [r7, #16]
 800b7fa:	6978      	ldr	r0, [r7, #20]
 800b7fc:	f7ff ffa2 	bl	800b744 <rf_autocorrelation>
 800b800:	ed87 0a07 	vstr	s0, [r7, #28]
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	623b      	str	r3, [r7, #32]
  // Check sanity
  if(aut/aut_lag0 >= min_aut_ratio) {
 800b808:	edd7 6a07 	vldr	s13, [r7, #28]
 800b80c:	ed97 7a00 	vldr	s14, [r7]
 800b810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b814:	ed97 7a01 	vldr	s14, [r7, #4]
 800b818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b820:	d82f      	bhi.n	800b882 <rf_initialize_periodicity_search+0xa8>
    // Either quality criterion, min_aut_ratio, is too low, or heart rate is too high.
    // Are we on autocorrelation's downward slope? If yes, continue to a local minimum.
    // If not, continue to the next block.
    do {
      aut=aut_right;
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	61fb      	str	r3, [r7, #28]
      n_lag+=2;
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	3302      	adds	r3, #2
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 800b82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b82e:	6939      	ldr	r1, [r7, #16]
 800b830:	6978      	ldr	r0, [r7, #20]
 800b832:	f7ff ff87 	bl	800b744 <rf_autocorrelation>
 800b836:	ed87 0a08 	vstr	s0, [r7, #32]
    } while(aut_right/aut_lag0 >= min_aut_ratio && aut_right<aut && n_lag<=n_max_distance);
 800b83a:	edd7 6a08 	vldr	s13, [r7, #32]
 800b83e:	ed97 7a00 	vldr	s14, [r7]
 800b842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b846:	ed97 7a01 	vldr	s14, [r7, #4]
 800b84a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b852:	d80c      	bhi.n	800b86e <rf_initialize_periodicity_search+0x94>
 800b854:	ed97 7a08 	vldr	s14, [r7, #32]
 800b858:	edd7 7a07 	vldr	s15, [r7, #28]
 800b85c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b864:	d503      	bpl.n	800b86e <rf_initialize_periodicity_search+0x94>
 800b866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	ddd9      	ble.n	800b822 <rf_initialize_periodicity_search+0x48>
    if(n_lag>n_max_distance) {
 800b86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	429a      	cmp	r2, r3
 800b874:	dd03      	ble.n	800b87e <rf_initialize_periodicity_search+0xa4>
      // This should never happen, but if does return failure
      *p_last_periodicity=0;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]
      return;
 800b87c:	e029      	b.n	800b8d2 <rf_initialize_periodicity_search+0xf8>
    }
    aut=aut_right;
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	61fb      	str	r3, [r7, #28]
  }
  // Walk to the right.
  do {
    aut=aut_right;
 800b882:	6a3b      	ldr	r3, [r7, #32]
 800b884:	61fb      	str	r3, [r7, #28]
    n_lag+=2;
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	3302      	adds	r3, #2
 800b88a:	627b      	str	r3, [r7, #36]	; 0x24
    aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 800b88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88e:	6939      	ldr	r1, [r7, #16]
 800b890:	6978      	ldr	r0, [r7, #20]
 800b892:	f7ff ff57 	bl	800b744 <rf_autocorrelation>
 800b896:	ed87 0a08 	vstr	s0, [r7, #32]
  } while(aut_right/aut_lag0 < min_aut_ratio && n_lag<=n_max_distance);
 800b89a:	edd7 6a08 	vldr	s13, [r7, #32]
 800b89e:	ed97 7a00 	vldr	s14, [r7]
 800b8a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8a6:	ed97 7a01 	vldr	s14, [r7, #4]
 800b8aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b2:	dd03      	ble.n	800b8bc <rf_initialize_periodicity_search+0xe2>
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	dde2      	ble.n	800b882 <rf_initialize_periodicity_search+0xa8>
  if(n_lag>n_max_distance) {
 800b8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	dd03      	ble.n	800b8cc <rf_initialize_periodicity_search+0xf2>
    // This should never happen, but if does return failure
    *p_last_periodicity=0;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	e002      	b.n	800b8d2 <rf_initialize_periodicity_search+0xf8>
  } else
    *p_last_periodicity=n_lag;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d0:	601a      	str	r2, [r3, #0]
}
 800b8d2:	3728      	adds	r7, #40	; 0x28
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <rf_signal_periodicity>:
*               than min_aut_ratio fraction of the autocorrelation at lag=0, then the input
*               signal is insufficiently periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 01/07/2018
* \retval       Average distance between peaks
*/
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08c      	sub	sp, #48	; 0x30
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6178      	str	r0, [r7, #20]
 800b8e0:	6139      	str	r1, [r7, #16]
 800b8e2:	60fa      	str	r2, [r7, #12]
 800b8e4:	60bb      	str	r3, [r7, #8]
 800b8e6:	ed87 0a01 	vstr	s0, [r7, #4]
 800b8ea:	edc7 0a00 	vstr	s1, [r7]
  int32_t n_lag;
  float aut,aut_left,aut_right,aut_save;
  bool left_limit_reached=false;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	77fb      	strb	r3, [r7, #31]
  // Start from the last periodicity computing the corresponding autocorrelation
  n_lag=*p_last_periodicity;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  aut_save=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 800b8f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8fa:	6939      	ldr	r1, [r7, #16]
 800b8fc:	6978      	ldr	r0, [r7, #20]
 800b8fe:	f7ff ff21 	bl	800b744 <rf_autocorrelation>
 800b902:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
 800b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b908:	61bb      	str	r3, [r7, #24]
  // Is autocorrelation one lag to the left greater?
  aut_left=aut;
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	627b      	str	r3, [r7, #36]	; 0x24
  do {
    aut=aut_left;
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	62bb      	str	r3, [r7, #40]	; 0x28
    n_lag--;
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	3b01      	subs	r3, #1
 800b916:	62fb      	str	r3, [r7, #44]	; 0x2c
    aut_left=rf_autocorrelation(pn_x, n_size, n_lag);
 800b918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b91a:	6939      	ldr	r1, [r7, #16]
 800b91c:	6978      	ldr	r0, [r7, #20]
 800b91e:	f7ff ff11 	bl	800b744 <rf_autocorrelation>
 800b922:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  } while(aut_left>aut && n_lag>=n_min_distance);
 800b926:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b92a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b92e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b936:	dd03      	ble.n	800b940 <rf_signal_periodicity+0x68>
 800b938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	dae6      	bge.n	800b90e <rf_signal_periodicity+0x36>
  // Restore lag of the highest aut
  if(n_lag<n_min_distance) {
 800b940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	429a      	cmp	r2, r3
 800b946:	da07      	bge.n	800b958 <rf_signal_periodicity+0x80>
    left_limit_reached=true;
 800b948:	2301      	movs	r3, #1
 800b94a:	77fb      	strb	r3, [r7, #31]
    n_lag=*p_last_periodicity;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	62fb      	str	r3, [r7, #44]	; 0x2c
    aut=aut_save;
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	62bb      	str	r3, [r7, #40]	; 0x28
 800b956:	e002      	b.n	800b95e <rf_signal_periodicity+0x86>
  } else n_lag++;
 800b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95a:	3301      	adds	r3, #1
 800b95c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if(n_lag==*p_last_periodicity) {
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b964:	429a      	cmp	r2, r3
 800b966:	d12e      	bne.n	800b9c6 <rf_signal_periodicity+0xee>
    // Trip to the left made no progress. Walk to the right.
    aut_right=aut;
 800b968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96a:	623b      	str	r3, [r7, #32]
    do {
      aut=aut_right;
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	62bb      	str	r3, [r7, #40]	; 0x28
      n_lag++;
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	3301      	adds	r3, #1
 800b974:	62fb      	str	r3, [r7, #44]	; 0x2c
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 800b976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b978:	6939      	ldr	r1, [r7, #16]
 800b97a:	6978      	ldr	r0, [r7, #20]
 800b97c:	f7ff fee2 	bl	800b744 <rf_autocorrelation>
 800b980:	ed87 0a08 	vstr	s0, [r7, #32]
    } while(aut_right>aut && n_lag<=n_max_distance);
 800b984:	ed97 7a08 	vldr	s14, [r7, #32]
 800b988:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b98c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b994:	dd03      	ble.n	800b99e <rf_signal_periodicity+0xc6>
 800b996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	429a      	cmp	r2, r3
 800b99c:	dde6      	ble.n	800b96c <rf_signal_periodicity+0x94>
    // Restore lag of the highest aut
    if(n_lag>n_max_distance) n_lag=0; // Indicates failure
 800b99e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	dd02      	ble.n	800b9ac <rf_signal_periodicity+0xd4>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9aa:	e002      	b.n	800b9b2 <rf_signal_periodicity+0xda>
    else n_lag--;
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(n_lag==*p_last_periodicity && left_limit_reached) n_lag=0; // Indicates failure
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d104      	bne.n	800b9c6 <rf_signal_periodicity+0xee>
 800b9bc:	7ffb      	ldrb	r3, [r7, #31]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <rf_signal_periodicity+0xee>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  *ratio=aut/aut_lag0;
 800b9c6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9ca:	ed97 7a00 	vldr	s14, [r7]
 800b9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d4:	edc3 7a00 	vstr	s15, [r3]
  if(*ratio < min_aut_ratio) n_lag=0; // Indicates failure
 800b9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9da:	edd3 7a00 	vldr	s15, [r3]
 800b9de:	ed97 7a01 	vldr	s14, [r7, #4]
 800b9e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ea:	dd01      	ble.n	800b9f0 <rf_signal_periodicity+0x118>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  *p_last_periodicity=n_lag;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9f4:	601a      	str	r2, [r3, #0]
}
 800b9f6:	bf00      	nop
 800b9f8:	3730      	adds	r7, #48	; 0x30
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <rf_rms>:
* \par          Details
*               Compute root-mean-square variation for a given series pn_x
*               Robert Fraczkiewicz, 12/25/2017
* \retval       RMS value and raw sum of squares
*/
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b088      	sub	sp, #32
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	60f8      	str	r0, [r7, #12]
 800ba06:	60b9      	str	r1, [r7, #8]
 800ba08:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*pn_ptr;
  (*sumsq)=0.0;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f04f 0200 	mov.w	r2, #0
 800ba10:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 800ba12:	2300      	movs	r3, #0
 800ba14:	83fb      	strh	r3, [r7, #30]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	61bb      	str	r3, [r7, #24]
 800ba1a:	e015      	b.n	800ba48 <rf_rms+0x4a>
    r=(*pn_ptr);
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	617b      	str	r3, [r7, #20]
    (*sumsq) += r*r;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	ed93 7a00 	vldr	s14, [r3]
 800ba28:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ba30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	edc3 7a00 	vstr	s15, [r3]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 800ba3a:	8bfb      	ldrh	r3, [r7, #30]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	83fb      	strh	r3, [r7, #30]
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	3304      	adds	r3, #4
 800ba46:	61bb      	str	r3, [r7, #24]
 800ba48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	dce4      	bgt.n	800ba1c <rf_rms+0x1e>
  }
  (*sumsq)/=n_size; // This corresponds to autocorrelation at lag=0
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	edd3 6a00 	vldr	s13, [r3]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	edc3 7a00 	vstr	s15, [r3]
  return sqrt(*sumsq);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7f4 fd41 	bl	80004f8 <__aeabi_f2d>
 800ba76:	4602      	mov	r2, r0
 800ba78:	460b      	mov	r3, r1
 800ba7a:	ec43 2b10 	vmov	d0, r2, r3
 800ba7e:	f004 fae3 	bl	8010048 <sqrt>
 800ba82:	ec53 2b10 	vmov	r2, r3, d0
 800ba86:	4610      	mov	r0, r2
 800ba88:	4619      	mov	r1, r3
 800ba8a:	f7f5 f83d 	bl	8000b08 <__aeabi_d2f>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	ee07 3a90 	vmov	s15, r3
}
 800ba94:	eeb0 0a67 	vmov.f32	s0, s15
 800ba98:	3720      	adds	r7, #32
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <rf_Pcorrelation>:
* \par          Details
*               Compute scalar product between *pn_x and *pn_y vectors
*               Robert Fraczkiewicz, 12/25/2017
* \retval       Correlation product
*/
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b089      	sub	sp, #36	; 0x24
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	60b9      	str	r1, [r7, #8]
 800baa8:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*x_ptr,*y_ptr;
  r=0.0;
 800baaa:	f04f 0300 	mov.w	r3, #0
 800baae:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 800bab0:	2300      	movs	r3, #0
 800bab2:	83fb      	strh	r3, [r7, #30]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	617b      	str	r3, [r7, #20]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	613b      	str	r3, [r7, #16]
 800babc:	e017      	b.n	800baee <rf_Pcorrelation+0x50>
    r+=(*x_ptr)*(*y_ptr);
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	ed93 7a00 	vldr	s14, [r3]
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	edd3 7a00 	vldr	s15, [r3]
 800baca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bace:	ed97 7a06 	vldr	s14, [r7, #24]
 800bad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bad6:	edc7 7a06 	vstr	s15, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 800bada:	8bfb      	ldrh	r3, [r7, #30]
 800badc:	3301      	adds	r3, #1
 800bade:	b29b      	uxth	r3, r3
 800bae0:	83fb      	strh	r3, [r7, #30]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	3304      	adds	r3, #4
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	3304      	adds	r3, #4
 800baec:	613b      	str	r3, [r7, #16]
 800baee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	dce2      	bgt.n	800babe <rf_Pcorrelation+0x20>
  }
  r/=n_size;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	ee07 3a90 	vmov	s15, r3
 800bafe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb02:	edd7 6a06 	vldr	s13, [r7, #24]
 800bb06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb0a:	edc7 7a06 	vstr	s15, [r7, #24]
  return r;
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	ee07 3a90 	vmov	s15, r3
}
 800bb14:	eeb0 0a67 	vmov.f32	s0, s15
 800bb18:	3724      	adds	r7, #36	; 0x24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
	...

0800bb24 <maxim_max30102_write_reg>:
*
* \param[in]    uch_addr    - register address
* \param[in]    uch_data    - register data
*/
void maxim_max30102_write_reg(uint8_t uch_addr, uint8_t uch_data)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af04      	add	r7, sp, #16
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	460a      	mov	r2, r1
 800bb2e:	71fb      	strb	r3, [r7, #7]
 800bb30:	4613      	mov	r3, r2
 800bb32:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, I2C_WRITE_ADDR, uch_addr, 1U, &uch_data, 1U, 100U);
 800bb34:	79fb      	ldrb	r3, [r7, #7]
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	2364      	movs	r3, #100	; 0x64
 800bb3a:	9302      	str	r3, [sp, #8]
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	1dbb      	adds	r3, r7, #6
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	2301      	movs	r3, #1
 800bb46:	21ae      	movs	r1, #174	; 0xae
 800bb48:	4803      	ldr	r0, [pc, #12]	; (800bb58 <maxim_max30102_write_reg+0x34>)
 800bb4a:	f7f9 f9b5 	bl	8004eb8 <HAL_I2C_Mem_Write>
}
 800bb4e:	bf00      	nop
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20000a34 	.word	0x20000a34

0800bb5c <maxim_max30102_read_reg>:
*
* \param[in]    uch_addr    - register address
* \param[out]   puch_data    - pointer that stores the register data
*/
void maxim_max30102_read_reg(uint8_t uch_addr, uint8_t *puch_data)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af04      	add	r7, sp, #16
 800bb62:	4603      	mov	r3, r0
 800bb64:	6039      	str	r1, [r7, #0]
 800bb66:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, uch_addr, 1U, puch_data, 1U, 250U);
 800bb68:	79fb      	ldrb	r3, [r7, #7]
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	23fa      	movs	r3, #250	; 0xfa
 800bb6e:	9302      	str	r3, [sp, #8]
 800bb70:	2301      	movs	r3, #1
 800bb72:	9301      	str	r3, [sp, #4]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	2301      	movs	r3, #1
 800bb7a:	21af      	movs	r1, #175	; 0xaf
 800bb7c:	4803      	ldr	r0, [pc, #12]	; (800bb8c <maxim_max30102_read_reg+0x30>)
 800bb7e:	f7f9 faaf 	bl	80050e0 <HAL_I2C_Mem_Read>
}
 800bb82:	bf00      	nop
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20000a34 	.word	0x20000a34

0800bb90 <maxim_max30102_init>:
* \par          Details
*               This function initializes the MAX30102
*
* \param        None
*/
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_INTR_ENABLE_1, 0xc0U); 	// INTR setting
 800bb94:	21c0      	movs	r1, #192	; 0xc0
 800bb96:	2002      	movs	r0, #2
 800bb98:	f7ff ffc4 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_INTR_ENABLE_2, 0x00U);
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	2003      	movs	r0, #3
 800bba0:	f7ff ffc0 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_WR_PTR, 0x00U);  		//FIFO_WR_PTR[4:0]
 800bba4:	2100      	movs	r1, #0
 800bba6:	2004      	movs	r0, #4
 800bba8:	f7ff ffbc 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_OVF_COUNTER, 0x00U);  		//OVF_COUNTER[4:0]
 800bbac:	2100      	movs	r1, #0
 800bbae:	2005      	movs	r0, #5
 800bbb0:	f7ff ffb8 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_RD_PTR, 0x00U);  		//FIFO_RD_PTR[4:0]
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	2006      	movs	r0, #6
 800bbb8:	f7ff ffb4 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_CONFIG, 0x5fU);  		//sample avg = 4, fifo rollover=false, fifo almost full = 17
 800bbbc:	215f      	movs	r1, #95	; 0x5f
 800bbbe:	2008      	movs	r0, #8
 800bbc0:	f7ff ffb0 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x03U);   	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 800bbc4:	2103      	movs	r1, #3
 800bbc6:	2009      	movs	r0, #9
 800bbc8:	f7ff ffac 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_SPO2_CONFIG, 0x27U);  		// SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (411uS)
 800bbcc:	2127      	movs	r1, #39	; 0x27
 800bbce:	200a      	movs	r0, #10
 800bbd0:	f7ff ffa8 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED1_PA, 0x24U);   		//Choose value for ~ 7mA for LED1
 800bbd4:	2124      	movs	r1, #36	; 0x24
 800bbd6:	200c      	movs	r0, #12
 800bbd8:	f7ff ffa4 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED2_PA, 0x24U);   		// Choose value for ~ 7mA for LED2
 800bbdc:	2124      	movs	r1, #36	; 0x24
 800bbde:	200d      	movs	r0, #13
 800bbe0:	f7ff ffa0 	bl	800bb24 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_PILOT_PA, 0x7fU);   		// Choose value for ~ 25mA for Pilot LED
 800bbe4:	217f      	movs	r1, #127	; 0x7f
 800bbe6:	2010      	movs	r0, #16
 800bbe8:	f7ff ff9c 	bl	800bb24 <maxim_max30102_write_reg>
}
 800bbec:	bf00      	nop
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <maxim_max30102_read_fifo>:
*
* \param[out]   *pun_red_led   - pointer that stores the red LED reading data
* \param[out]   *pun_ir_led    - pointer that stores the IR LED reading data
*/
void maxim_max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08a      	sub	sp, #40	; 0x28
 800bbf4:	af04      	add	r7, sp, #16
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  uint32_t un_temp;
  uint8_t uch_temp;
  uint8_t uch_i2c_data[6];

  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_temp);
 800bbfa:	f107 0313 	add.w	r3, r7, #19
 800bbfe:	4619      	mov	r1, r3
 800bc00:	2000      	movs	r0, #0
 800bc02:	f7ff ffab 	bl	800bb5c <maxim_max30102_read_reg>
  maxim_max30102_read_reg(REG_INTR_STATUS_2, &uch_temp);
 800bc06:	f107 0313 	add.w	r3, r7, #19
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	2001      	movs	r0, #1
 800bc0e:	f7ff ffa5 	bl	800bb5c <maxim_max30102_read_reg>

  HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, REG_FIFO_DATA, 1U, uch_i2c_data, 6U, 250U);
 800bc12:	23fa      	movs	r3, #250	; 0xfa
 800bc14:	9302      	str	r3, [sp, #8]
 800bc16:	2306      	movs	r3, #6
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	f107 030c 	add.w	r3, r7, #12
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	2301      	movs	r3, #1
 800bc22:	2207      	movs	r2, #7
 800bc24:	21af      	movs	r1, #175	; 0xaf
 800bc26:	482a      	ldr	r0, [pc, #168]	; (800bcd0 <maxim_max30102_read_fifo+0xe0>)
 800bc28:	f7f9 fa5a 	bl	80050e0 <HAL_I2C_Mem_Read>

  *pun_ir_led = 0UL;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
  *pun_red_led = 0UL;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	601a      	str	r2, [r3, #0]

  un_temp = (uint32_t)uch_i2c_data[0];
 800bc38:	7b3b      	ldrb	r3, [r7, #12]
 800bc3a:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	041b      	lsls	r3, r3, #16
 800bc40:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	441a      	add	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[1];
 800bc4e:	7b7b      	ldrb	r3, [r7, #13]
 800bc50:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	021b      	lsls	r3, r3, #8
 800bc56:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	441a      	add	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[2];
 800bc64:	7bbb      	ldrb	r3, [r7, #14]
 800bc66:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	441a      	add	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[3];
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
 800bc76:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	041b      	lsls	r3, r3, #16
 800bc7c:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	441a      	add	r2, r3
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[4];
 800bc8a:	7c3b      	ldrb	r3, [r7, #16]
 800bc8c:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	021b      	lsls	r3, r3, #8
 800bc92:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	441a      	add	r2, r3
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[5];
 800bca0:	7c7b      	ldrb	r3, [r7, #17]
 800bca2:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	441a      	add	r2, r3
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	601a      	str	r2, [r3, #0]
  *pun_red_led &= 0x03FFFF;  	// Mask MSB [23:18]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	601a      	str	r2, [r3, #0]
  *pun_ir_led &= 0x03FFFF;  	// Mask MSB [23:18]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	601a      	str	r2, [r3, #0]

}
 800bcc8:	bf00      	nop
 800bcca:	3718      	adds	r7, #24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	20000a34 	.word	0x20000a34

0800bcd4 <maxim_max30102_reset>:
*               This function resets the MAX30102
*
* \param        None
*/
void maxim_max30102_reset()
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x40U);
 800bcd8:	2140      	movs	r1, #64	; 0x40
 800bcda:	2009      	movs	r0, #9
 800bcdc:	f7ff ff22 	bl	800bb24 <maxim_max30102_write_reg>
}
 800bce0:	bf00      	nop
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 800bce4:	b480      	push	{r7}
 800bce6:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800bce8:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <micros+0x24>)
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	4b07      	ldr	r3, [pc, #28]	; (800bd0c <micros+0x28>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4907      	ldr	r1, [pc, #28]	; (800bd10 <micros+0x2c>)
 800bcf2:	fba1 1303 	umull	r1, r3, r1, r3
 800bcf6:	0c9b      	lsrs	r3, r3, #18
 800bcf8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	e0001000 	.word	0xe0001000
 800bd0c:	20000020 	.word	0x20000020
 800bd10:	431bde83 	.word	0x431bde83

0800bd14 <MPUavailable>:

uint8_t MPUisSleeping(){
	uint8_t c = readByte(MPU9250_ADDRESS, PWR_MGMT_1);
	return (c & 0x40) == 0x40;
}
uint8_t MPUavailable(MPU9250_t *MPU9250){
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	return MPU9250 -> has_connected && (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <MPUavailable+0x28>
 800bd26:	213a      	movs	r1, #58	; 0x3a
 800bd28:	20d0      	movs	r0, #208	; 0xd0
 800bd2a:	f000 ff23 	bl	800cb74 <readByte>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <MPUavailable+0x28>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e000      	b.n	800bd3e <MPUavailable+0x2a>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	b2db      	uxtb	r3, r3
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <updateMPU>:

uint8_t updateMPU(MPU9250_t *MPU9250){
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b08c      	sub	sp, #48	; 0x30
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
	if (!MPUavailable(MPU9250)==1) return 0;
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff ffdf 	bl	800bd14 <MPUavailable>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <updateMPU+0x18>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	e0b7      	b.n	800bed0 <updateMPU+0x188>

	        update_accel_gyro(MPU9250);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fa95 	bl	800c290 <update_accel_gyro>
	        update_mag(MPU9250);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fb22 	bl	800c3b0 <update_mag>
	        // get quaternion based on aircraft coordinate (Right-Hand, X-Forward, Z-Down)
	        // acc[mg], gyro[deg/s], mag [mG]
	        // gyro will be convert from [deg/s] to [rad/s] inside of this function
	        // quat_filter.update(-a[0], a[1], a[2], g[0] * DEG_TO_RAD, -g[1] * DEG_TO_RAD, -g[2] * DEG_TO_RAD, m[1], -m[0], m[2], q);

	        float an = -MPU9250->a[0];
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800bd72:	eef1 7a67 	vneg.f32	s15, s15
 800bd76:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	        float ae = +MPU9250->a[1];
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7e:	627b      	str	r3, [r7, #36]	; 0x24
	        float ad = +MPU9250->a[2];
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd84:	623b      	str	r3, [r7, #32]
	        float gn = +MPU9250->g[0] * DEG_TO_RAD;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7f4 fbb4 	bl	80004f8 <__aeabi_f2d>
 800bd90:	a351      	add	r3, pc, #324	; (adr r3, 800bed8 <updateMPU+0x190>)
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	f7f4 fc07 	bl	80005a8 <__aeabi_dmul>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	4610      	mov	r0, r2
 800bda0:	4619      	mov	r1, r3
 800bda2:	f04f 0200 	mov.w	r2, #0
 800bda6:	4b4e      	ldr	r3, [pc, #312]	; (800bee0 <updateMPU+0x198>)
 800bda8:	f7f4 fd28 	bl	80007fc <__aeabi_ddiv>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	f7f4 fea8 	bl	8000b08 <__aeabi_d2f>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	61fb      	str	r3, [r7, #28]
	        float ge = -MPU9250->g[1] * DEG_TO_RAD;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800bdc2:	eef1 7a67 	vneg.f32	s15, s15
 800bdc6:	ee17 3a90 	vmov	r3, s15
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7f4 fb94 	bl	80004f8 <__aeabi_f2d>
 800bdd0:	a341      	add	r3, pc, #260	; (adr r3, 800bed8 <updateMPU+0x190>)
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	f7f4 fbe7 	bl	80005a8 <__aeabi_dmul>
 800bdda:	4602      	mov	r2, r0
 800bddc:	460b      	mov	r3, r1
 800bdde:	4610      	mov	r0, r2
 800bde0:	4619      	mov	r1, r3
 800bde2:	f04f 0200 	mov.w	r2, #0
 800bde6:	4b3e      	ldr	r3, [pc, #248]	; (800bee0 <updateMPU+0x198>)
 800bde8:	f7f4 fd08 	bl	80007fc <__aeabi_ddiv>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	f7f4 fe88 	bl	8000b08 <__aeabi_d2f>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	61bb      	str	r3, [r7, #24]
	        float gd = -MPU9250->g[2] * DEG_TO_RAD;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800be02:	eef1 7a67 	vneg.f32	s15, s15
 800be06:	ee17 3a90 	vmov	r3, s15
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f4 fb74 	bl	80004f8 <__aeabi_f2d>
 800be10:	a331      	add	r3, pc, #196	; (adr r3, 800bed8 <updateMPU+0x190>)
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	f7f4 fbc7 	bl	80005a8 <__aeabi_dmul>
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	4610      	mov	r0, r2
 800be20:	4619      	mov	r1, r3
 800be22:	f04f 0200 	mov.w	r2, #0
 800be26:	4b2e      	ldr	r3, [pc, #184]	; (800bee0 <updateMPU+0x198>)
 800be28:	f7f4 fce8 	bl	80007fc <__aeabi_ddiv>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4610      	mov	r0, r2
 800be32:	4619      	mov	r1, r3
 800be34:	f7f4 fe68 	bl	8000b08 <__aeabi_d2f>
 800be38:	4603      	mov	r3, r0
 800be3a:	617b      	str	r3, [r7, #20]
	        float mn = +MPU9250->m[1];
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be42:	613b      	str	r3, [r7, #16]
	        float me = -MPU9250->m[0];
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800be4a:	eef1 7a67 	vneg.f32	s15, s15
 800be4e:	edc7 7a03 	vstr	s15, [r7, #12]
	        float md = +MPU9250->m[2];
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be58:	60bb      	str	r3, [r7, #8]

	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 800be5a:	2300      	movs	r3, #0
 800be5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be5e:	e019      	b.n	800be94 <updateMPU+0x14c>

	        	update_madgwick(an, ae, ad, gn, ge, gd, mn, me, md, MPU9250->q);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	3390      	adds	r3, #144	; 0x90
 800be64:	4618      	mov	r0, r3
 800be66:	ed97 4a02 	vldr	s8, [r7, #8]
 800be6a:	edd7 3a03 	vldr	s7, [r7, #12]
 800be6e:	ed97 3a04 	vldr	s6, [r7, #16]
 800be72:	edd7 2a05 	vldr	s5, [r7, #20]
 800be76:	ed97 2a06 	vldr	s4, [r7, #24]
 800be7a:	edd7 1a07 	vldr	s3, [r7, #28]
 800be7e:	ed97 1a08 	vldr	s2, [r7, #32]
 800be82:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800be86:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800be8a:	f000 ffcd 	bl	800ce28 <update_madgwick>
	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 800be8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be90:	3301      	adds	r3, #1
 800be92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800be9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d3df      	bcc.n	800be60 <updateMPU+0x118>
	        }


	        update_rpy(MPU9250, MPU9250->q[0], MPU9250->q[1], MPU9250->q[2], MPU9250->q[3]);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800beb8:	eef0 1a46 	vmov.f32	s3, s12
 800bebc:	eeb0 1a66 	vmov.f32	s2, s13
 800bec0:	eef0 0a47 	vmov.f32	s1, s14
 800bec4:	eeb0 0a67 	vmov.f32	s0, s15
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f8ad 	bl	800c028 <update_rpy>

	        return 1;
 800bece:	2301      	movs	r3, #1
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3730      	adds	r7, #48	; 0x30
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	54442d18 	.word	0x54442d18
 800bedc:	400921fb 	.word	0x400921fb
 800bee0:	40668000 	.word	0x40668000

0800bee4 <getAccX>:
float getAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->a[i] : 0.f; }
float getGyro(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->g[i] : 0.f; }
float getMag(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->m[i] : 0.f; }
float getLinearAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->lin_acc[i] : 0.f; }

float getAccX(MPU9250_t *MPU9250) { return MPU9250->a[0]; }
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bef0:	ee07 3a90 	vmov	s15, r3
 800bef4:	eeb0 0a67 	vmov.f32	s0, s15
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <getAccY>:
float getAccY(MPU9250_t *MPU9250) { return MPU9250->a[1]; }
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf0e:	ee07 3a90 	vmov	s15, r3
 800bf12:	eeb0 0a67 	vmov.f32	s0, s15
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <getAccZ>:
float getAccZ(MPU9250_t *MPU9250) { return MPU9250->a[2]; }
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf2c:	ee07 3a90 	vmov	s15, r3
 800bf30:	eeb0 0a67 	vmov.f32	s0, s15
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <setAccBias>:
float getMagScaleX(MPU9250_t *MPU9250) { return MPU9250->mag_scale[0]; }
float getMagScaleY(MPU9250_t *MPU9250) { return MPU9250->mag_scale[1]; }
float getMagScaleZ(MPU9250_t *MPU9250) { return MPU9250->mag_scale[2]; }
float getTemperature(MPU9250_t *MPU9250) { return MPU9250->temperature; }

void setAccBias(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	ed87 0a02 	vstr	s0, [r7, #8]
 800bf4a:	edc7 0a01 	vstr	s1, [r7, #4]
 800bf4e:	ed87 1a00 	vstr	s2, [r7]
	MPU9250->acc_bias[0] = x;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	60da      	str	r2, [r3, #12]
	MPU9250->acc_bias[1] = y;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	611a      	str	r2, [r3, #16]
	MPU9250->acc_bias[2] = z;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	615a      	str	r2, [r3, #20]
       write_accel_offset(MPU9250);
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f000 fb5d 	bl	800c624 <write_accel_offset>
   }
 800bf6a:	bf00      	nop
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <setGyroBias>:
void setGyroBias(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	ed87 0a02 	vstr	s0, [r7, #8]
 800bf7e:	edc7 0a01 	vstr	s1, [r7, #4]
 800bf82:	ed87 1a00 	vstr	s2, [r7]
	   MPU9250->gyro_bias[0] = x;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	619a      	str	r2, [r3, #24]
	   MPU9250->gyro_bias[1] = y;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	61da      	str	r2, [r3, #28]
	   MPU9250->gyro_bias[2] = z;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	621a      	str	r2, [r3, #32]
       write_gyro_offset(MPU9250);
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 fc41 	bl	800c820 <write_gyro_offset>
   }
 800bf9e:	bf00      	nop
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <setMagBias>:
void setMagBias(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 800bfa6:	b480      	push	{r7}
 800bfa8:	b085      	sub	sp, #20
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	60f8      	str	r0, [r7, #12]
 800bfae:	ed87 0a02 	vstr	s0, [r7, #8]
 800bfb2:	edc7 0a01 	vstr	s1, [r7, #4]
 800bfb6:	ed87 1a00 	vstr	s2, [r7]
	MPU9250->mag_bias[0] = x;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250->mag_bias[1] = y;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	635a      	str	r2, [r3, #52]	; 0x34
	MPU9250->mag_bias[2] = z;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	639a      	str	r2, [r3, #56]	; 0x38
   }
 800bfcc:	bf00      	nop
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <setMagScale>:
void setMagScale(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	ed87 0a02 	vstr	s0, [r7, #8]
 800bfe4:	edc7 0a01 	vstr	s1, [r7, #4]
 800bfe8:	ed87 1a00 	vstr	s2, [r7]
	MPU9250->mag_scale[0] = x;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	63da      	str	r2, [r3, #60]	; 0x3c
	MPU9250->mag_scale[1] = y;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	641a      	str	r2, [r3, #64]	; 0x40
	MPU9250->mag_scale[2] = z;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	645a      	str	r2, [r3, #68]	; 0x44
   }
 800bffe:	bf00      	nop
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <setMagneticDeclination>:

void setMagneticDeclination(MPU9250_t *MPU9250, const float d) {
 800c00a:	b480      	push	{r7}
 800c00c:	b083      	sub	sp, #12
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	ed87 0a00 	vstr	s0, [r7]
	MPU9250->magnetic_declination = d;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c01c:	bf00      	nop
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <update_rpy>:

void update_rpy(MPU9250_t *MPU9250, float qw, float qx, float qy, float qz){
 800c028:	b580      	push	{r7, lr}
 800c02a:	b08c      	sub	sp, #48	; 0x30
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6178      	str	r0, [r7, #20]
 800c030:	ed87 0a04 	vstr	s0, [r7, #16]
 800c034:	edc7 0a03 	vstr	s1, [r7, #12]
 800c038:	ed87 1a02 	vstr	s2, [r7, #8]
 800c03c:	edc7 1a01 	vstr	s3, [r7, #4]
	        // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	        // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	        // applied in the correct order which for this configuration is yaw, pitch, and then roll.
	        // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	        float a12, a22, a31, a32, a33;  // rotation matrix coefficients for Euler angles and gravity components
	        a12 = 2.0f * (qx * qy + qw * qz);
 800c040:	ed97 7a03 	vldr	s14, [r7, #12]
 800c044:	edd7 7a02 	vldr	s15, [r7, #8]
 800c048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c04c:	edd7 6a04 	vldr	s13, [r7, #16]
 800c050:	edd7 7a01 	vldr	s15, [r7, #4]
 800c054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c05c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c060:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	        a22 = qw * qw + qx * qx - qy * qy - qz * qz;
 800c064:	edd7 7a04 	vldr	s15, [r7, #16]
 800c068:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c06c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c070:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c074:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c078:	edd7 7a02 	vldr	s15, [r7, #8]
 800c07c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c080:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c084:	edd7 7a01 	vldr	s15, [r7, #4]
 800c088:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c08c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c090:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	        a31 = 2.0f * (qw * qx + qy * qz);
 800c094:	ed97 7a04 	vldr	s14, [r7, #16]
 800c098:	edd7 7a03 	vldr	s15, [r7, #12]
 800c09c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0a0:	edd7 6a02 	vldr	s13, [r7, #8]
 800c0a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c0b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	        a32 = 2.0f * (qx * qz - qw * qy);
 800c0b8:	ed97 7a03 	vldr	s14, [r7, #12]
 800c0bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0c4:	edd7 6a04 	vldr	s13, [r7, #16]
 800c0c8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c0d8:	edc7 7a08 	vstr	s15, [r7, #32]
	        a33 = qw * qw - qx * qx - qy * qy + qz * qz;
 800c0dc:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c0e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c0ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0f0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c0f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c100:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c104:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c108:	edc7 7a07 	vstr	s15, [r7, #28]
	        MPU9250->rpy[0] = atan2f(a31, a33);
 800c10c:	edd7 0a07 	vldr	s1, [r7, #28]
 800c110:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800c114:	f003 fff0 	bl	80100f8 <atan2f>
 800c118:	eef0 7a40 	vmov.f32	s15, s0
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] = -asinf(a32);
 800c122:	ed97 0a08 	vldr	s0, [r7, #32]
 800c126:	f003 ffbb 	bl	80100a0 <asinf>
 800c12a:	eef0 7a40 	vmov.f32	s15, s0
 800c12e:	eef1 7a67 	vneg.f32	s15, s15
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] = atan2f(a12, a22);
 800c138:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800c13c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800c140:	f003 ffda 	bl	80100f8 <atan2f>
 800c144:	eef0 7a40 	vmov.f32	s15, s0
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	        MPU9250->rpy[0] *= 180.0f / PI;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c154:	4618      	mov	r0, r3
 800c156:	f7f4 f9cf 	bl	80004f8 <__aeabi_f2d>
 800c15a:	a34a      	add	r3, pc, #296	; (adr r3, 800c284 <update_rpy+0x25c>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f4 fa22 	bl	80005a8 <__aeabi_dmul>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4610      	mov	r0, r2
 800c16a:	4619      	mov	r1, r3
 800c16c:	f7f4 fccc 	bl	8000b08 <__aeabi_d2f>
 800c170:	4602      	mov	r2, r0
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] *= 180.0f / PI;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c17e:	4618      	mov	r0, r3
 800c180:	f7f4 f9ba 	bl	80004f8 <__aeabi_f2d>
 800c184:	a33f      	add	r3, pc, #252	; (adr r3, 800c284 <update_rpy+0x25c>)
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	f7f4 fa0d 	bl	80005a8 <__aeabi_dmul>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4610      	mov	r0, r2
 800c194:	4619      	mov	r1, r3
 800c196:	f7f4 fcb7 	bl	8000b08 <__aeabi_d2f>
 800c19a:	4602      	mov	r2, r0
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] *= 180.0f / PI;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7f4 f9a5 	bl	80004f8 <__aeabi_f2d>
 800c1ae:	a335      	add	r3, pc, #212	; (adr r3, 800c284 <update_rpy+0x25c>)
 800c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b4:	f7f4 f9f8 	bl	80005a8 <__aeabi_dmul>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4610      	mov	r0, r2
 800c1be:	4619      	mov	r1, r3
 800c1c0:	f7f4 fca2 	bl	8000b08 <__aeabi_d2f>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	        MPU9250->rpy[2] += MPU9250->magnetic_declination;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800c1d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	        if (MPU9250->rpy[2] >= +180.f)
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800c1e8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800c278 <update_rpy+0x250>
 800c1ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f4:	db0a      	blt.n	800c20c <update_rpy+0x1e4>
	        	MPU9250->rpy[2] -= 360.f;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800c1fc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c27c <update_rpy+0x254>
 800c200:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 800c20a:	e013      	b.n	800c234 <update_rpy+0x20c>
	        else if (MPU9250->rpy[2] < -180.f)
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800c212:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800c280 <update_rpy+0x258>
 800c216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21e:	d509      	bpl.n	800c234 <update_rpy+0x20c>
	        	MPU9250->rpy[2] += 360.f;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800c226:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800c27c <update_rpy+0x254>
 800c22a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

	        MPU9250->lin_acc[0] = MPU9250->a[0] + a31;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800c23a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c23e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	        MPU9250->lin_acc[1] = MPU9250->a[1] + a32;
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800c24e:	edd7 7a08 	vldr	s15, [r7, #32]
 800c252:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	        MPU9250->lin_acc[2] = MPU9250->a[2] - a33;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800c262:	edd7 7a07 	vldr	s15, [r7, #28]
 800c266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
	        //char str[] = "IN UPDATE rpy \n\r";
	        //HAL_UART_Transmit(&huart1, str, strlen((char *)str), 0xFFFF);
}
 800c270:	bf00      	nop
 800c272:	3730      	adds	r7, #48	; 0x30
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	43340000 	.word	0x43340000
 800c27c:	43b40000 	.word	0x43b40000
 800c280:	c3340000 	.word	0xc3340000
 800c284:	1a63c1f8 	.word	0x1a63c1f8
 800c288:	404ca5dc 	.word	0x404ca5dc
 800c28c:	00000000 	.word	0x00000000

0800c290 <update_accel_gyro>:

void update_accel_gyro(MPU9250_t *MPU9250) {
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
        int16_t raw_acc_gyro_data[7];        // used to read all 14 bytes at once from the MPU9250 accel/gyro
        readAccelGyro(raw_acc_gyro_data);  // INT cleared on any read
 800c298:	f107 0308 	add.w	r3, r7, #8
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 f917 	bl	800c4d0 <readAccelGyro>

        // Now we'll calculate the accleration value into actual g's
        MPU9250->a[0] = (float)raw_acc_gyro_data[0] * MPU9250->acc_resolution;  // get actual g value, this depends on scale being set
 800c2a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c2a6:	ee07 3a90 	vmov	s15, r3
 800c2aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	edd3 7a00 	vldr	s15, [r3]
 800c2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
        MPU9250->a[1] = (float)raw_acc_gyro_data[1] * MPU9250->acc_resolution;
 800c2be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c2c2:	ee07 3a90 	vmov	s15, r3
 800c2c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	edd3 7a00 	vldr	s15, [r3]
 800c2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
        MPU9250->a[2] = (float)raw_acc_gyro_data[2] * MPU9250->acc_resolution;
 800c2da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c2de:	ee07 3a90 	vmov	s15, r3
 800c2e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	edd3 7a00 	vldr	s15, [r3]
 800c2ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

        MPU9250->temperature_count = raw_acc_gyro_data[3];                  // Read the adc values
 800c2f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        MPU9250->temperature = ((float)MPU9250->temperature_count) / 333.87 + 21.0;  // Temperature in degrees Centigrade
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c306:	ee07 3a90 	vmov	s15, r3
 800c30a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c30e:	ee17 0a90 	vmov	r0, s15
 800c312:	f7f4 f8f1 	bl	80004f8 <__aeabi_f2d>
 800c316:	a323      	add	r3, pc, #140	; (adr r3, 800c3a4 <update_accel_gyro+0x114>)
 800c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31c:	f7f4 fa6e 	bl	80007fc <__aeabi_ddiv>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4610      	mov	r0, r2
 800c326:	4619      	mov	r1, r3
 800c328:	f04f 0200 	mov.w	r2, #0
 800c32c:	4b1c      	ldr	r3, [pc, #112]	; (800c3a0 <update_accel_gyro+0x110>)
 800c32e:	f7f3 ff85 	bl	800023c <__adddf3>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	4610      	mov	r0, r2
 800c338:	4619      	mov	r1, r3
 800c33a:	f7f4 fbe5 	bl	8000b08 <__aeabi_d2f>
 800c33e:	4602      	mov	r2, r0
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	651a      	str	r2, [r3, #80]	; 0x50

        // Calculate the gyro value into actual degrees per second
        MPU9250->g[0] = (float)raw_acc_gyro_data[4] * MPU9250->gyro_resolution;  // get actual gyro value, this depends on scale being set
 800c344:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c348:	ee07 3a90 	vmov	s15, r3
 800c34c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	edd3 7a01 	vldr	s15, [r3, #4]
 800c356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
        MPU9250->g[1] = (float)raw_acc_gyro_data[5] * MPU9250->gyro_resolution;
 800c360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c364:	ee07 3a90 	vmov	s15, r3
 800c368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
        MPU9250->g[2] = (float)raw_acc_gyro_data[6] * MPU9250->gyro_resolution;
 800c37c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c380:	ee07 3a90 	vmov	s15, r3
 800c384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    }
 800c398:	bf00      	nop
 800c39a:	3718      	adds	r7, #24
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	40350000 	.word	0x40350000
 800c3a4:	851eb852 	.word	0x851eb852
 800c3a8:	4074ddeb 	.word	0x4074ddeb
 800c3ac:	00000000 	.word	0x00000000

0800c3b0 <update_mag>:

void update_mag(MPU9250_t *MPU9250) {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
        int16_t mag_count[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	81bb      	strh	r3, [r7, #12]
 800c3bc:	2300      	movs	r3, #0
 800c3be:	81fb      	strh	r3, [r7, #14]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	823b      	strh	r3, [r7, #16]

        // Read the x/y/z adc values
        if (readMag(mag_count)==1) {
 800c3c4:	f107 030c 	add.w	r3, r7, #12
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 f8d5 	bl	800c578 <readMag>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d174      	bne.n	800c4be <update_mag+0x10e>
            // Calculate the magnetometer values in milliGauss
            // Include factory calibration per data sheet and user environmental corrections
            // mag_bias is calcurated in 16BITS
            float bias_to_current_bits = MPU9250->mag_resolution / (10.*4912./32760.0);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7f4 f88d 	bl	80004f8 <__aeabi_f2d>
 800c3de:	a33a      	add	r3, pc, #232	; (adr r3, 800c4c8 <update_mag+0x118>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	f7f4 fa0a 	bl	80007fc <__aeabi_ddiv>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	f7f4 fb8a 	bl	8000b08 <__aeabi_d2f>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	617b      	str	r3, [r7, #20]
            MPU9250->m[0] = (float)(mag_count[0] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[0] - MPU9250->mag_bias[0] * bias_to_current_bits) * MPU9250->mag_scale[0];  // get actual magnetometer value, this depends on scale being set
 800c3f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c3fc:	ee07 3a90 	vmov	s15, r3
 800c400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	edd3 7a02 	vldr	s15, [r3, #8]
 800c40a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c414:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800c41e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800c430:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            MPU9250->m[1] = (float)(mag_count[1] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[1] - MPU9250->mag_bias[1] * bias_to_current_bits) * MPU9250->mag_scale[1];
 800c43a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c43e:	ee07 3a90 	vmov	s15, r3
 800c442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	edd3 7a02 	vldr	s15, [r3, #8]
 800c44c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800c460:	edd7 7a05 	vldr	s15, [r7, #20]
 800c464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800c472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
            MPU9250->m[2] = (float)(mag_count[2] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[2] - MPU9250->mag_bias[2] * bias_to_current_bits) * MPU9250->mag_scale[2];
 800c47c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c480:	ee07 3a90 	vmov	s15, r3
 800c484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c48e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800c4a2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800c4b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
        }
    }
 800c4be:	bf00      	nop
 800c4c0:	3718      	adds	r7, #24
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	d7fd7fd8 	.word	0xd7fd7fd8
 800c4cc:	3ff7fd7f 	.word	0x3ff7fd7f

0800c4d0 <readAccelGyro>:

void readAccelGyro(int16_t* destination)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]

	uint8_t raw_data[14];                                                 // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 14, &raw_data[0]);             // Read the 14 raw data registers into data array
 800c4d8:	f107 0308 	add.w	r3, r7, #8
 800c4dc:	220e      	movs	r2, #14
 800c4de:	213b      	movs	r1, #59	; 0x3b
 800c4e0:	20d0      	movs	r0, #208	; 0xd0
 800c4e2:	f000 fb6d 	bl	800cbc0 <readBytes>
	destination[0] = ((int16_t)raw_data[0] << 8) | (int16_t)raw_data[1];  // Turn the MSB and LSB into a signed 16-bit value
 800c4e6:	7a3b      	ldrb	r3, [r7, #8]
 800c4e8:	021b      	lsls	r3, r3, #8
 800c4ea:	b21a      	sxth	r2, r3
 800c4ec:	7a7b      	ldrb	r3, [r7, #9]
 800c4ee:	b21b      	sxth	r3, r3
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	b21a      	sxth	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t)raw_data[2] << 8) | (int16_t)raw_data[3];
 800c4f8:	7abb      	ldrb	r3, [r7, #10]
 800c4fa:	021b      	lsls	r3, r3, #8
 800c4fc:	b219      	sxth	r1, r3
 800c4fe:	7afb      	ldrb	r3, [r7, #11]
 800c500:	b21a      	sxth	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3302      	adds	r3, #2
 800c506:	430a      	orrs	r2, r1
 800c508:	b212      	sxth	r2, r2
 800c50a:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t)raw_data[4] << 8) | (int16_t)raw_data[5];
 800c50c:	7b3b      	ldrb	r3, [r7, #12]
 800c50e:	021b      	lsls	r3, r3, #8
 800c510:	b219      	sxth	r1, r3
 800c512:	7b7b      	ldrb	r3, [r7, #13]
 800c514:	b21a      	sxth	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3304      	adds	r3, #4
 800c51a:	430a      	orrs	r2, r1
 800c51c:	b212      	sxth	r2, r2
 800c51e:	801a      	strh	r2, [r3, #0]
	destination[3] = ((int16_t)raw_data[6] << 8) | (int16_t)raw_data[7];
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	021b      	lsls	r3, r3, #8
 800c524:	b219      	sxth	r1, r3
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	b21a      	sxth	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3306      	adds	r3, #6
 800c52e:	430a      	orrs	r2, r1
 800c530:	b212      	sxth	r2, r2
 800c532:	801a      	strh	r2, [r3, #0]
	destination[4] = ((int16_t)raw_data[8] << 8) | (int16_t)raw_data[9];
 800c534:	7c3b      	ldrb	r3, [r7, #16]
 800c536:	021b      	lsls	r3, r3, #8
 800c538:	b219      	sxth	r1, r3
 800c53a:	7c7b      	ldrb	r3, [r7, #17]
 800c53c:	b21a      	sxth	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	3308      	adds	r3, #8
 800c542:	430a      	orrs	r2, r1
 800c544:	b212      	sxth	r2, r2
 800c546:	801a      	strh	r2, [r3, #0]
	destination[5] = ((int16_t)raw_data[10] << 8) | (int16_t)raw_data[11];
 800c548:	7cbb      	ldrb	r3, [r7, #18]
 800c54a:	021b      	lsls	r3, r3, #8
 800c54c:	b219      	sxth	r1, r3
 800c54e:	7cfb      	ldrb	r3, [r7, #19]
 800c550:	b21a      	sxth	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	330a      	adds	r3, #10
 800c556:	430a      	orrs	r2, r1
 800c558:	b212      	sxth	r2, r2
 800c55a:	801a      	strh	r2, [r3, #0]
	destination[6] = ((int16_t)raw_data[12] << 8) | (int16_t)raw_data[13];
 800c55c:	7d3b      	ldrb	r3, [r7, #20]
 800c55e:	021b      	lsls	r3, r3, #8
 800c560:	b219      	sxth	r1, r3
 800c562:	7d7b      	ldrb	r3, [r7, #21]
 800c564:	b21a      	sxth	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	330c      	adds	r3, #12
 800c56a:	430a      	orrs	r2, r1
 800c56c:	b212      	sxth	r2, r2
 800c56e:	801a      	strh	r2, [r3, #0]
}
 800c570:	bf00      	nop
 800c572:	3718      	adds	r7, #24
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <readMag>:


uint8_t readMag(int16_t* destination)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
	const uint8_t st1 = readByte(AK8963_ADDRESS, AK8963_ST1);
 800c580:	2102      	movs	r1, #2
 800c582:	2018      	movs	r0, #24
 800c584:	f000 faf6 	bl	800cb74 <readByte>
 800c588:	4603      	mov	r3, r0
 800c58a:	75fb      	strb	r3, [r7, #23]
	if (st1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 800c58c:	7dfb      	ldrb	r3, [r7, #23]
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	2b00      	cmp	r3, #0
 800c594:	d03f      	beq.n	800c616 <readMag+0x9e>
	            uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	            readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 800c596:	f107 030c 	add.w	r3, r7, #12
 800c59a:	2207      	movs	r2, #7
 800c59c:	2103      	movs	r1, #3
 800c59e:	2018      	movs	r0, #24
 800c5a0:	f000 fb0e 	bl	800cbc0 <readBytes>
	            if (Mmode == 0x02 || Mmode == 0x04 || Mmode == 0x06) {  // continuous or external trigger read mode
 800c5a4:	4b1e      	ldr	r3, [pc, #120]	; (800c620 <readMag+0xa8>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d007      	beq.n	800c5bc <readMag+0x44>
 800c5ac:	4b1c      	ldr	r3, [pc, #112]	; (800c620 <readMag+0xa8>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b04      	cmp	r3, #4
 800c5b2:	d003      	beq.n	800c5bc <readMag+0x44>
 800c5b4:	4b1a      	ldr	r3, [pc, #104]	; (800c620 <readMag+0xa8>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	2b06      	cmp	r3, #6
 800c5ba:	d106      	bne.n	800c5ca <readMag+0x52>
	                if ((st1 & 0x02) != 0)                                       // check if data is not skipped
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	f003 0302 	and.w	r3, r3, #2
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <readMag+0x52>
	                    return 0;                                            // this should be after data reading to clear DRDY register
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e026      	b.n	800c618 <readMag+0xa0>
	            }

	            uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 800c5ca:	7cbb      	ldrb	r3, [r7, #18]
 800c5cc:	75bb      	strb	r3, [r7, #22]
	            if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 800c5ce:	7dbb      	ldrb	r3, [r7, #22]
 800c5d0:	f003 0308 	and.w	r3, r3, #8
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d11e      	bne.n	800c616 <readMag+0x9e>
	                destination[0] = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 800c5d8:	7b7b      	ldrb	r3, [r7, #13]
 800c5da:	021b      	lsls	r3, r3, #8
 800c5dc:	b21a      	sxth	r2, r3
 800c5de:	7b3b      	ldrb	r3, [r7, #12]
 800c5e0:	b21b      	sxth	r3, r3
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	b21a      	sxth	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	801a      	strh	r2, [r3, #0]
	                destination[1] = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
 800c5ec:	021b      	lsls	r3, r3, #8
 800c5ee:	b219      	sxth	r1, r3
 800c5f0:	7bbb      	ldrb	r3, [r7, #14]
 800c5f2:	b21a      	sxth	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3302      	adds	r3, #2
 800c5f8:	430a      	orrs	r2, r1
 800c5fa:	b212      	sxth	r2, r2
 800c5fc:	801a      	strh	r2, [r3, #0]
	                destination[2] = ((int16_t)raw_data[5] << 8) | raw_data[4];
 800c5fe:	7c7b      	ldrb	r3, [r7, #17]
 800c600:	021b      	lsls	r3, r3, #8
 800c602:	b219      	sxth	r1, r3
 800c604:	7c3b      	ldrb	r3, [r7, #16]
 800c606:	b21a      	sxth	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	3304      	adds	r3, #4
 800c60c:	430a      	orrs	r2, r1
 800c60e:	b212      	sxth	r2, r2
 800c610:	801a      	strh	r2, [r3, #0]
	                return 1;
 800c612:	2301      	movs	r3, #1
 800c614:	e000      	b.n	800c618 <readMag+0xa0>
	            }
	        }
	        return 0;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3718      	adds	r7, #24
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	2000003b 	.word	0x2000003b

0800c624 <write_accel_offset>:
	        }  // Remove gravity from the z-axis accelerometer bias calculation
	        else {
	            a_bias[2] += (float)CALIB_ACCEL_SENSITIVITY;
	        }
}
void write_accel_offset(MPU9250_t *MPU9250){
 800c624:	b580      	push	{r7, lr}
 800c626:	b08a      	sub	sp, #40	; 0x28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
	        // factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	        // non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	        // compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	        // the accelerometer biases calculated above must be divided by 8.

	        uint8_t read_data[2] = {0};
 800c62c:	2300      	movs	r3, #0
 800c62e:	843b      	strh	r3, [r7, #32]
	        int16_t acc_bias_reg[3] = {0, 0, 0};                      // A place to hold the factory accelerometer trim biases
 800c630:	2300      	movs	r3, #0
 800c632:	833b      	strh	r3, [r7, #24]
 800c634:	2300      	movs	r3, #0
 800c636:	837b      	strh	r3, [r7, #26]
 800c638:	2300      	movs	r3, #0
 800c63a:	83bb      	strh	r3, [r7, #28]
	        readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &read_data[0]);  // Read factory accelerometer trim values
 800c63c:	f107 0320 	add.w	r3, r7, #32
 800c640:	2202      	movs	r2, #2
 800c642:	2177      	movs	r1, #119	; 0x77
 800c644:	20d0      	movs	r0, #208	; 0xd0
 800c646:	f000 fabb 	bl	800cbc0 <readBytes>
	        acc_bias_reg[0] = ((int16_t)read_data[0] << 8) | read_data[1];
 800c64a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c64e:	021b      	lsls	r3, r3, #8
 800c650:	b21a      	sxth	r2, r3
 800c652:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c656:	b21b      	sxth	r3, r3
 800c658:	4313      	orrs	r3, r2
 800c65a:	b21b      	sxth	r3, r3
 800c65c:	833b      	strh	r3, [r7, #24]
	        readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &read_data[0]);
 800c65e:	f107 0320 	add.w	r3, r7, #32
 800c662:	2202      	movs	r2, #2
 800c664:	217a      	movs	r1, #122	; 0x7a
 800c666:	20d0      	movs	r0, #208	; 0xd0
 800c668:	f000 faaa 	bl	800cbc0 <readBytes>
	        acc_bias_reg[1] = ((int16_t)read_data[0] << 8) | read_data[1];
 800c66c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c670:	021b      	lsls	r3, r3, #8
 800c672:	b21a      	sxth	r2, r3
 800c674:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c678:	b21b      	sxth	r3, r3
 800c67a:	4313      	orrs	r3, r2
 800c67c:	b21b      	sxth	r3, r3
 800c67e:	837b      	strh	r3, [r7, #26]
	        readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &read_data[0]);
 800c680:	f107 0320 	add.w	r3, r7, #32
 800c684:	2202      	movs	r2, #2
 800c686:	217d      	movs	r1, #125	; 0x7d
 800c688:	20d0      	movs	r0, #208	; 0xd0
 800c68a:	f000 fa99 	bl	800cbc0 <readBytes>
	        acc_bias_reg[2] = ((int16_t)read_data[0] << 8) | read_data[1];
 800c68e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c692:	021b      	lsls	r3, r3, #8
 800c694:	b21a      	sxth	r2, r3
 800c696:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c69a:	b21b      	sxth	r3, r3
 800c69c:	4313      	orrs	r3, r2
 800c69e:	b21b      	sxth	r3, r3
 800c6a0:	83bb      	strh	r3, [r7, #28]

	        int16_t mask_bit[3] = {1, 1, 1};  // Define array to hold mask bit for each accelerometer bias axis
 800c6a2:	4a5e      	ldr	r2, [pc, #376]	; (800c81c <write_accel_offset+0x1f8>)
 800c6a4:	f107 0310 	add.w	r3, r7, #16
 800c6a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6ac:	6018      	str	r0, [r3, #0]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	8019      	strh	r1, [r3, #0]
	        for (int i = 0; i < 3; i++) {
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c6b6:	e063      	b.n	800c780 <write_accel_offset+0x15c>
	            if (acc_bias_reg[i] % 2) {
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	3328      	adds	r3, #40	; 0x28
 800c6be:	443b      	add	r3, r7
 800c6c0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	f003 0301 	and.w	r3, r3, #1
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d006      	beq.n	800c6de <write_accel_offset+0xba>
	                mask_bit[i] = 0;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	3328      	adds	r3, #40	; 0x28
 800c6d6:	443b      	add	r3, r7
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f823 2c18 	strh.w	r2, [r3, #-24]
	            }
	            acc_bias_reg[i] -= (int16_t)MPU9250->acc_bias[i] >> 3;  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	005b      	lsls	r3, r3, #1
 800c6e2:	3328      	adds	r3, #40	; 0x28
 800c6e4:	443b      	add	r3, r7
 800c6e6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	6879      	ldr	r1, [r7, #4]
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f0:	3302      	adds	r3, #2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	440b      	add	r3, r1
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	edd3 7a00 	vldr	s15, [r3]
 800c6fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c700:	ee17 3a90 	vmov	r3, s15
 800c704:	b21b      	sxth	r3, r3
 800c706:	10db      	asrs	r3, r3, #3
 800c708:	b21b      	sxth	r3, r3
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	b29b      	uxth	r3, r3
 800c710:	b21a      	sxth	r2, r3
 800c712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c714:	005b      	lsls	r3, r3, #1
 800c716:	3328      	adds	r3, #40	; 0x28
 800c718:	443b      	add	r3, r7
 800c71a:	f823 2c10 	strh.w	r2, [r3, #-16]
	            if (mask_bit[i]) {
 800c71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c720:	005b      	lsls	r3, r3, #1
 800c722:	3328      	adds	r3, #40	; 0x28
 800c724:	443b      	add	r3, r7
 800c726:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d016      	beq.n	800c75c <write_accel_offset+0x138>
	                acc_bias_reg[i] = acc_bias_reg[i] & ~mask_bit[i];  // Preserve temperature compensation bit
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	005b      	lsls	r3, r3, #1
 800c732:	3328      	adds	r3, #40	; 0x28
 800c734:	443b      	add	r3, r7
 800c736:	f933 2c10 	ldrsh.w	r2, [r3, #-16]
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	3328      	adds	r3, #40	; 0x28
 800c740:	443b      	add	r3, r7
 800c742:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800c746:	43db      	mvns	r3, r3
 800c748:	b21b      	sxth	r3, r3
 800c74a:	4013      	ands	r3, r2
 800c74c:	b21a      	sxth	r2, r3
 800c74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	3328      	adds	r3, #40	; 0x28
 800c754:	443b      	add	r3, r7
 800c756:	f823 2c10 	strh.w	r2, [r3, #-16]
 800c75a:	e00e      	b.n	800c77a <write_accel_offset+0x156>
	            } else {
	                acc_bias_reg[i] = acc_bias_reg[i] | 0x0001;  // Preserve temperature compensation bit
 800c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75e:	005b      	lsls	r3, r3, #1
 800c760:	3328      	adds	r3, #40	; 0x28
 800c762:	443b      	add	r3, r7
 800c764:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800c768:	f043 0301 	orr.w	r3, r3, #1
 800c76c:	b21a      	sxth	r2, r3
 800c76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	3328      	adds	r3, #40	; 0x28
 800c774:	443b      	add	r3, r7
 800c776:	f823 2c10 	strh.w	r2, [r3, #-16]
	        for (int i = 0; i < 3; i++) {
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	3301      	adds	r3, #1
 800c77e:	627b      	str	r3, [r7, #36]	; 0x24
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	2b02      	cmp	r3, #2
 800c784:	dd98      	ble.n	800c6b8 <write_accel_offset+0x94>
	            }
	        }

	        uint8_t write_data[6] = {0};
 800c786:	2300      	movs	r3, #0
 800c788:	60bb      	str	r3, [r7, #8]
 800c78a:	2300      	movs	r3, #0
 800c78c:	81bb      	strh	r3, [r7, #12]
	        write_data[0] = (acc_bias_reg[0] >> 8) & 0xFF;
 800c78e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c792:	121b      	asrs	r3, r3, #8
 800c794:	b21b      	sxth	r3, r3
 800c796:	b2db      	uxtb	r3, r3
 800c798:	723b      	strb	r3, [r7, #8]
	        write_data[1] = (acc_bias_reg[0]) & 0xFF;
 800c79a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	727b      	strb	r3, [r7, #9]
	        write_data[2] = (acc_bias_reg[1] >> 8) & 0xFF;
 800c7a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c7a6:	121b      	asrs	r3, r3, #8
 800c7a8:	b21b      	sxth	r3, r3
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	72bb      	strb	r3, [r7, #10]
	        write_data[3] = (acc_bias_reg[1]) & 0xFF;
 800c7ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	72fb      	strb	r3, [r7, #11]
	        write_data[4] = (acc_bias_reg[2] >> 8) & 0xFF;
 800c7b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c7ba:	121b      	asrs	r3, r3, #8
 800c7bc:	b21b      	sxth	r3, r3
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	733b      	strb	r3, [r7, #12]
	        write_data[5] = (acc_bias_reg[2]) & 0xFF;
 800c7c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	737b      	strb	r3, [r7, #13]

	        // Push accelerometer biases to hardware registers
	        writeByte(MPU9250_ADDRESS, XA_OFFSET_H, write_data[0]);
 800c7ca:	7a3b      	ldrb	r3, [r7, #8]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	2177      	movs	r1, #119	; 0x77
 800c7d0:	20d0      	movs	r0, #208	; 0xd0
 800c7d2:	f000 fa31 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, XA_OFFSET_L, write_data[1]);
 800c7d6:	7a7b      	ldrb	r3, [r7, #9]
 800c7d8:	461a      	mov	r2, r3
 800c7da:	2178      	movs	r1, #120	; 0x78
 800c7dc:	20d0      	movs	r0, #208	; 0xd0
 800c7de:	f000 fa2b 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, YA_OFFSET_H, write_data[2]);
 800c7e2:	7abb      	ldrb	r3, [r7, #10]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	217a      	movs	r1, #122	; 0x7a
 800c7e8:	20d0      	movs	r0, #208	; 0xd0
 800c7ea:	f000 fa25 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, YA_OFFSET_L, write_data[3]);
 800c7ee:	7afb      	ldrb	r3, [r7, #11]
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	217b      	movs	r1, #123	; 0x7b
 800c7f4:	20d0      	movs	r0, #208	; 0xd0
 800c7f6:	f000 fa1f 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, write_data[4]);
 800c7fa:	7b3b      	ldrb	r3, [r7, #12]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	217d      	movs	r1, #125	; 0x7d
 800c800:	20d0      	movs	r0, #208	; 0xd0
 800c802:	f000 fa19 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, write_data[5]);
 800c806:	7b7b      	ldrb	r3, [r7, #13]
 800c808:	461a      	mov	r2, r3
 800c80a:	217e      	movs	r1, #126	; 0x7e
 800c80c:	20d0      	movs	r0, #208	; 0xd0
 800c80e:	f000 fa13 	bl	800cc38 <writeByte>
}
 800c812:	bf00      	nop
 800c814:	3728      	adds	r7, #40	; 0x28
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	080109cc 	.word	0x080109cc

0800c820 <write_gyro_offset>:
void write_gyro_offset(MPU9250_t *MPU9250){
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	        uint8_t gyro_offset_data[6] = {0};
 800c828:	2300      	movs	r3, #0
 800c82a:	60bb      	str	r3, [r7, #8]
 800c82c:	2300      	movs	r3, #0
 800c82e:	81bb      	strh	r3, [r7, #12]
	        gyro_offset_data[0] = (-(int16_t)MPU9250->gyro_bias[0] / 4 >> 8) & 0xFF;  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	edd3 7a06 	vldr	s15, [r3, #24]
 800c836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c83a:	ee17 3a90 	vmov	r3, s15
 800c83e:	b21b      	sxth	r3, r3
 800c840:	2b00      	cmp	r3, #0
 800c842:	da00      	bge.n	800c846 <write_gyro_offset+0x26>
 800c844:	3303      	adds	r3, #3
 800c846:	109b      	asrs	r3, r3, #2
 800c848:	425b      	negs	r3, r3
 800c84a:	121b      	asrs	r3, r3, #8
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	723b      	strb	r3, [r7, #8]
	        gyro_offset_data[1] = (-(int16_t)MPU9250->gyro_bias[0] / 4) & 0xFF;       // Biases are additive, so change sign on calculated average gyro biases
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	edd3 7a06 	vldr	s15, [r3, #24]
 800c856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c85a:	ee17 3a90 	vmov	r3, s15
 800c85e:	b21b      	sxth	r3, r3
 800c860:	2b00      	cmp	r3, #0
 800c862:	da00      	bge.n	800c866 <write_gyro_offset+0x46>
 800c864:	3303      	adds	r3, #3
 800c866:	109b      	asrs	r3, r3, #2
 800c868:	425b      	negs	r3, r3
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	727b      	strb	r3, [r7, #9]
	        gyro_offset_data[2] = (-(int16_t)MPU9250->gyro_bias[1] / 4 >> 8) & 0xFF;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	edd3 7a07 	vldr	s15, [r3, #28]
 800c874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c878:	ee17 3a90 	vmov	r3, s15
 800c87c:	b21b      	sxth	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	da00      	bge.n	800c884 <write_gyro_offset+0x64>
 800c882:	3303      	adds	r3, #3
 800c884:	109b      	asrs	r3, r3, #2
 800c886:	425b      	negs	r3, r3
 800c888:	121b      	asrs	r3, r3, #8
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	72bb      	strb	r3, [r7, #10]
	        gyro_offset_data[3] = (-(int16_t)MPU9250->gyro_bias[1] / 4) & 0xFF;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	edd3 7a07 	vldr	s15, [r3, #28]
 800c894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c898:	ee17 3a90 	vmov	r3, s15
 800c89c:	b21b      	sxth	r3, r3
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	da00      	bge.n	800c8a4 <write_gyro_offset+0x84>
 800c8a2:	3303      	adds	r3, #3
 800c8a4:	109b      	asrs	r3, r3, #2
 800c8a6:	425b      	negs	r3, r3
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	72fb      	strb	r3, [r7, #11]
	        gyro_offset_data[4] = (-(int16_t)MPU9250->gyro_bias[2] / 4 >> 8) & 0xFF;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8b6:	ee17 3a90 	vmov	r3, s15
 800c8ba:	b21b      	sxth	r3, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	da00      	bge.n	800c8c2 <write_gyro_offset+0xa2>
 800c8c0:	3303      	adds	r3, #3
 800c8c2:	109b      	asrs	r3, r3, #2
 800c8c4:	425b      	negs	r3, r3
 800c8c6:	121b      	asrs	r3, r3, #8
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	733b      	strb	r3, [r7, #12]
	        gyro_offset_data[5] = (-(int16_t)MPU9250->gyro_bias[2] / 4) & 0xFF;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8d6:	ee17 3a90 	vmov	r3, s15
 800c8da:	b21b      	sxth	r3, r3
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	da00      	bge.n	800c8e2 <write_gyro_offset+0xc2>
 800c8e0:	3303      	adds	r3, #3
 800c8e2:	109b      	asrs	r3, r3, #2
 800c8e4:	425b      	negs	r3, r3
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	737b      	strb	r3, [r7, #13]

	        // Push gyro biases to hardware registers
	        writeByte(MPU9250_ADDRESS, XG_OFFSET_H, gyro_offset_data[0]);
 800c8ea:	7a3b      	ldrb	r3, [r7, #8]
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	2113      	movs	r1, #19
 800c8f0:	20d0      	movs	r0, #208	; 0xd0
 800c8f2:	f000 f9a1 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, XG_OFFSET_L, gyro_offset_data[1]);
 800c8f6:	7a7b      	ldrb	r3, [r7, #9]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	2114      	movs	r1, #20
 800c8fc:	20d0      	movs	r0, #208	; 0xd0
 800c8fe:	f000 f99b 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, YG_OFFSET_H, gyro_offset_data[2]);
 800c902:	7abb      	ldrb	r3, [r7, #10]
 800c904:	461a      	mov	r2, r3
 800c906:	2115      	movs	r1, #21
 800c908:	20d0      	movs	r0, #208	; 0xd0
 800c90a:	f000 f995 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, YG_OFFSET_L, gyro_offset_data[3]);
 800c90e:	7afb      	ldrb	r3, [r7, #11]
 800c910:	461a      	mov	r2, r3
 800c912:	2116      	movs	r1, #22
 800c914:	20d0      	movs	r0, #208	; 0xd0
 800c916:	f000 f98f 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, gyro_offset_data[4]);
 800c91a:	7b3b      	ldrb	r3, [r7, #12]
 800c91c:	461a      	mov	r2, r3
 800c91e:	2117      	movs	r1, #23
 800c920:	20d0      	movs	r0, #208	; 0xd0
 800c922:	f000 f989 	bl	800cc38 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, gyro_offset_data[5]);
 800c926:	7b7b      	ldrb	r3, [r7, #13]
 800c928:	461a      	mov	r2, r3
 800c92a:	2118      	movs	r1, #24
 800c92c:	20d0      	movs	r0, #208	; 0xd0
 800c92e:	f000 f983 	bl	800cc38 <writeByte>
}
 800c932:	bf00      	nop
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <MPU9250_Init>:
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
  HAL_Delay(100);
}

void MPU9250_Init(MPU9250_t *MPU9250){
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
	// Initialize MPU9250 device
	 // wake up device
	getAres(MPU9250);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f8e5 	bl	800cb14 <getAres>
	getGres(MPU9250);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f8ae 	bl	800caac <getGres>
	getMres(MPU9250);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f88b 	bl	800ca6c <getMres>
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800c956:	2280      	movs	r2, #128	; 0x80
 800c958:	216b      	movs	r1, #107	; 0x6b
 800c95a:	20d0      	movs	r0, #208	; 0xd0
 800c95c:	f000 f96c 	bl	800cc38 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 800c960:	2064      	movs	r0, #100	; 0x64
 800c962:	f7f4 fdb0 	bl	80014c6 <HAL_Delay>

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800c966:	2200      	movs	r2, #0
 800c968:	216b      	movs	r1, #107	; 0x6b
 800c96a:	20d0      	movs	r0, #208	; 0xd0
 800c96c:	f000 f964 	bl	800cc38 <writeByte>
	HAL_Delay(100);
 800c970:	2064      	movs	r0, #100	; 0x64
 800c972:	f7f4 fda8 	bl	80014c6 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 800c976:	2201      	movs	r2, #1
 800c978:	216b      	movs	r1, #107	; 0x6b
 800c97a:	20d0      	movs	r0, #208	; 0xd0
 800c97c:	f000 f95c 	bl	800cc38 <writeByte>
	HAL_Delay(100);
 800c980:	2064      	movs	r0, #100	; 0x64
 800c982:	f7f4 fda0 	bl	80014c6 <HAL_Delay>

	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 800c986:	2203      	movs	r2, #3
 800c988:	211a      	movs	r1, #26
 800c98a:	20d0      	movs	r0, #208	; 0xd0
 800c98c:	f000 f954 	bl	800cc38 <writeByte>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 800c990:	2204      	movs	r2, #4
 800c992:	2119      	movs	r1, #25
 800c994:	20d0      	movs	r0, #208	; 0xd0
 800c996:	f000 f94f 	bl	800cc38 <writeByte>

	 // Set gyroscope full scale range
	 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 800c99a:	211b      	movs	r1, #27
 800c99c:	20d0      	movs	r0, #208	; 0xd0
 800c99e:	f000 f8e9 	bl	800cb74 <readByte>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                     // Clear self-test bits [7:5]
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
 800c9a8:	f003 031f 	and.w	r3, r3, #31
 800c9ac:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x03;                                     // Clear Fchoice bits [1:0]
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
 800c9b0:	f023 0303 	bic.w	r3, r3, #3
 800c9b4:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
 800c9b8:	f023 0318 	bic.w	r3, r3, #24
 800c9bc:	73fb      	strb	r3, [r7, #15]
	  c = c | (Gscale << 3);       // Set full scale range for the gyro
 800c9be:	4b29      	ldr	r3, [pc, #164]	; (800ca64 <MPU9250_Init+0x128>)
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	b25a      	sxtb	r2, r3
 800c9c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	b25b      	sxtb	r3, r3
 800c9ce:	73fb      	strb	r3, [r7, #15]
	  c = c | (0x03 & 0x03);   // Set Fchoice for the gyro
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	f043 0303 	orr.w	r3, r3, #3
 800c9d6:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Set full scale range for the gyro
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	211b      	movs	r1, #27
 800c9de:	20d0      	movs	r0, #208	; 0xd0
 800c9e0:	f000 f92a 	bl	800cc38 <writeByte>

	 // Set accelerometer configuration
	  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 800c9e4:	211c      	movs	r1, #28
 800c9e6:	20d0      	movs	r0, #208	; 0xd0
 800c9e8:	f000 f8c4 	bl	800cb74 <readByte>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                 // Clear self-test bits [7:5]
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	f003 031f 	and.w	r3, r3, #31
 800c9f6:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 800c9f8:	7bfb      	ldrb	r3, [r7, #15]
 800c9fa:	f023 0318 	bic.w	r3, r3, #24
 800c9fe:	73fb      	strb	r3, [r7, #15]
	  c = c | (Ascale << 3);  // Set full scale range for the accelerometer
 800ca00:	4b19      	ldr	r3, [pc, #100]	; (800ca68 <MPU9250_Init+0x12c>)
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	00db      	lsls	r3, r3, #3
 800ca06:	b25a      	sxtb	r2, r3
 800ca08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	b25b      	sxtb	r3, r3
 800ca10:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Set full scale range for the accelerometer
 800ca12:	7bfb      	ldrb	r3, [r7, #15]
 800ca14:	461a      	mov	r2, r3
 800ca16:	211c      	movs	r1, #28
 800ca18:	20d0      	movs	r0, #208	; 0xd0
 800ca1a:	f000 f90d 	bl	800cc38 <writeByte>

	 // Set accelerometer sample rate configuration
	 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 800ca1e:	211d      	movs	r1, #29
 800ca20:	20d0      	movs	r0, #208	; 0xd0
 800ca22:	f000 f8a7 	bl	800cb74 <readByte>
 800ca26:	4603      	mov	r3, r0
 800ca28:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
 800ca2c:	f023 030f 	bic.w	r3, r3, #15
 800ca30:	73fb      	strb	r3, [r7, #15]
	  c = c | (~(0x01 << 3) & 0x08);    // Set accel_fchoice_b to 1
	  c = c | (0x03 & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
 800ca34:	f043 0303 	orr.w	r3, r3, #3
 800ca38:	73fb      	strb	r3, [r7, #15]

	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800ca3a:	7bfb      	ldrb	r3, [r7, #15]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	211d      	movs	r1, #29
 800ca40:	20d0      	movs	r0, #208	; 0xd0
 800ca42:	f000 f8f9 	bl	800cc38 <writeByte>
	 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	  // Configure Interrupts and Bypass Enable
	  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	  // can join the I2C bus and all can be controlled by the Arduino as master
	   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 800ca46:	2222      	movs	r2, #34	; 0x22
 800ca48:	2137      	movs	r1, #55	; 0x37
 800ca4a:	20d0      	movs	r0, #208	; 0xd0
 800ca4c:	f000 f8f4 	bl	800cc38 <writeByte>
	   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 800ca50:	2201      	movs	r2, #1
 800ca52:	2138      	movs	r1, #56	; 0x38
 800ca54:	20d0      	movs	r0, #208	; 0xd0
 800ca56:	f000 f8ef 	bl	800cc38 <writeByte>

}
 800ca5a:	bf00      	nop
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20000039 	.word	0x20000039
 800ca68:	20000038 	.word	0x20000038

0800ca6c <getMres>:

void getMres(MPU9250_t *MPU9250) {
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  switch (Mscale)
 800ca74:	4b0a      	ldr	r3, [pc, #40]	; (800caa0 <getMres+0x34>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d002      	beq.n	800ca82 <getMres+0x16>
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d004      	beq.n	800ca8a <getMres+0x1e>
          break;
    case MFS_16BITS:
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 800ca80:	e007      	b.n	800ca92 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./8190.; // Proper scale to return milliGauss
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4a07      	ldr	r2, [pc, #28]	; (800caa4 <getMres+0x38>)
 800ca86:	609a      	str	r2, [r3, #8]
          break;
 800ca88:	e003      	b.n	800ca92 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4a06      	ldr	r2, [pc, #24]	; (800caa8 <getMres+0x3c>)
 800ca8e:	609a      	str	r2, [r3, #8]
          break;
 800ca90:	bf00      	nop
}
 800ca92:	bf00      	nop
 800ca94:	370c      	adds	r7, #12
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	2000003a 	.word	0x2000003a
 800caa4:	40bfebff 	.word	0x40bfebff
 800caa8:	3fbfebff 	.word	0x3fbfebff

0800caac <getGres>:


void getGres(MPU9250_t *MPU9250) {
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  switch (Gscale)
 800cab4:	4b12      	ldr	r3, [pc, #72]	; (800cb00 <getGres+0x54>)
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	3b01      	subs	r3, #1
 800caba:	2b03      	cmp	r3, #3
 800cabc:	d81a      	bhi.n	800caf4 <getGres+0x48>
 800cabe:	a201      	add	r2, pc, #4	; (adr r2, 800cac4 <getGres+0x18>)
 800cac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac4:	0800cad5 	.word	0x0800cad5
 800cac8:	0800cadd 	.word	0x0800cadd
 800cacc:	0800cae5 	.word	0x0800cae5
 800cad0:	0800caed 	.word	0x0800caed
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          MPU9250->gyro_resolution = 250.0/32768.0;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a0b      	ldr	r2, [pc, #44]	; (800cb04 <getGres+0x58>)
 800cad8:	605a      	str	r2, [r3, #4]
          break;
 800cada:	e00b      	b.n	800caf4 <getGres+0x48>
    case GFS_500DPS:
    	MPU9250->gyro_resolution = 500.0/32768.0;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a0a      	ldr	r2, [pc, #40]	; (800cb08 <getGres+0x5c>)
 800cae0:	605a      	str	r2, [r3, #4]
          break;
 800cae2:	e007      	b.n	800caf4 <getGres+0x48>
    case GFS_1000DPS:
    	MPU9250->gyro_resolution = 1000.0/32768.0;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a09      	ldr	r2, [pc, #36]	; (800cb0c <getGres+0x60>)
 800cae8:	605a      	str	r2, [r3, #4]
          break;
 800caea:	e003      	b.n	800caf4 <getGres+0x48>
    case GFS_2000DPS:
    	MPU9250->gyro_resolution = 2000.0/32768.0;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a08      	ldr	r2, [pc, #32]	; (800cb10 <getGres+0x64>)
 800caf0:	605a      	str	r2, [r3, #4]
          break;
 800caf2:	bf00      	nop
  }
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr
 800cb00:	20000039 	.word	0x20000039
 800cb04:	3bfa0000 	.word	0x3bfa0000
 800cb08:	3c7a0000 	.word	0x3c7a0000
 800cb0c:	3cfa0000 	.word	0x3cfa0000
 800cb10:	3d7a0000 	.word	0x3d7a0000

0800cb14 <getAres>:


void getAres(MPU9250_t *MPU9250) {
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  switch (Ascale)
 800cb1c:	4b14      	ldr	r3, [pc, #80]	; (800cb70 <getAres+0x5c>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	3b01      	subs	r3, #1
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	d81e      	bhi.n	800cb64 <getAres+0x50>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <getAres+0x18>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb3d 	.word	0x0800cb3d
 800cb30:	0800cb47 	.word	0x0800cb47
 800cb34:	0800cb51 	.word	0x0800cb51
 800cb38:	0800cb5b 	.word	0x0800cb5b
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	MPU9250->acc_resolution = 2.0/16384.0;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800cb42:	601a      	str	r2, [r3, #0]
          break;
 800cb44:	e00e      	b.n	800cb64 <getAres+0x50>
    case AFS_4G:
    	MPU9250->acc_resolution = 4.0/16384.0;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800cb4c:	601a      	str	r2, [r3, #0]
          break;
 800cb4e:	e009      	b.n	800cb64 <getAres+0x50>
    case AFS_8G:
    	MPU9250->acc_resolution = 8.0/16384.0;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800cb56:	601a      	str	r2, [r3, #0]
          break;
 800cb58:	e004      	b.n	800cb64 <getAres+0x50>
    case AFS_16G:
    	MPU9250->acc_resolution = 16.0/16384.0;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 800cb60:	601a      	str	r2, [r3, #0]
          break;
 800cb62:	bf00      	nop
  }
}
 800cb64:	bf00      	nop
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	20000038 	.word	0x20000038

0800cb74 <readByte>:


char readByte(uint8_t I2C_ADDRESS, uint8_t RegAddr){
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	460a      	mov	r2, r1
 800cb7e:	71fb      	strb	r3, [r7, #7]
 800cb80:	4613      	mov	r3, r2
 800cb82:	71bb      	strb	r3, [r7, #6]
	char data[1];
	char data_write[1];
	data_write[0] = RegAddr;
 800cb84:	79bb      	ldrb	r3, [r7, #6]
 800cb86:	723b      	strb	r3, [r7, #8]

	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 800cb88:	79fb      	ldrb	r3, [r7, #7]
 800cb8a:	b299      	uxth	r1, r3
 800cb8c:	f107 0208 	add.w	r2, r7, #8
 800cb90:	2364      	movs	r3, #100	; 0x64
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	2301      	movs	r3, #1
 800cb96:	4809      	ldr	r0, [pc, #36]	; (800cbbc <readByte+0x48>)
 800cb98:	f7f7 ffa4 	bl	8004ae4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1, (uint16_t)100);
 800cb9c:	79fb      	ldrb	r3, [r7, #7]
 800cb9e:	b299      	uxth	r1, r3
 800cba0:	f107 020c 	add.w	r2, r7, #12
 800cba4:	2364      	movs	r3, #100	; 0x64
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	2301      	movs	r3, #1
 800cbaa:	4804      	ldr	r0, [pc, #16]	; (800cbbc <readByte+0x48>)
 800cbac:	f7f8 f88e 	bl	8004ccc <HAL_I2C_Master_Receive>

	return data[0];
 800cbb0:	7b3b      	ldrb	r3, [r7, #12]

}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20000a34 	.word	0x20000a34

0800cbc0 <readBytes>:
void readBytes(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t count, uint8_t * dest)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08a      	sub	sp, #40	; 0x28
 800cbc4:	af02      	add	r7, sp, #8
 800cbc6:	603b      	str	r3, [r7, #0]
 800cbc8:	4603      	mov	r3, r0
 800cbca:	71fb      	strb	r3, [r7, #7]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	71bb      	strb	r3, [r7, #6]
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	717b      	strb	r3, [r7, #5]
	char data[14];
	char data_write[1];
	data_write[0] = RegAddr;
 800cbd4:	79bb      	ldrb	r3, [r7, #6]
 800cbd6:	723b      	strb	r3, [r7, #8]
	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 800cbd8:	79fb      	ldrb	r3, [r7, #7]
 800cbda:	b299      	uxth	r1, r3
 800cbdc:	f107 0208 	add.w	r2, r7, #8
 800cbe0:	2364      	movs	r3, #100	; 0x64
 800cbe2:	9300      	str	r3, [sp, #0]
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	4813      	ldr	r0, [pc, #76]	; (800cc34 <readBytes+0x74>)
 800cbe8:	f7f7 ff7c 	bl	8004ae4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count, (uint16_t)100);
 800cbec:	79fb      	ldrb	r3, [r7, #7]
 800cbee:	b299      	uxth	r1, r3
 800cbf0:	797b      	ldrb	r3, [r7, #5]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	f107 020c 	add.w	r2, r7, #12
 800cbf8:	2064      	movs	r0, #100	; 0x64
 800cbfa:	9000      	str	r0, [sp, #0]
 800cbfc:	480d      	ldr	r0, [pc, #52]	; (800cc34 <readBytes+0x74>)
 800cbfe:	f7f8 f865 	bl	8004ccc <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 800cc02:	2300      	movs	r3, #0
 800cc04:	61fb      	str	r3, [r7, #28]
 800cc06:	e00b      	b.n	800cc20 <readBytes+0x60>
			dest[ii] = data[ii];
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	f107 010c 	add.w	r1, r7, #12
 800cc12:	69fa      	ldr	r2, [r7, #28]
 800cc14:	440a      	add	r2, r1
 800cc16:	7812      	ldrb	r2, [r2, #0]
 800cc18:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	61fb      	str	r3, [r7, #28]
 800cc20:	797b      	ldrb	r3, [r7, #5]
 800cc22:	69fa      	ldr	r2, [r7, #28]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	dbef      	blt.n	800cc08 <readBytes+0x48>
		}

}
 800cc28:	bf00      	nop
 800cc2a:	bf00      	nop
 800cc2c:	3720      	adds	r7, #32
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20000a34 	.word	0x20000a34

0800cc38 <writeByte>:

void writeByte(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t data){
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	4603      	mov	r3, r0
 800cc40:	71fb      	strb	r3, [r7, #7]
 800cc42:	460b      	mov	r3, r1
 800cc44:	71bb      	strb	r3, [r7, #6]
 800cc46:	4613      	mov	r3, r2
 800cc48:	717b      	strb	r3, [r7, #5]
	char data_write[2];
	data_write[0] = RegAddr;
 800cc4a:	79bb      	ldrb	r3, [r7, #6]
 800cc4c:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 800cc4e:	797b      	ldrb	r3, [r7, #5]
 800cc50:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 2, 100);
 800cc52:	79fb      	ldrb	r3, [r7, #7]
 800cc54:	b299      	uxth	r1, r3
 800cc56:	f107 020c 	add.w	r2, r7, #12
 800cc5a:	2364      	movs	r3, #100	; 0x64
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	2302      	movs	r3, #2
 800cc60:	4803      	ldr	r0, [pc, #12]	; (800cc70 <writeByte+0x38>)
 800cc62:	f7f7 ff3f 	bl	8004ae4 <HAL_I2C_Master_Transmit>
}
 800cc66:	bf00      	nop
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20000a34 	.word	0x20000a34

0800cc74 <MPU9250SetDefault>:

void MPU9250SetDefault(MPU9250_t *MPU9250){
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
	MPU9250 -> acc_resolution = 0.;                // scale resolutions per LSB for the sensors
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f04f 0200 	mov.w	r2, #0
 800cc82:	601a      	str	r2, [r3, #0]
	MPU9250 -> gyro_resolution = 0.;               // scale resolutions per LSB for the sensors
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f04f 0200 	mov.w	r2, #0
 800cc8a:	605a      	str	r2, [r3, #4]
	MPU9250 -> mag_resolution = 0.;                // scale resolutions per LSB for the sensors
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f04f 0200 	mov.w	r2, #0
 800cc92:	609a      	str	r2, [r3, #8]

		// Calibration Parameters
	MPU9250 -> acc_bias[0] = 0.;   // acc calibration value in ACCEL_FS_SEL: 2g
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f04f 0200 	mov.w	r2, #0
 800cc9a:	60da      	str	r2, [r3, #12]
	MPU9250 -> acc_bias[1] = 0.;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f04f 0200 	mov.w	r2, #0
 800cca2:	611a      	str	r2, [r3, #16]
	MPU9250 -> acc_bias[2] = 0.;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f04f 0200 	mov.w	r2, #0
 800ccaa:	615a      	str	r2, [r3, #20]
	MPU9250 -> gyro_bias[0] = 0.;  // gyro calibration value in GYRO_FS_SEL: 250dps
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f04f 0200 	mov.w	r2, #0
 800ccb2:	619a      	str	r2, [r3, #24]
	MPU9250 -> gyro_bias[1] = 0.;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f04f 0200 	mov.w	r2, #0
 800ccba:	61da      	str	r2, [r3, #28]
	MPU9250 -> gyro_bias[2] = 0.;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f04f 0200 	mov.w	r2, #0
 800ccc2:	621a      	str	r2, [r3, #32]
	MPU9250 -> mag_bias_factory[0] = 0.;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f04f 0200 	mov.w	r2, #0
 800ccca:	625a      	str	r2, [r3, #36]	; 0x24
	MPU9250 -> mag_bias_factory[1] = 0.;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f04f 0200 	mov.w	r2, #0
 800ccd2:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250 -> mag_bias_factory[2] = 0.;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f04f 0200 	mov.w	r2, #0
 800ccda:	62da      	str	r2, [r3, #44]	; 0x2c

	MPU9250 -> mag_bias[0] = 0.;  // mag calibration value in MAG_OUTPUT_BITS: 16BITS
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f04f 0200 	mov.w	r2, #0
 800cce2:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250 -> mag_bias[1] = 0.;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f04f 0200 	mov.w	r2, #0
 800ccea:	635a      	str	r2, [r3, #52]	; 0x34
	MPU9250 -> mag_bias[2] = 0.;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f04f 0200 	mov.w	r2, #0
 800ccf2:	639a      	str	r2, [r3, #56]	; 0x38
	MPU9250 -> mag_scale[0] = 1.;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ccfa:	63da      	str	r2, [r3, #60]	; 0x3c
	MPU9250 -> mag_scale[1] = 1.;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cd02:	641a      	str	r2, [r3, #64]	; 0x40
	MPU9250 -> mag_scale[2] = 1.;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cd0a:	645a      	str	r2, [r3, #68]	; 0x44
	MPU9250 -> magnetic_declination  = 10.91;  // Moscow, 24th June
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a45      	ldr	r2, [pc, #276]	; (800ce24 <MPU9250SetDefault+0x1b0>)
 800cd10:	649a      	str	r2, [r3, #72]	; 0x48

		    // Temperature
	MPU9250 -> temperature_count = 0.;  // temperature raw count output
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	MPU9250 -> temperature = 0.;        // Stores the real internal chip temperature in degrees Celsius
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f04f 0200 	mov.w	r2, #0
 800cd20:	651a      	str	r2, [r3, #80]	; 0x50

		// Self Test
	MPU9250 -> self_test_result[0] = 0.;  // holds results of gyro and accelerometer self test
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f04f 0200 	mov.w	r2, #0
 800cd28:	655a      	str	r2, [r3, #84]	; 0x54
	MPU9250 -> self_test_result[1] = 0.;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f04f 0200 	mov.w	r2, #0
 800cd30:	659a      	str	r2, [r3, #88]	; 0x58
	MPU9250 -> self_test_result[2] = 0.;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f04f 0200 	mov.w	r2, #0
 800cd38:	65da      	str	r2, [r3, #92]	; 0x5c
	MPU9250 -> self_test_result[3] = 0.;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f04f 0200 	mov.w	r2, #0
 800cd40:	661a      	str	r2, [r3, #96]	; 0x60
	MPU9250 -> self_test_result[4] = 0.;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f04f 0200 	mov.w	r2, #0
 800cd48:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250 -> self_test_result[5] = 0.;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f04f 0200 	mov.w	r2, #0
 800cd50:	669a      	str	r2, [r3, #104]	; 0x68

		// IMU Data
	MPU9250 -> a[0] = 0.;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f04f 0200 	mov.w	r2, #0
 800cd58:	66da      	str	r2, [r3, #108]	; 0x6c
	MPU9250 -> a[1] = 0.;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f04f 0200 	mov.w	r2, #0
 800cd60:	671a      	str	r2, [r3, #112]	; 0x70
	MPU9250 -> a[2] = 0.;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f04f 0200 	mov.w	r2, #0
 800cd68:	675a      	str	r2, [r3, #116]	; 0x74
	MPU9250 -> g[0] = 0.;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f04f 0200 	mov.w	r2, #0
 800cd70:	679a      	str	r2, [r3, #120]	; 0x78
	MPU9250 -> g[1] = 0.;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f04f 0200 	mov.w	r2, #0
 800cd78:	67da      	str	r2, [r3, #124]	; 0x7c
	MPU9250 -> g[2] = 0.;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f04f 0200 	mov.w	r2, #0
 800cd80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MPU9250 -> m[0] = 0.;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f04f 0200 	mov.w	r2, #0
 800cd8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	MPU9250 -> m[1] = 0.;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f04f 0200 	mov.w	r2, #0
 800cd94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	MPU9250 -> m[2] = 0.;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f04f 0200 	mov.w	r2, #0
 800cd9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	MPU9250 -> q[0] = 1.;  // vector to hold quaternion
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cda8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	MPU9250 -> q[1] = 0.;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f04f 0200 	mov.w	r2, #0
 800cdb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	MPU9250 -> q[2] = 0.;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f04f 0200 	mov.w	r2, #0
 800cdbc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	MPU9250 -> q[3] = 0.;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f04f 0200 	mov.w	r2, #0
 800cdc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	MPU9250 -> rpy[0] = 0.;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f04f 0200 	mov.w	r2, #0
 800cdd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	MPU9250 -> rpy[1] = 0.;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f04f 0200 	mov.w	r2, #0
 800cdda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	MPU9250 -> rpy[2] = 0.;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f04f 0200 	mov.w	r2, #0
 800cde4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	MPU9250 -> lin_acc[0] = 0.;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f04f 0200 	mov.w	r2, #0
 800cdee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	MPU9250 -> lin_acc[1] = 0.;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f04f 0200 	mov.w	r2, #0
 800cdf8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	MPU9250 -> lin_acc[2] = 0.;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f04f 0200 	mov.w	r2, #0
 800ce02:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	MPU9250 -> has_connected = 0;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	MPU9250 -> n_filter_iter = 1;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

}
 800ce16:	bf00      	nop
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	412e8f5c 	.word	0x412e8f5c

0800ce28 <update_madgwick>:

void update_madgwick(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float* q){
 800ce28:	b5b0      	push	{r4, r5, r7, lr}
 800ce2a:	b08a      	sub	sp, #40	; 0x28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800ce32:	edc7 0a08 	vstr	s1, [r7, #32]
 800ce36:	ed87 1a07 	vstr	s2, [r7, #28]
 800ce3a:	edc7 1a06 	vstr	s3, [r7, #24]
 800ce3e:	ed87 2a05 	vstr	s4, [r7, #20]
 800ce42:	edc7 2a04 	vstr	s5, [r7, #16]
 800ce46:	ed87 3a03 	vstr	s6, [r7, #12]
 800ce4a:	edc7 3a02 	vstr	s7, [r7, #8]
 800ce4e:	ed87 4a01 	vstr	s8, [r7, #4]
 800ce52:	6038      	str	r0, [r7, #0]
	newTime = micros();
 800ce54:	f7fe ff46 	bl	800bce4 <micros>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	4a25      	ldr	r2, [pc, #148]	; (800cef0 <update_madgwick+0xc8>)
 800ce5c:	6013      	str	r3, [r2, #0]
	deltaT = newTime - oldTime;
 800ce5e:	4b24      	ldr	r3, [pc, #144]	; (800cef0 <update_madgwick+0xc8>)
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	4b24      	ldr	r3, [pc, #144]	; (800cef4 <update_madgwick+0xcc>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7f3 fb23 	bl	80004b4 <__aeabi_ui2d>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	4921      	ldr	r1, [pc, #132]	; (800cef8 <update_madgwick+0xd0>)
 800ce74:	e9c1 2300 	strd	r2, r3, [r1]
	oldTime = newTime;
 800ce78:	4b1d      	ldr	r3, [pc, #116]	; (800cef0 <update_madgwick+0xc8>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a1d      	ldr	r2, [pc, #116]	; (800cef4 <update_madgwick+0xcc>)
 800ce7e:	6013      	str	r3, [r2, #0]
	deltaT = fabs(deltaT * 0.001 * 0.001);
 800ce80:	4b1d      	ldr	r3, [pc, #116]	; (800cef8 <update_madgwick+0xd0>)
 800ce82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce86:	a318      	add	r3, pc, #96	; (adr r3, 800cee8 <update_madgwick+0xc0>)
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	f7f3 fb8c 	bl	80005a8 <__aeabi_dmul>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	4610      	mov	r0, r2
 800ce96:	4619      	mov	r1, r3
 800ce98:	a313      	add	r3, pc, #76	; (adr r3, 800cee8 <update_madgwick+0xc0>)
 800ce9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9e:	f7f3 fb83 	bl	80005a8 <__aeabi_dmul>
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	4614      	mov	r4, r2
 800cea8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800ceac:	4b12      	ldr	r3, [pc, #72]	; (800cef8 <update_madgwick+0xd0>)
 800ceae:	e9c3 4500 	strd	r4, r5, [r3]

	madgwick(ax, ay, az, gx, gy, gz, mx, my, mz, q);
 800ceb2:	6838      	ldr	r0, [r7, #0]
 800ceb4:	ed97 4a01 	vldr	s8, [r7, #4]
 800ceb8:	edd7 3a02 	vldr	s7, [r7, #8]
 800cebc:	ed97 3a03 	vldr	s6, [r7, #12]
 800cec0:	edd7 2a04 	vldr	s5, [r7, #16]
 800cec4:	ed97 2a05 	vldr	s4, [r7, #20]
 800cec8:	edd7 1a06 	vldr	s3, [r7, #24]
 800cecc:	ed97 1a07 	vldr	s2, [r7, #28]
 800ced0:	edd7 0a08 	vldr	s1, [r7, #32]
 800ced4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800ced8:	f000 f810 	bl	800cefc <madgwick>
}
 800cedc:	bf00      	nop
 800cede:	3728      	adds	r7, #40	; 0x28
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bdb0      	pop	{r4, r5, r7, pc}
 800cee4:	f3af 8000 	nop.w
 800cee8:	d2f1a9fc 	.word	0xd2f1a9fc
 800ceec:	3f50624d 	.word	0x3f50624d
 800cef0:	20001850 	.word	0x20001850
 800cef4:	20001854 	.word	0x20001854
 800cef8:	20001848 	.word	0x20001848

0800cefc <madgwick>:

void madgwick(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float* q){
 800cefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf00:	b0eb      	sub	sp, #428	; 0x1ac
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf08:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800cf0c:	ed83 0a00 	vstr	s0, [r3]
 800cf10:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800cf18:	edc3 0a00 	vstr	s1, [r3]
 800cf1c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf20:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800cf24:	ed83 1a00 	vstr	s2, [r3]
 800cf28:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf2c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800cf30:	edc3 1a00 	vstr	s3, [r3]
 800cf34:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf38:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800cf3c:	ed83 2a00 	vstr	s4, [r3]
 800cf40:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf44:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cf48:	edc3 2a00 	vstr	s5, [r3]
 800cf4c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf50:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cf54:	ed83 3a00 	vstr	s6, [r3]
 800cf58:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf5c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cf60:	edc3 3a00 	vstr	s7, [r3]
 800cf64:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf68:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800cf6c:	ed83 4a00 	vstr	s8, [r3]
 800cf70:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf74:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cf78:	6018      	str	r0, [r3, #0]
	double q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];  // short name local variable for readability
 800cf7a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7f3 fab6 	bl	80004f8 <__aeabi_f2d>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 800cf94:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cf98:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7f3 faa8 	bl	80004f8 <__aeabi_f2d>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 800cfb0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cfb4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	3308      	adds	r3, #8
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7f3 fa9a 	bl	80004f8 <__aeabi_f2d>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
 800cfcc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cfd0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	330c      	adds	r3, #12
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7f3 fa8c 	bl	80004f8 <__aeabi_f2d>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
	        double qDot1, qDot2, qDot3, qDot4;
	        double hx, hy;
	        double _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	        // Rate of change of quaternion from gyroscope
	        qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800cfe8:	f8d7 4198 	ldr.w	r4, [r7, #408]	; 0x198
 800cfec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800cff0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800cff4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800cff8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800cffc:	6818      	ldr	r0, [r3, #0]
 800cffe:	f7f3 fa7b 	bl	80004f8 <__aeabi_f2d>
 800d002:	4602      	mov	r2, r0
 800d004:	460b      	mov	r3, r1
 800d006:	4620      	mov	r0, r4
 800d008:	4629      	mov	r1, r5
 800d00a:	f7f3 facd 	bl	80005a8 <__aeabi_dmul>
 800d00e:	4602      	mov	r2, r0
 800d010:	460b      	mov	r3, r1
 800d012:	4614      	mov	r4, r2
 800d014:	461d      	mov	r5, r3
 800d016:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d01a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d01e:	6818      	ldr	r0, [r3, #0]
 800d020:	f7f3 fa6a 	bl	80004f8 <__aeabi_f2d>
 800d024:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d028:	f7f3 fabe 	bl	80005a8 <__aeabi_dmul>
 800d02c:	4602      	mov	r2, r0
 800d02e:	460b      	mov	r3, r1
 800d030:	4620      	mov	r0, r4
 800d032:	4629      	mov	r1, r5
 800d034:	f7f3 f900 	bl	8000238 <__aeabi_dsub>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4614      	mov	r4, r2
 800d03e:	461d      	mov	r5, r3
 800d040:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d044:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	f7f3 fa55 	bl	80004f8 <__aeabi_f2d>
 800d04e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d052:	f7f3 faa9 	bl	80005a8 <__aeabi_dmul>
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	4620      	mov	r0, r4
 800d05c:	4629      	mov	r1, r5
 800d05e:	f7f3 f8eb 	bl	8000238 <__aeabi_dsub>
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	4610      	mov	r0, r2
 800d068:	4619      	mov	r1, r3
 800d06a:	f04f 0200 	mov.w	r2, #0
 800d06e:	4bd7      	ldr	r3, [pc, #860]	; (800d3cc <madgwick+0x4d0>)
 800d070:	f7f3 fa9a 	bl	80005a8 <__aeabi_dmul>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	        qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800d07c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d080:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d084:	6818      	ldr	r0, [r3, #0]
 800d086:	f7f3 fa37 	bl	80004f8 <__aeabi_f2d>
 800d08a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800d08e:	f7f3 fa8b 	bl	80005a8 <__aeabi_dmul>
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	4614      	mov	r4, r2
 800d098:	461d      	mov	r5, r3
 800d09a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d09e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d0a2:	6818      	ldr	r0, [r3, #0]
 800d0a4:	f7f3 fa28 	bl	80004f8 <__aeabi_f2d>
 800d0a8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d0ac:	f7f3 fa7c 	bl	80005a8 <__aeabi_dmul>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	f7f3 f8c0 	bl	800023c <__adddf3>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	4614      	mov	r4, r2
 800d0c2:	461d      	mov	r5, r3
 800d0c4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d0c8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d0cc:	6818      	ldr	r0, [r3, #0]
 800d0ce:	f7f3 fa13 	bl	80004f8 <__aeabi_f2d>
 800d0d2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d0d6:	f7f3 fa67 	bl	80005a8 <__aeabi_dmul>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	4620      	mov	r0, r4
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	f7f3 f8a9 	bl	8000238 <__aeabi_dsub>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	f04f 0200 	mov.w	r2, #0
 800d0f2:	4bb6      	ldr	r3, [pc, #728]	; (800d3cc <madgwick+0x4d0>)
 800d0f4:	f7f3 fa58 	bl	80005a8 <__aeabi_dmul>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
	        qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800d100:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d104:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d108:	6818      	ldr	r0, [r3, #0]
 800d10a:	f7f3 f9f5 	bl	80004f8 <__aeabi_f2d>
 800d10e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800d112:	f7f3 fa49 	bl	80005a8 <__aeabi_dmul>
 800d116:	4602      	mov	r2, r0
 800d118:	460b      	mov	r3, r1
 800d11a:	4614      	mov	r4, r2
 800d11c:	461d      	mov	r5, r3
 800d11e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d122:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d126:	6818      	ldr	r0, [r3, #0]
 800d128:	f7f3 f9e6 	bl	80004f8 <__aeabi_f2d>
 800d12c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800d130:	f7f3 fa3a 	bl	80005a8 <__aeabi_dmul>
 800d134:	4602      	mov	r2, r0
 800d136:	460b      	mov	r3, r1
 800d138:	4620      	mov	r0, r4
 800d13a:	4629      	mov	r1, r5
 800d13c:	f7f3 f87c 	bl	8000238 <__aeabi_dsub>
 800d140:	4602      	mov	r2, r0
 800d142:	460b      	mov	r3, r1
 800d144:	4614      	mov	r4, r2
 800d146:	461d      	mov	r5, r3
 800d148:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d14c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d150:	6818      	ldr	r0, [r3, #0]
 800d152:	f7f3 f9d1 	bl	80004f8 <__aeabi_f2d>
 800d156:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d15a:	f7f3 fa25 	bl	80005a8 <__aeabi_dmul>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	4620      	mov	r0, r4
 800d164:	4629      	mov	r1, r5
 800d166:	f7f3 f869 	bl	800023c <__adddf3>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	4610      	mov	r0, r2
 800d170:	4619      	mov	r1, r3
 800d172:	f04f 0200 	mov.w	r2, #0
 800d176:	4b95      	ldr	r3, [pc, #596]	; (800d3cc <madgwick+0x4d0>)
 800d178:	f7f3 fa16 	bl	80005a8 <__aeabi_dmul>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	        qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800d184:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d188:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d18c:	6818      	ldr	r0, [r3, #0]
 800d18e:	f7f3 f9b3 	bl	80004f8 <__aeabi_f2d>
 800d192:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800d196:	f7f3 fa07 	bl	80005a8 <__aeabi_dmul>
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	4614      	mov	r4, r2
 800d1a0:	461d      	mov	r5, r3
 800d1a2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d1a6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d1aa:	6818      	ldr	r0, [r3, #0]
 800d1ac:	f7f3 f9a4 	bl	80004f8 <__aeabi_f2d>
 800d1b0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800d1b4:	f7f3 f9f8 	bl	80005a8 <__aeabi_dmul>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4620      	mov	r0, r4
 800d1be:	4629      	mov	r1, r5
 800d1c0:	f7f3 f83c 	bl	800023c <__adddf3>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4614      	mov	r4, r2
 800d1ca:	461d      	mov	r5, r3
 800d1cc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d1d0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d1d4:	6818      	ldr	r0, [r3, #0]
 800d1d6:	f7f3 f98f 	bl	80004f8 <__aeabi_f2d>
 800d1da:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d1de:	f7f3 f9e3 	bl	80005a8 <__aeabi_dmul>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	f7f3 f825 	bl	8000238 <__aeabi_dsub>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	f04f 0200 	mov.w	r2, #0
 800d1fa:	4b74      	ldr	r3, [pc, #464]	; (800d3cc <madgwick+0x4d0>)
 800d1fc:	f7f3 f9d4 	bl	80005a8 <__aeabi_dmul>
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168

	        // Normalise accelerometer measurement
	        double a_norm = ax * ax + ay * ay + az * az;
 800d208:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d20c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d210:	edd3 7a00 	vldr	s15, [r3]
 800d214:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d218:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d21c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d220:	edd3 7a00 	vldr	s15, [r3]
 800d224:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d228:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d22c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d230:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d234:	edd3 7a00 	vldr	s15, [r3]
 800d238:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d23c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d240:	ee17 0a90 	vmov	r0, s15
 800d244:	f7f3 f958 	bl	80004f8 <__aeabi_f2d>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	        if (a_norm == 0.) return;  // handle NaN
 800d250:	f04f 0200 	mov.w	r2, #0
 800d254:	f04f 0300 	mov.w	r3, #0
 800d258:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800d25c:	f7f3 fc0c 	bl	8000a78 <__aeabi_dcmpeq>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	f041 8553 	bne.w	800ed0e <madgwick+0x1e12>
	        recipNorm = 1.0 / sqrt(a_norm);
 800d268:	ed97 0b58 	vldr	d0, [r7, #352]	; 0x160
 800d26c:	f002 feec 	bl	8010048 <sqrt>
 800d270:	ec53 2b10 	vmov	r2, r3, d0
 800d274:	f04f 0000 	mov.w	r0, #0
 800d278:	4955      	ldr	r1, [pc, #340]	; (800d3d0 <madgwick+0x4d4>)
 800d27a:	f7f3 fabf 	bl	80007fc <__aeabi_ddiv>
 800d27e:	4602      	mov	r2, r0
 800d280:	460b      	mov	r3, r1
 800d282:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        ax *= recipNorm;
 800d286:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d28a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d28e:	6818      	ldr	r0, [r3, #0]
 800d290:	f7f3 f932 	bl	80004f8 <__aeabi_f2d>
 800d294:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800d298:	f7f3 f986 	bl	80005a8 <__aeabi_dmul>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d2a8:	f5a3 74a6 	sub.w	r4, r3, #332	; 0x14c
 800d2ac:	f7f3 fc2c 	bl	8000b08 <__aeabi_d2f>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	6023      	str	r3, [r4, #0]
	        ay *= recipNorm;
 800d2b4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d2b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d2bc:	6818      	ldr	r0, [r3, #0]
 800d2be:	f7f3 f91b 	bl	80004f8 <__aeabi_f2d>
 800d2c2:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800d2c6:	f7f3 f96f 	bl	80005a8 <__aeabi_dmul>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d2d6:	f5a3 74a8 	sub.w	r4, r3, #336	; 0x150
 800d2da:	f7f3 fc15 	bl	8000b08 <__aeabi_d2f>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	6023      	str	r3, [r4, #0]
	        az *= recipNorm;
 800d2e2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d2e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d2ea:	6818      	ldr	r0, [r3, #0]
 800d2ec:	f7f3 f904 	bl	80004f8 <__aeabi_f2d>
 800d2f0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800d2f4:	f7f3 f958 	bl	80005a8 <__aeabi_dmul>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	4619      	mov	r1, r3
 800d300:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d304:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 800d308:	f7f3 fbfe 	bl	8000b08 <__aeabi_d2f>
 800d30c:	4603      	mov	r3, r0
 800d30e:	6023      	str	r3, [r4, #0]


	        // Normalise magnetometer measurement
	        double m_norm = mx * mx + my * my + mz * mz;
 800d310:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d314:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d318:	edd3 7a00 	vldr	s15, [r3]
 800d31c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d320:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d324:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d328:	edd3 7a00 	vldr	s15, [r3]
 800d32c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d330:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d334:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d338:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d33c:	edd3 7a00 	vldr	s15, [r3]
 800d340:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d344:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d348:	ee17 0a90 	vmov	r0, s15
 800d34c:	f7f3 f8d4 	bl	80004f8 <__aeabi_f2d>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
	        if (m_norm == 0.) return;  // handle NaN
 800d358:	f04f 0200 	mov.w	r2, #0
 800d35c:	f04f 0300 	mov.w	r3, #0
 800d360:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800d364:	f7f3 fb88 	bl	8000a78 <__aeabi_dcmpeq>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f041 84d1 	bne.w	800ed12 <madgwick+0x1e16>
	        recipNorm = 1.0 / sqrt(m_norm);
 800d370:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 800d374:	f002 fe68 	bl	8010048 <sqrt>
 800d378:	ec53 2b10 	vmov	r2, r3, d0
 800d37c:	f04f 0000 	mov.w	r0, #0
 800d380:	4913      	ldr	r1, [pc, #76]	; (800d3d0 <madgwick+0x4d4>)
 800d382:	f7f3 fa3b 	bl	80007fc <__aeabi_ddiv>
 800d386:	4602      	mov	r2, r0
 800d388:	460b      	mov	r3, r1
 800d38a:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        mx *= recipNorm;
 800d38e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d392:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d396:	6818      	ldr	r0, [r3, #0]
 800d398:	f7f3 f8ae 	bl	80004f8 <__aeabi_f2d>
 800d39c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800d3a0:	f7f3 f902 	bl	80005a8 <__aeabi_dmul>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d3b0:	f5a3 74b2 	sub.w	r4, r3, #356	; 0x164
 800d3b4:	f7f3 fba8 	bl	8000b08 <__aeabi_d2f>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	6023      	str	r3, [r4, #0]
	        my *= recipNorm;
 800d3bc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d3c0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d3c4:	6818      	ldr	r0, [r3, #0]
 800d3c6:	f7f3 f897 	bl	80004f8 <__aeabi_f2d>
 800d3ca:	e003      	b.n	800d3d4 <madgwick+0x4d8>
 800d3cc:	3fe00000 	.word	0x3fe00000
 800d3d0:	3ff00000 	.word	0x3ff00000
 800d3d4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800d3d8:	f7f3 f8e6 	bl	80005a8 <__aeabi_dmul>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	460b      	mov	r3, r1
 800d3e0:	4610      	mov	r0, r2
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d3e8:	f5a3 74b4 	sub.w	r4, r3, #360	; 0x168
 800d3ec:	f7f3 fb8c 	bl	8000b08 <__aeabi_d2f>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	6023      	str	r3, [r4, #0]
	        mz *= recipNorm;
 800d3f4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d3f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	f7f3 f87b 	bl	80004f8 <__aeabi_f2d>
 800d402:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800d406:	f7f3 f8cf 	bl	80005a8 <__aeabi_dmul>
 800d40a:	4602      	mov	r2, r0
 800d40c:	460b      	mov	r3, r1
 800d40e:	4610      	mov	r0, r2
 800d410:	4619      	mov	r1, r3
 800d412:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d416:	f5a3 74b6 	sub.w	r4, r3, #364	; 0x16c
 800d41a:	f7f3 fb75 	bl	8000b08 <__aeabi_d2f>
 800d41e:	4603      	mov	r3, r0
 800d420:	6023      	str	r3, [r4, #0]

	        // Auxiliary variables to avoid repeated arithmetic
	        _2q0mx = 2.0f * q0 * mx;
 800d422:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800d426:	4602      	mov	r2, r0
 800d428:	460b      	mov	r3, r1
 800d42a:	f7f2 ff07 	bl	800023c <__adddf3>
 800d42e:	4602      	mov	r2, r0
 800d430:	460b      	mov	r3, r1
 800d432:	4614      	mov	r4, r2
 800d434:	461d      	mov	r5, r3
 800d436:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d43a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d43e:	6818      	ldr	r0, [r3, #0]
 800d440:	f7f3 f85a 	bl	80004f8 <__aeabi_f2d>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	4620      	mov	r0, r4
 800d44a:	4629      	mov	r1, r5
 800d44c:	f7f3 f8ac 	bl	80005a8 <__aeabi_dmul>
 800d450:	4602      	mov	r2, r0
 800d452:	460b      	mov	r3, r1
 800d454:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	        _2q0my = 2.0f * q0 * my;
 800d458:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800d45c:	4602      	mov	r2, r0
 800d45e:	460b      	mov	r3, r1
 800d460:	f7f2 feec 	bl	800023c <__adddf3>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4614      	mov	r4, r2
 800d46a:	461d      	mov	r5, r3
 800d46c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d470:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d474:	6818      	ldr	r0, [r3, #0]
 800d476:	f7f3 f83f 	bl	80004f8 <__aeabi_f2d>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4620      	mov	r0, r4
 800d480:	4629      	mov	r1, r5
 800d482:	f7f3 f891 	bl	80005a8 <__aeabi_dmul>
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        _2q0mz = 2.0f * q0 * mz;
 800d48e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	f7f2 fed1 	bl	800023c <__adddf3>
 800d49a:	4602      	mov	r2, r0
 800d49c:	460b      	mov	r3, r1
 800d49e:	4614      	mov	r4, r2
 800d4a0:	461d      	mov	r5, r3
 800d4a2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d4a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d4aa:	6818      	ldr	r0, [r3, #0]
 800d4ac:	f7f3 f824 	bl	80004f8 <__aeabi_f2d>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f3 f876 	bl	80005a8 <__aeabi_dmul>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	        _2q1mx = 2.0f * q1 * mx;
 800d4c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	f7f2 feb6 	bl	800023c <__adddf3>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	4614      	mov	r4, r2
 800d4d6:	461d      	mov	r5, r3
 800d4d8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d4dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	f7f3 f809 	bl	80004f8 <__aeabi_f2d>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	f7f3 f85b 	bl	80005a8 <__aeabi_dmul>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	        _2q0 = 2.0f * q0;
 800d4fa:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	f7f2 fe9b 	bl	800023c <__adddf3>
 800d506:	4602      	mov	r2, r0
 800d508:	460b      	mov	r3, r1
 800d50a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	        _2q1 = 2.0f * q1;
 800d50e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d512:	4602      	mov	r2, r0
 800d514:	460b      	mov	r3, r1
 800d516:	f7f2 fe91 	bl	800023c <__adddf3>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	        _2q2 = 2.0f * q2;
 800d522:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	f7f2 fe87 	bl	800023c <__adddf3>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	        _2q3 = 2.0f * q3;
 800d536:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800d53a:	4602      	mov	r2, r0
 800d53c:	460b      	mov	r3, r1
 800d53e:	f7f2 fe7d 	bl	800023c <__adddf3>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	        _2q0q2 = 2.0f * q0 * q2;
 800d54a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800d54e:	4602      	mov	r2, r0
 800d550:	460b      	mov	r3, r1
 800d552:	f7f2 fe73 	bl	800023c <__adddf3>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800d55e:	f7f3 f823 	bl	80005a8 <__aeabi_dmul>
 800d562:	4602      	mov	r2, r0
 800d564:	460b      	mov	r3, r1
 800d566:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
	        _2q2q3 = 2.0f * q2 * q3;
 800d56a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	f7f2 fe63 	bl	800023c <__adddf3>
 800d576:	4602      	mov	r2, r0
 800d578:	460b      	mov	r3, r1
 800d57a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800d57e:	f7f3 f813 	bl	80005a8 <__aeabi_dmul>
 800d582:	4602      	mov	r2, r0
 800d584:	460b      	mov	r3, r1
 800d586:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	        q0q0 = q0 * q0;
 800d58a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800d58e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800d592:	f7f3 f809 	bl	80005a8 <__aeabi_dmul>
 800d596:	4602      	mov	r2, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	        q0q1 = q0 * q1;
 800d59e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800d5a2:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800d5a6:	f7f2 ffff 	bl	80005a8 <__aeabi_dmul>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	        q0q2 = q0 * q2;
 800d5b2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d5b6:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800d5ba:	f7f2 fff5 	bl	80005a8 <__aeabi_dmul>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	        q0q3 = q0 * q3;
 800d5c6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d5ca:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800d5ce:	f7f2 ffeb 	bl	80005a8 <__aeabi_dmul>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	        q1q1 = q1 * q1;
 800d5da:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800d5de:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d5e2:	f7f2 ffe1 	bl	80005a8 <__aeabi_dmul>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	        q1q2 = q1 * q2;
 800d5ee:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d5f2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d5f6:	f7f2 ffd7 	bl	80005a8 <__aeabi_dmul>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	        q1q3 = q1 * q3;
 800d602:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d606:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800d60a:	f7f2 ffcd 	bl	80005a8 <__aeabi_dmul>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	        q2q2 = q2 * q2;
 800d616:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d61a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800d61e:	f7f2 ffc3 	bl	80005a8 <__aeabi_dmul>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	        q2q3 = q2 * q3;
 800d62a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d62e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800d632:	f7f2 ffb9 	bl	80005a8 <__aeabi_dmul>
 800d636:	4602      	mov	r2, r0
 800d638:	460b      	mov	r3, r1
 800d63a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	        q3q3 = q3 * q3;
 800d63e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d642:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800d646:	f7f2 ffaf 	bl	80005a8 <__aeabi_dmul>
 800d64a:	4602      	mov	r2, r0
 800d64c:	460b      	mov	r3, r1
 800d64e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0

	        // Reference direction of Earth's magnetic field
	        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800d652:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d656:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d65a:	6818      	ldr	r0, [r3, #0]
 800d65c:	f7f2 ff4c 	bl	80004f8 <__aeabi_f2d>
 800d660:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800d664:	f7f2 ffa0 	bl	80005a8 <__aeabi_dmul>
 800d668:	4602      	mov	r2, r0
 800d66a:	460b      	mov	r3, r1
 800d66c:	4614      	mov	r4, r2
 800d66e:	461d      	mov	r5, r3
 800d670:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d674:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800d678:	f7f2 ff96 	bl	80005a8 <__aeabi_dmul>
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	4620      	mov	r0, r4
 800d682:	4629      	mov	r1, r5
 800d684:	f7f2 fdd8 	bl	8000238 <__aeabi_dsub>
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	4614      	mov	r4, r2
 800d68e:	461d      	mov	r5, r3
 800d690:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d694:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800d698:	f7f2 ff86 	bl	80005a8 <__aeabi_dmul>
 800d69c:	4602      	mov	r2, r0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	f7f2 fdca 	bl	800023c <__adddf3>
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	4614      	mov	r4, r2
 800d6ae:	461d      	mov	r5, r3
 800d6b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d6b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d6b8:	6818      	ldr	r0, [r3, #0]
 800d6ba:	f7f2 ff1d 	bl	80004f8 <__aeabi_f2d>
 800d6be:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d6c2:	f7f2 ff71 	bl	80005a8 <__aeabi_dmul>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	f7f2 fdb5 	bl	800023c <__adddf3>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	4614      	mov	r4, r2
 800d6d8:	461d      	mov	r5, r3
 800d6da:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d6de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	f7f2 ff08 	bl	80004f8 <__aeabi_f2d>
 800d6e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d6ec:	f7f2 ff5c 	bl	80005a8 <__aeabi_dmul>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d6fc:	f7f2 ff54 	bl	80005a8 <__aeabi_dmul>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4620      	mov	r0, r4
 800d706:	4629      	mov	r1, r5
 800d708:	f7f2 fd98 	bl	800023c <__adddf3>
 800d70c:	4602      	mov	r2, r0
 800d70e:	460b      	mov	r3, r1
 800d710:	4614      	mov	r4, r2
 800d712:	461d      	mov	r5, r3
 800d714:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d718:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d71c:	6818      	ldr	r0, [r3, #0]
 800d71e:	f7f2 feeb 	bl	80004f8 <__aeabi_f2d>
 800d722:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d726:	f7f2 ff3f 	bl	80005a8 <__aeabi_dmul>
 800d72a:	4602      	mov	r2, r0
 800d72c:	460b      	mov	r3, r1
 800d72e:	4610      	mov	r0, r2
 800d730:	4619      	mov	r1, r3
 800d732:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d736:	f7f2 ff37 	bl	80005a8 <__aeabi_dmul>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4620      	mov	r0, r4
 800d740:	4629      	mov	r1, r5
 800d742:	f7f2 fd7b 	bl	800023c <__adddf3>
 800d746:	4602      	mov	r2, r0
 800d748:	460b      	mov	r3, r1
 800d74a:	4614      	mov	r4, r2
 800d74c:	461d      	mov	r5, r3
 800d74e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d752:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d756:	6818      	ldr	r0, [r3, #0]
 800d758:	f7f2 fece 	bl	80004f8 <__aeabi_f2d>
 800d75c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800d760:	f7f2 ff22 	bl	80005a8 <__aeabi_dmul>
 800d764:	4602      	mov	r2, r0
 800d766:	460b      	mov	r3, r1
 800d768:	4620      	mov	r0, r4
 800d76a:	4629      	mov	r1, r5
 800d76c:	f7f2 fd64 	bl	8000238 <__aeabi_dsub>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4690      	mov	r8, r2
 800d776:	4699      	mov	r9, r3
 800d778:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d77c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d780:	6818      	ldr	r0, [r3, #0]
 800d782:	f7f2 feb9 	bl	80004f8 <__aeabi_f2d>
 800d786:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800d78a:	f7f2 ff0d 	bl	80005a8 <__aeabi_dmul>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	4610      	mov	r0, r2
 800d794:	4619      	mov	r1, r3
 800d796:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d79a:	461c      	mov	r4, r3
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	4640      	mov	r0, r8
 800d7a2:	4649      	mov	r1, r9
 800d7a4:	f7f2 fd48 	bl	8000238 <__aeabi_dsub>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	e9c4 2300 	strd	r2, r3, [r4]
	        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800d7b0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d7b4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800d7b8:	f7f2 fef6 	bl	80005a8 <__aeabi_dmul>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	4614      	mov	r4, r2
 800d7c2:	461d      	mov	r5, r3
 800d7c4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d7c8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d7cc:	6818      	ldr	r0, [r3, #0]
 800d7ce:	f7f2 fe93 	bl	80004f8 <__aeabi_f2d>
 800d7d2:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800d7d6:	f7f2 fee7 	bl	80005a8 <__aeabi_dmul>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	460b      	mov	r3, r1
 800d7de:	4620      	mov	r0, r4
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	f7f2 fd2b 	bl	800023c <__adddf3>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	4614      	mov	r4, r2
 800d7ec:	461d      	mov	r5, r3
 800d7ee:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800d7f2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800d7f6:	f7f2 fed7 	bl	80005a8 <__aeabi_dmul>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	4620      	mov	r0, r4
 800d800:	4629      	mov	r1, r5
 800d802:	f7f2 fd19 	bl	8000238 <__aeabi_dsub>
 800d806:	4602      	mov	r2, r0
 800d808:	460b      	mov	r3, r1
 800d80a:	4614      	mov	r4, r2
 800d80c:	461d      	mov	r5, r3
 800d80e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d812:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800d816:	f7f2 fec7 	bl	80005a8 <__aeabi_dmul>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	4620      	mov	r0, r4
 800d820:	4629      	mov	r1, r5
 800d822:	f7f2 fd0b 	bl	800023c <__adddf3>
 800d826:	4602      	mov	r2, r0
 800d828:	460b      	mov	r3, r1
 800d82a:	4614      	mov	r4, r2
 800d82c:	461d      	mov	r5, r3
 800d82e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d832:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d836:	6818      	ldr	r0, [r3, #0]
 800d838:	f7f2 fe5e 	bl	80004f8 <__aeabi_f2d>
 800d83c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d840:	f7f2 feb2 	bl	80005a8 <__aeabi_dmul>
 800d844:	4602      	mov	r2, r0
 800d846:	460b      	mov	r3, r1
 800d848:	4620      	mov	r0, r4
 800d84a:	4629      	mov	r1, r5
 800d84c:	f7f2 fcf4 	bl	8000238 <__aeabi_dsub>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	4614      	mov	r4, r2
 800d856:	461d      	mov	r5, r3
 800d858:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d85c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d860:	6818      	ldr	r0, [r3, #0]
 800d862:	f7f2 fe49 	bl	80004f8 <__aeabi_f2d>
 800d866:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800d86a:	f7f2 fe9d 	bl	80005a8 <__aeabi_dmul>
 800d86e:	4602      	mov	r2, r0
 800d870:	460b      	mov	r3, r1
 800d872:	4620      	mov	r0, r4
 800d874:	4629      	mov	r1, r5
 800d876:	f7f2 fce1 	bl	800023c <__adddf3>
 800d87a:	4602      	mov	r2, r0
 800d87c:	460b      	mov	r3, r1
 800d87e:	4614      	mov	r4, r2
 800d880:	461d      	mov	r5, r3
 800d882:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d886:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d88a:	6818      	ldr	r0, [r3, #0]
 800d88c:	f7f2 fe34 	bl	80004f8 <__aeabi_f2d>
 800d890:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800d894:	f7f2 fe88 	bl	80005a8 <__aeabi_dmul>
 800d898:	4602      	mov	r2, r0
 800d89a:	460b      	mov	r3, r1
 800d89c:	4610      	mov	r0, r2
 800d89e:	4619      	mov	r1, r3
 800d8a0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d8a4:	f7f2 fe80 	bl	80005a8 <__aeabi_dmul>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	f7f2 fcc4 	bl	800023c <__adddf3>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	4690      	mov	r8, r2
 800d8ba:	4699      	mov	r9, r3
 800d8bc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d8c0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d8c4:	6818      	ldr	r0, [r3, #0]
 800d8c6:	f7f2 fe17 	bl	80004f8 <__aeabi_f2d>
 800d8ca:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800d8ce:	f7f2 fe6b 	bl	80005a8 <__aeabi_dmul>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	4610      	mov	r0, r2
 800d8d8:	4619      	mov	r1, r3
 800d8da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d8de:	461c      	mov	r4, r3
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4640      	mov	r0, r8
 800d8e6:	4649      	mov	r1, r9
 800d8e8:	f7f2 fca6 	bl	8000238 <__aeabi_dsub>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	e944 2302 	strd	r2, r3, [r4, #-8]
	        _2bx = sqrt(hx * hx + hy * hy);
 800d8f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	e9d1 2300 	ldrd	r2, r3, [r1]
 800d8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d902:	f7f2 fe51 	bl	80005a8 <__aeabi_dmul>
 800d906:	4602      	mov	r2, r0
 800d908:	460b      	mov	r3, r1
 800d90a:	4614      	mov	r4, r2
 800d90c:	461d      	mov	r5, r3
 800d90e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d912:	4619      	mov	r1, r3
 800d914:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 800d918:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800d91c:	f7f2 fe44 	bl	80005a8 <__aeabi_dmul>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4620      	mov	r0, r4
 800d926:	4629      	mov	r1, r5
 800d928:	f7f2 fc88 	bl	800023c <__adddf3>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	ec43 2b17 	vmov	d7, r2, r3
 800d934:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800d938:	461c      	mov	r4, r3
 800d93a:	eeb0 0a47 	vmov.f32	s0, s14
 800d93e:	eef0 0a67 	vmov.f32	s1, s15
 800d942:	f002 fb81 	bl	8010048 <sqrt>
 800d946:	ed84 0b00 	vstr	d0, [r4]
	        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800d94a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d94e:	633b      	str	r3, [r7, #48]	; 0x30
 800d950:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d954:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d958:	637b      	str	r3, [r7, #52]	; 0x34
 800d95a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800d95e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d962:	f7f2 fe21 	bl	80005a8 <__aeabi_dmul>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	4614      	mov	r4, r2
 800d96c:	461d      	mov	r5, r3
 800d96e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800d972:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800d976:	f7f2 fe17 	bl	80005a8 <__aeabi_dmul>
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	4620      	mov	r0, r4
 800d980:	4629      	mov	r1, r5
 800d982:	f7f2 fc5b 	bl	800023c <__adddf3>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	4614      	mov	r4, r2
 800d98c:	461d      	mov	r5, r3
 800d98e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d992:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d996:	6818      	ldr	r0, [r3, #0]
 800d998:	f7f2 fdae 	bl	80004f8 <__aeabi_f2d>
 800d99c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800d9a0:	f7f2 fe02 	bl	80005a8 <__aeabi_dmul>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	f7f2 fc46 	bl	800023c <__adddf3>
 800d9b0:	4602      	mov	r2, r0
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	4614      	mov	r4, r2
 800d9b6:	461d      	mov	r5, r3
 800d9b8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800d9bc:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800d9c0:	f7f2 fdf2 	bl	80005a8 <__aeabi_dmul>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	f7f2 fc36 	bl	800023c <__adddf3>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	4614      	mov	r4, r2
 800d9d6:	461d      	mov	r5, r3
 800d9d8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d9dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d9e0:	6818      	ldr	r0, [r3, #0]
 800d9e2:	f7f2 fd89 	bl	80004f8 <__aeabi_f2d>
 800d9e6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d9ea:	f7f2 fddd 	bl	80005a8 <__aeabi_dmul>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	4629      	mov	r1, r5
 800d9f6:	f7f2 fc1f 	bl	8000238 <__aeabi_dsub>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4614      	mov	r4, r2
 800da00:	461d      	mov	r5, r3
 800da02:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800da06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800da0a:	6818      	ldr	r0, [r3, #0]
 800da0c:	f7f2 fd74 	bl	80004f8 <__aeabi_f2d>
 800da10:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800da14:	f7f2 fdc8 	bl	80005a8 <__aeabi_dmul>
 800da18:	4602      	mov	r2, r0
 800da1a:	460b      	mov	r3, r1
 800da1c:	4610      	mov	r0, r2
 800da1e:	4619      	mov	r1, r3
 800da20:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800da24:	f7f2 fdc0 	bl	80005a8 <__aeabi_dmul>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	4620      	mov	r0, r4
 800da2e:	4629      	mov	r1, r5
 800da30:	f7f2 fc04 	bl	800023c <__adddf3>
 800da34:	4602      	mov	r2, r0
 800da36:	460b      	mov	r3, r1
 800da38:	4614      	mov	r4, r2
 800da3a:	461d      	mov	r5, r3
 800da3c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800da40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800da44:	6818      	ldr	r0, [r3, #0]
 800da46:	f7f2 fd57 	bl	80004f8 <__aeabi_f2d>
 800da4a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800da4e:	f7f2 fdab 	bl	80005a8 <__aeabi_dmul>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4620      	mov	r0, r4
 800da58:	4629      	mov	r1, r5
 800da5a:	f7f2 fbed 	bl	8000238 <__aeabi_dsub>
 800da5e:	4602      	mov	r2, r0
 800da60:	460b      	mov	r3, r1
 800da62:	4690      	mov	r8, r2
 800da64:	4699      	mov	r9, r3
 800da66:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800da6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800da6e:	6818      	ldr	r0, [r3, #0]
 800da70:	f7f2 fd42 	bl	80004f8 <__aeabi_f2d>
 800da74:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800da78:	f7f2 fd96 	bl	80005a8 <__aeabi_dmul>
 800da7c:	4602      	mov	r2, r0
 800da7e:	460b      	mov	r3, r1
 800da80:	4610      	mov	r0, r2
 800da82:	4619      	mov	r1, r3
 800da84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800da88:	461c      	mov	r4, r3
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	4640      	mov	r0, r8
 800da90:	4649      	mov	r1, r9
 800da92:	f7f2 fbd3 	bl	800023c <__adddf3>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	e944 2302 	strd	r2, r3, [r4, #-8]
	        _4bx = 2.0f * _2bx;
 800da9e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800daa2:	461c      	mov	r4, r3
 800daa4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800daa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800daac:	4602      	mov	r2, r0
 800daae:	460b      	mov	r3, r1
 800dab0:	f7f2 fbc4 	bl	800023c <__adddf3>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	e9c4 2300 	strd	r2, r3, [r4]
	        _4bz = 2.0f * _2bz;
 800dabc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800dac0:	461c      	mov	r4, r3
 800dac2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dac6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	f7f2 fbb5 	bl	800023c <__adddf3>
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	e944 2302 	strd	r2, r3, [r4, #-8]

	        // Gradient decent algorithm corrective step
	        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800dada:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800dade:	62bb      	str	r3, [r7, #40]	; 0x28
 800dae0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800dae4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	f7f2 fba3 	bl	800023c <__adddf3>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	4610      	mov	r0, r2
 800dafc:	4619      	mov	r1, r3
 800dafe:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800db02:	f7f2 fb99 	bl	8000238 <__aeabi_dsub>
 800db06:	4602      	mov	r2, r0
 800db08:	460b      	mov	r3, r1
 800db0a:	4614      	mov	r4, r2
 800db0c:	461d      	mov	r5, r3
 800db0e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800db12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800db16:	6818      	ldr	r0, [r3, #0]
 800db18:	f7f2 fcee 	bl	80004f8 <__aeabi_f2d>
 800db1c:	4602      	mov	r2, r0
 800db1e:	460b      	mov	r3, r1
 800db20:	4620      	mov	r0, r4
 800db22:	4629      	mov	r1, r5
 800db24:	f7f2 fb88 	bl	8000238 <__aeabi_dsub>
 800db28:	4602      	mov	r2, r0
 800db2a:	460b      	mov	r3, r1
 800db2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800db30:	f7f2 fd3a 	bl	80005a8 <__aeabi_dmul>
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	4690      	mov	r8, r2
 800db3a:	4699      	mov	r9, r3
 800db3c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800db40:	4602      	mov	r2, r0
 800db42:	460b      	mov	r3, r1
 800db44:	f7f2 fb7a 	bl	800023c <__adddf3>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4610      	mov	r0, r2
 800db4e:	4619      	mov	r1, r3
 800db50:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800db54:	f7f2 fb72 	bl	800023c <__adddf3>
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	4614      	mov	r4, r2
 800db5e:	461d      	mov	r5, r3
 800db60:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800db64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db68:	6818      	ldr	r0, [r3, #0]
 800db6a:	f7f2 fcc5 	bl	80004f8 <__aeabi_f2d>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4620      	mov	r0, r4
 800db74:	4629      	mov	r1, r5
 800db76:	f7f2 fb5f 	bl	8000238 <__aeabi_dsub>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	4610      	mov	r0, r2
 800db80:	4619      	mov	r1, r3
 800db82:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800db86:	f7f2 fd0f 	bl	80005a8 <__aeabi_dmul>
 800db8a:	4602      	mov	r2, r0
 800db8c:	460b      	mov	r3, r1
 800db8e:	4640      	mov	r0, r8
 800db90:	4649      	mov	r1, r9
 800db92:	f7f2 fb53 	bl	800023c <__adddf3>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	4692      	mov	sl, r2
 800db9c:	469b      	mov	fp, r3
 800db9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dba2:	4619      	mov	r1, r3
 800dba4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800dba8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800dbac:	f7f2 fcfc 	bl	80005a8 <__aeabi_dmul>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4690      	mov	r8, r2
 800dbb6:	4699      	mov	r9, r3
 800dbb8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800dbbc:	f04f 0000 	mov.w	r0, #0
 800dbc0:	49d6      	ldr	r1, [pc, #856]	; (800df1c <madgwick+0x1020>)
 800dbc2:	f7f2 fb39 	bl	8000238 <__aeabi_dsub>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	4610      	mov	r0, r2
 800dbcc:	4619      	mov	r1, r3
 800dbce:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800dbd2:	f7f2 fb31 	bl	8000238 <__aeabi_dsub>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	4610      	mov	r0, r2
 800dbdc:	4619      	mov	r1, r3
 800dbde:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe6:	f7f2 fcdf 	bl	80005a8 <__aeabi_dmul>
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	4614      	mov	r4, r2
 800dbf0:	461d      	mov	r5, r3
 800dbf2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800dbf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800dbfa:	f7f2 fb1d 	bl	8000238 <__aeabi_dsub>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	460b      	mov	r3, r1
 800dc02:	4610      	mov	r0, r2
 800dc04:	4619      	mov	r1, r3
 800dc06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dc0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc0e:	f7f2 fccb 	bl	80005a8 <__aeabi_dmul>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4620      	mov	r0, r4
 800dc18:	4629      	mov	r1, r5
 800dc1a:	f7f2 fb0f 	bl	800023c <__adddf3>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	460b      	mov	r3, r1
 800dc22:	4614      	mov	r4, r2
 800dc24:	461d      	mov	r5, r3
 800dc26:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800dc2a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800dc2e:	6818      	ldr	r0, [r3, #0]
 800dc30:	f7f2 fc62 	bl	80004f8 <__aeabi_f2d>
 800dc34:	4602      	mov	r2, r0
 800dc36:	460b      	mov	r3, r1
 800dc38:	4620      	mov	r0, r4
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	f7f2 fafc 	bl	8000238 <__aeabi_dsub>
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	4640      	mov	r0, r8
 800dc46:	4649      	mov	r1, r9
 800dc48:	f7f2 fcae 	bl	80005a8 <__aeabi_dmul>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	460b      	mov	r3, r1
 800dc50:	4650      	mov	r0, sl
 800dc52:	4659      	mov	r1, fp
 800dc54:	f7f2 faf0 	bl	8000238 <__aeabi_dsub>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	4692      	mov	sl, r2
 800dc5e:	469b      	mov	fp, r3
 800dc60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	623a      	str	r2, [r7, #32]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dc6e:	627b      	str	r3, [r7, #36]	; 0x24
 800dc70:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800dc74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dc78:	f7f2 fc96 	bl	80005a8 <__aeabi_dmul>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	4614      	mov	r4, r2
 800dc82:	461d      	mov	r5, r3
 800dc84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dc88:	4619      	mov	r1, r3
 800dc8a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800dc8e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800dc92:	f7f2 fc89 	bl	80005a8 <__aeabi_dmul>
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	f7f2 facd 	bl	800023c <__adddf3>
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	4690      	mov	r8, r2
 800dca8:	4699      	mov	r9, r3
 800dcaa:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800dcae:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800dcb2:	f7f2 fac1 	bl	8000238 <__aeabi_dsub>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4610      	mov	r0, r2
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc6:	f7f2 fc6f 	bl	80005a8 <__aeabi_dmul>
 800dcca:	4602      	mov	r2, r0
 800dccc:	460b      	mov	r3, r1
 800dcce:	4614      	mov	r4, r2
 800dcd0:	461d      	mov	r5, r3
 800dcd2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800dcd6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800dcda:	f7f2 faaf 	bl	800023c <__adddf3>
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4610      	mov	r0, r2
 800dce4:	4619      	mov	r1, r3
 800dce6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dcea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dcee:	f7f2 fc5b 	bl	80005a8 <__aeabi_dmul>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	f7f2 fa9f 	bl	800023c <__adddf3>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	460b      	mov	r3, r1
 800dd02:	4614      	mov	r4, r2
 800dd04:	461d      	mov	r5, r3
 800dd06:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800dd0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800dd0e:	6818      	ldr	r0, [r3, #0]
 800dd10:	f7f2 fbf2 	bl	80004f8 <__aeabi_f2d>
 800dd14:	4602      	mov	r2, r0
 800dd16:	460b      	mov	r3, r1
 800dd18:	4620      	mov	r0, r4
 800dd1a:	4629      	mov	r1, r5
 800dd1c:	f7f2 fa8c 	bl	8000238 <__aeabi_dsub>
 800dd20:	4602      	mov	r2, r0
 800dd22:	460b      	mov	r3, r1
 800dd24:	4640      	mov	r0, r8
 800dd26:	4649      	mov	r1, r9
 800dd28:	f7f2 fc3e 	bl	80005a8 <__aeabi_dmul>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	460b      	mov	r3, r1
 800dd30:	4650      	mov	r0, sl
 800dd32:	4659      	mov	r1, fp
 800dd34:	f7f2 fa82 	bl	800023c <__adddf3>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	4692      	mov	sl, r2
 800dd3e:	469b      	mov	fp, r3
 800dd40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dd44:	4619      	mov	r1, r3
 800dd46:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800dd4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd4e:	f7f2 fc2b 	bl	80005a8 <__aeabi_dmul>
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4690      	mov	r8, r2
 800dd58:	4699      	mov	r9, r3
 800dd5a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800dd5e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800dd62:	f7f2 fa6b 	bl	800023c <__adddf3>
 800dd66:	4602      	mov	r2, r0
 800dd68:	460b      	mov	r3, r1
 800dd6a:	4610      	mov	r0, r2
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd76:	f7f2 fc17 	bl	80005a8 <__aeabi_dmul>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	4614      	mov	r4, r2
 800dd80:	461d      	mov	r5, r3
 800dd82:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800dd86:	f04f 0000 	mov.w	r0, #0
 800dd8a:	4964      	ldr	r1, [pc, #400]	; (800df1c <madgwick+0x1020>)
 800dd8c:	f7f2 fa54 	bl	8000238 <__aeabi_dsub>
 800dd90:	4602      	mov	r2, r0
 800dd92:	460b      	mov	r3, r1
 800dd94:	4610      	mov	r0, r2
 800dd96:	4619      	mov	r1, r3
 800dd98:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800dd9c:	f7f2 fa4c 	bl	8000238 <__aeabi_dsub>
 800dda0:	4602      	mov	r2, r0
 800dda2:	460b      	mov	r3, r1
 800dda4:	4610      	mov	r0, r2
 800dda6:	4619      	mov	r1, r3
 800dda8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ddac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddb0:	f7f2 fbfa 	bl	80005a8 <__aeabi_dmul>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	4620      	mov	r0, r4
 800ddba:	4629      	mov	r1, r5
 800ddbc:	f7f2 fa3e 	bl	800023c <__adddf3>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	461d      	mov	r5, r3
 800ddc8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800ddcc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800ddd0:	6818      	ldr	r0, [r3, #0]
 800ddd2:	f7f2 fb91 	bl	80004f8 <__aeabi_f2d>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4620      	mov	r0, r4
 800dddc:	4629      	mov	r1, r5
 800ddde:	f7f2 fa2b 	bl	8000238 <__aeabi_dsub>
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	4640      	mov	r0, r8
 800dde8:	4649      	mov	r1, r9
 800ddea:	f7f2 fbdd 	bl	80005a8 <__aeabi_dmul>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800ddf6:	460c      	mov	r4, r1
 800ddf8:	4650      	mov	r0, sl
 800ddfa:	4659      	mov	r1, fp
 800ddfc:	f7f2 fa1e 	bl	800023c <__adddf3>
 800de00:	4602      	mov	r2, r0
 800de02:	460b      	mov	r3, r1
 800de04:	e9c4 2300 	strd	r2, r3, [r4]
	        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800de08:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800de0c:	4602      	mov	r2, r0
 800de0e:	460b      	mov	r3, r1
 800de10:	f7f2 fa14 	bl	800023c <__adddf3>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	4610      	mov	r0, r2
 800de1a:	4619      	mov	r1, r3
 800de1c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800de20:	f7f2 fa0a 	bl	8000238 <__aeabi_dsub>
 800de24:	4602      	mov	r2, r0
 800de26:	460b      	mov	r3, r1
 800de28:	4614      	mov	r4, r2
 800de2a:	461d      	mov	r5, r3
 800de2c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800de30:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800de34:	6818      	ldr	r0, [r3, #0]
 800de36:	f7f2 fb5f 	bl	80004f8 <__aeabi_f2d>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	4620      	mov	r0, r4
 800de40:	4629      	mov	r1, r5
 800de42:	f7f2 f9f9 	bl	8000238 <__aeabi_dsub>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4610      	mov	r0, r2
 800de4c:	4619      	mov	r1, r3
 800de4e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800de52:	f7f2 fba9 	bl	80005a8 <__aeabi_dmul>
 800de56:	4602      	mov	r2, r0
 800de58:	460b      	mov	r3, r1
 800de5a:	4690      	mov	r8, r2
 800de5c:	4699      	mov	r9, r3
 800de5e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800de62:	4602      	mov	r2, r0
 800de64:	460b      	mov	r3, r1
 800de66:	f7f2 f9e9 	bl	800023c <__adddf3>
 800de6a:	4602      	mov	r2, r0
 800de6c:	460b      	mov	r3, r1
 800de6e:	4610      	mov	r0, r2
 800de70:	4619      	mov	r1, r3
 800de72:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800de76:	f7f2 f9e1 	bl	800023c <__adddf3>
 800de7a:	4602      	mov	r2, r0
 800de7c:	460b      	mov	r3, r1
 800de7e:	4614      	mov	r4, r2
 800de80:	461d      	mov	r5, r3
 800de82:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800de86:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800de8a:	6818      	ldr	r0, [r3, #0]
 800de8c:	f7f2 fb34 	bl	80004f8 <__aeabi_f2d>
 800de90:	4602      	mov	r2, r0
 800de92:	460b      	mov	r3, r1
 800de94:	4620      	mov	r0, r4
 800de96:	4629      	mov	r1, r5
 800de98:	f7f2 f9ce 	bl	8000238 <__aeabi_dsub>
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	4610      	mov	r0, r2
 800dea2:	4619      	mov	r1, r3
 800dea4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800dea8:	f7f2 fb7e 	bl	80005a8 <__aeabi_dmul>
 800deac:	4602      	mov	r2, r0
 800deae:	460b      	mov	r3, r1
 800deb0:	4640      	mov	r0, r8
 800deb2:	4649      	mov	r1, r9
 800deb4:	f7f2 f9c2 	bl	800023c <__adddf3>
 800deb8:	4602      	mov	r2, r0
 800deba:	460b      	mov	r3, r1
 800debc:	4692      	mov	sl, r2
 800debe:	469b      	mov	fp, r3
 800dec0:	f04f 0200 	mov.w	r2, #0
 800dec4:	4b16      	ldr	r3, [pc, #88]	; (800df20 <madgwick+0x1024>)
 800dec6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800deca:	f7f2 fb6d 	bl	80005a8 <__aeabi_dmul>
 800dece:	4602      	mov	r2, r0
 800ded0:	460b      	mov	r3, r1
 800ded2:	4690      	mov	r8, r2
 800ded4:	4699      	mov	r9, r3
 800ded6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	f7f2 f9ad 	bl	800023c <__adddf3>
 800dee2:	4602      	mov	r2, r0
 800dee4:	460b      	mov	r3, r1
 800dee6:	f04f 0000 	mov.w	r0, #0
 800deea:	490e      	ldr	r1, [pc, #56]	; (800df24 <madgwick+0x1028>)
 800deec:	f7f2 f9a4 	bl	8000238 <__aeabi_dsub>
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	4614      	mov	r4, r2
 800def6:	461d      	mov	r5, r3
 800def8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800defc:	4602      	mov	r2, r0
 800defe:	460b      	mov	r3, r1
 800df00:	f7f2 f99c 	bl	800023c <__adddf3>
 800df04:	4602      	mov	r2, r0
 800df06:	460b      	mov	r3, r1
 800df08:	4620      	mov	r0, r4
 800df0a:	4629      	mov	r1, r5
 800df0c:	f7f2 f994 	bl	8000238 <__aeabi_dsub>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	4614      	mov	r4, r2
 800df16:	461d      	mov	r5, r3
 800df18:	e006      	b.n	800df28 <madgwick+0x102c>
 800df1a:	bf00      	nop
 800df1c:	3fe00000 	.word	0x3fe00000
 800df20:	40100000 	.word	0x40100000
 800df24:	3ff00000 	.word	0x3ff00000
 800df28:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800df2c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800df30:	6818      	ldr	r0, [r3, #0]
 800df32:	f7f2 fae1 	bl	80004f8 <__aeabi_f2d>
 800df36:	4602      	mov	r2, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	4620      	mov	r0, r4
 800df3c:	4629      	mov	r1, r5
 800df3e:	f7f2 f97b 	bl	8000238 <__aeabi_dsub>
 800df42:	4602      	mov	r2, r0
 800df44:	460b      	mov	r3, r1
 800df46:	4640      	mov	r0, r8
 800df48:	4649      	mov	r1, r9
 800df4a:	f7f2 fb2d 	bl	80005a8 <__aeabi_dmul>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4650      	mov	r0, sl
 800df54:	4659      	mov	r1, fp
 800df56:	f7f2 f96f 	bl	8000238 <__aeabi_dsub>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4692      	mov	sl, r2
 800df60:	469b      	mov	fp, r3
 800df62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800df66:	4619      	mov	r1, r3
 800df68:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800df6c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800df70:	f7f2 fb1a 	bl	80005a8 <__aeabi_dmul>
 800df74:	4602      	mov	r2, r0
 800df76:	460b      	mov	r3, r1
 800df78:	4690      	mov	r8, r2
 800df7a:	4699      	mov	r9, r3
 800df7c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800df80:	f04f 0000 	mov.w	r0, #0
 800df84:	49d6      	ldr	r1, [pc, #856]	; (800e2e0 <madgwick+0x13e4>)
 800df86:	f7f2 f957 	bl	8000238 <__aeabi_dsub>
 800df8a:	4602      	mov	r2, r0
 800df8c:	460b      	mov	r3, r1
 800df8e:	4610      	mov	r0, r2
 800df90:	4619      	mov	r1, r3
 800df92:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800df96:	f7f2 f94f 	bl	8000238 <__aeabi_dsub>
 800df9a:	4602      	mov	r2, r0
 800df9c:	460b      	mov	r3, r1
 800df9e:	4610      	mov	r0, r2
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfaa:	f7f2 fafd 	bl	80005a8 <__aeabi_dmul>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4614      	mov	r4, r2
 800dfb4:	461d      	mov	r5, r3
 800dfb6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800dfba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800dfbe:	f7f2 f93b 	bl	8000238 <__aeabi_dsub>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	4619      	mov	r1, r3
 800dfca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dfce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dfd2:	f7f2 fae9 	bl	80005a8 <__aeabi_dmul>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	460b      	mov	r3, r1
 800dfda:	4620      	mov	r0, r4
 800dfdc:	4629      	mov	r1, r5
 800dfde:	f7f2 f92d 	bl	800023c <__adddf3>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	4614      	mov	r4, r2
 800dfe8:	461d      	mov	r5, r3
 800dfea:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800dfee:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800dff2:	6818      	ldr	r0, [r3, #0]
 800dff4:	f7f2 fa80 	bl	80004f8 <__aeabi_f2d>
 800dff8:	4602      	mov	r2, r0
 800dffa:	460b      	mov	r3, r1
 800dffc:	4620      	mov	r0, r4
 800dffe:	4629      	mov	r1, r5
 800e000:	f7f2 f91a 	bl	8000238 <__aeabi_dsub>
 800e004:	4602      	mov	r2, r0
 800e006:	460b      	mov	r3, r1
 800e008:	4640      	mov	r0, r8
 800e00a:	4649      	mov	r1, r9
 800e00c:	f7f2 facc 	bl	80005a8 <__aeabi_dmul>
 800e010:	4602      	mov	r2, r0
 800e012:	460b      	mov	r3, r1
 800e014:	4650      	mov	r0, sl
 800e016:	4659      	mov	r1, fp
 800e018:	f7f2 f910 	bl	800023c <__adddf3>
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	4692      	mov	sl, r2
 800e022:	469b      	mov	fp, r3
 800e024:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e028:	4619      	mov	r1, r3
 800e02a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e02e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e032:	f7f2 fab9 	bl	80005a8 <__aeabi_dmul>
 800e036:	4602      	mov	r2, r0
 800e038:	460b      	mov	r3, r1
 800e03a:	4614      	mov	r4, r2
 800e03c:	461d      	mov	r5, r3
 800e03e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e042:	4619      	mov	r1, r3
 800e044:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e048:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e04c:	f7f2 faac 	bl	80005a8 <__aeabi_dmul>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	4620      	mov	r0, r4
 800e056:	4629      	mov	r1, r5
 800e058:	f7f2 f8f0 	bl	800023c <__adddf3>
 800e05c:	4602      	mov	r2, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	4690      	mov	r8, r2
 800e062:	4699      	mov	r9, r3
 800e064:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800e068:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800e06c:	f7f2 f8e4 	bl	8000238 <__aeabi_dsub>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	4610      	mov	r0, r2
 800e076:	4619      	mov	r1, r3
 800e078:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e080:	f7f2 fa92 	bl	80005a8 <__aeabi_dmul>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	4614      	mov	r4, r2
 800e08a:	461d      	mov	r5, r3
 800e08c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800e090:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800e094:	f7f2 f8d2 	bl	800023c <__adddf3>
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	4610      	mov	r0, r2
 800e09e:	4619      	mov	r1, r3
 800e0a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e0a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e0a8:	f7f2 fa7e 	bl	80005a8 <__aeabi_dmul>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	f7f2 f8c2 	bl	800023c <__adddf3>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	4614      	mov	r4, r2
 800e0be:	461d      	mov	r5, r3
 800e0c0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e0c4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e0c8:	6818      	ldr	r0, [r3, #0]
 800e0ca:	f7f2 fa15 	bl	80004f8 <__aeabi_f2d>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	f7f2 f8af 	bl	8000238 <__aeabi_dsub>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4640      	mov	r0, r8
 800e0e0:	4649      	mov	r1, r9
 800e0e2:	f7f2 fa61 	bl	80005a8 <__aeabi_dmul>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4650      	mov	r0, sl
 800e0ec:	4659      	mov	r1, fp
 800e0ee:	f7f2 f8a5 	bl	800023c <__adddf3>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4692      	mov	sl, r2
 800e0f8:	469b      	mov	fp, r3
 800e0fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e0fe:	4619      	mov	r1, r3
 800e100:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e104:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e108:	f7f2 fa4e 	bl	80005a8 <__aeabi_dmul>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	4614      	mov	r4, r2
 800e112:	461d      	mov	r5, r3
 800e114:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e118:	4619      	mov	r1, r3
 800e11a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e11e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e122:	f7f2 fa41 	bl	80005a8 <__aeabi_dmul>
 800e126:	4602      	mov	r2, r0
 800e128:	460b      	mov	r3, r1
 800e12a:	4620      	mov	r0, r4
 800e12c:	4629      	mov	r1, r5
 800e12e:	f7f2 f883 	bl	8000238 <__aeabi_dsub>
 800e132:	4602      	mov	r2, r0
 800e134:	460b      	mov	r3, r1
 800e136:	4690      	mov	r8, r2
 800e138:	4699      	mov	r9, r3
 800e13a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800e13e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800e142:	f7f2 f87b 	bl	800023c <__adddf3>
 800e146:	4602      	mov	r2, r0
 800e148:	460b      	mov	r3, r1
 800e14a:	4610      	mov	r0, r2
 800e14c:	4619      	mov	r1, r3
 800e14e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	f7f2 fa27 	bl	80005a8 <__aeabi_dmul>
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	4614      	mov	r4, r2
 800e160:	461d      	mov	r5, r3
 800e162:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800e166:	f04f 0000 	mov.w	r0, #0
 800e16a:	495d      	ldr	r1, [pc, #372]	; (800e2e0 <madgwick+0x13e4>)
 800e16c:	f7f2 f864 	bl	8000238 <__aeabi_dsub>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	4610      	mov	r0, r2
 800e176:	4619      	mov	r1, r3
 800e178:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800e17c:	f7f2 f85c 	bl	8000238 <__aeabi_dsub>
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4610      	mov	r0, r2
 800e186:	4619      	mov	r1, r3
 800e188:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e18c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e190:	f7f2 fa0a 	bl	80005a8 <__aeabi_dmul>
 800e194:	4602      	mov	r2, r0
 800e196:	460b      	mov	r3, r1
 800e198:	4620      	mov	r0, r4
 800e19a:	4629      	mov	r1, r5
 800e19c:	f7f2 f84e 	bl	800023c <__adddf3>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	4614      	mov	r4, r2
 800e1a6:	461d      	mov	r5, r3
 800e1a8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e1ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800e1b0:	6818      	ldr	r0, [r3, #0]
 800e1b2:	f7f2 f9a1 	bl	80004f8 <__aeabi_f2d>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	4629      	mov	r1, r5
 800e1be:	f7f2 f83b 	bl	8000238 <__aeabi_dsub>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	4640      	mov	r0, r8
 800e1c8:	4649      	mov	r1, r9
 800e1ca:	f7f2 f9ed 	bl	80005a8 <__aeabi_dmul>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	4650      	mov	r0, sl
 800e1da:	4659      	mov	r1, fp
 800e1dc:	f7f2 f82e 	bl	800023c <__adddf3>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	e944 2302 	strd	r2, r3, [r4, #-8]
	        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800e1e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1ec:	61bb      	str	r3, [r7, #24]
 800e1ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e1f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e1f6:	61fb      	str	r3, [r7, #28]
 800e1f8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	460b      	mov	r3, r1
 800e200:	f7f2 f81c 	bl	800023c <__adddf3>
 800e204:	4602      	mov	r2, r0
 800e206:	460b      	mov	r3, r1
 800e208:	4610      	mov	r0, r2
 800e20a:	4619      	mov	r1, r3
 800e20c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800e210:	f7f2 f812 	bl	8000238 <__aeabi_dsub>
 800e214:	4602      	mov	r2, r0
 800e216:	460b      	mov	r3, r1
 800e218:	4614      	mov	r4, r2
 800e21a:	461d      	mov	r5, r3
 800e21c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e220:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e224:	6818      	ldr	r0, [r3, #0]
 800e226:	f7f2 f967 	bl	80004f8 <__aeabi_f2d>
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	4620      	mov	r0, r4
 800e230:	4629      	mov	r1, r5
 800e232:	f7f2 f801 	bl	8000238 <__aeabi_dsub>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e23e:	f7f2 f9b3 	bl	80005a8 <__aeabi_dmul>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	4690      	mov	r8, r2
 800e248:	4699      	mov	r9, r3
 800e24a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	f7f1 fff3 	bl	800023c <__adddf3>
 800e256:	4602      	mov	r2, r0
 800e258:	460b      	mov	r3, r1
 800e25a:	4610      	mov	r0, r2
 800e25c:	4619      	mov	r1, r3
 800e25e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800e262:	f7f1 ffeb 	bl	800023c <__adddf3>
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	4614      	mov	r4, r2
 800e26c:	461d      	mov	r5, r3
 800e26e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e272:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e276:	6818      	ldr	r0, [r3, #0]
 800e278:	f7f2 f93e 	bl	80004f8 <__aeabi_f2d>
 800e27c:	4602      	mov	r2, r0
 800e27e:	460b      	mov	r3, r1
 800e280:	4620      	mov	r0, r4
 800e282:	4629      	mov	r1, r5
 800e284:	f7f1 ffd8 	bl	8000238 <__aeabi_dsub>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	4610      	mov	r0, r2
 800e28e:	4619      	mov	r1, r3
 800e290:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800e294:	f7f2 f988 	bl	80005a8 <__aeabi_dmul>
 800e298:	4602      	mov	r2, r0
 800e29a:	460b      	mov	r3, r1
 800e29c:	4640      	mov	r0, r8
 800e29e:	4649      	mov	r1, r9
 800e2a0:	f7f1 ffcc 	bl	800023c <__adddf3>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4692      	mov	sl, r2
 800e2aa:	469b      	mov	fp, r3
 800e2ac:	f04f 0200 	mov.w	r2, #0
 800e2b0:	4b0c      	ldr	r3, [pc, #48]	; (800e2e4 <madgwick+0x13e8>)
 800e2b2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800e2b6:	f7f2 f977 	bl	80005a8 <__aeabi_dmul>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4690      	mov	r8, r2
 800e2c0:	4699      	mov	r9, r3
 800e2c2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	f7f1 ffb7 	bl	800023c <__adddf3>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	f04f 0000 	mov.w	r0, #0
 800e2d6:	4904      	ldr	r1, [pc, #16]	; (800e2e8 <madgwick+0x13ec>)
 800e2d8:	f7f1 ffae 	bl	8000238 <__aeabi_dsub>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	e005      	b.n	800e2ec <madgwick+0x13f0>
 800e2e0:	3fe00000 	.word	0x3fe00000
 800e2e4:	40100000 	.word	0x40100000
 800e2e8:	3ff00000 	.word	0x3ff00000
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4614      	mov	r4, r2
 800e2f0:	461d      	mov	r5, r3
 800e2f2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	f7f1 ff9f 	bl	800023c <__adddf3>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	4620      	mov	r0, r4
 800e304:	4629      	mov	r1, r5
 800e306:	f7f1 ff97 	bl	8000238 <__aeabi_dsub>
 800e30a:	4602      	mov	r2, r0
 800e30c:	460b      	mov	r3, r1
 800e30e:	4614      	mov	r4, r2
 800e310:	461d      	mov	r5, r3
 800e312:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e316:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800e31a:	6818      	ldr	r0, [r3, #0]
 800e31c:	f7f2 f8ec 	bl	80004f8 <__aeabi_f2d>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	4620      	mov	r0, r4
 800e326:	4629      	mov	r1, r5
 800e328:	f7f1 ff86 	bl	8000238 <__aeabi_dsub>
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	4640      	mov	r0, r8
 800e332:	4649      	mov	r1, r9
 800e334:	f7f2 f938 	bl	80005a8 <__aeabi_dmul>
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	4650      	mov	r0, sl
 800e33e:	4659      	mov	r1, fp
 800e340:	f7f1 ff7a 	bl	8000238 <__aeabi_dsub>
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	4692      	mov	sl, r2
 800e34a:	469b      	mov	fp, r3
 800e34c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	613a      	str	r2, [r7, #16]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e35a:	617b      	str	r3, [r7, #20]
 800e35c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e360:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e364:	f7f2 f920 	bl	80005a8 <__aeabi_dmul>
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	4614      	mov	r4, r2
 800e36e:	461d      	mov	r5, r3
 800e370:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e374:	4619      	mov	r1, r3
 800e376:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e37a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e37e:	f7f2 f913 	bl	80005a8 <__aeabi_dmul>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4620      	mov	r0, r4
 800e388:	4629      	mov	r1, r5
 800e38a:	f7f1 ff55 	bl	8000238 <__aeabi_dsub>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	4690      	mov	r8, r2
 800e394:	4699      	mov	r9, r3
 800e396:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800e39a:	f04f 0000 	mov.w	r0, #0
 800e39e:	49d5      	ldr	r1, [pc, #852]	; (800e6f4 <madgwick+0x17f8>)
 800e3a0:	f7f1 ff4a 	bl	8000238 <__aeabi_dsub>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800e3b0:	f7f1 ff42 	bl	8000238 <__aeabi_dsub>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	4610      	mov	r0, r2
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c4:	f7f2 f8f0 	bl	80005a8 <__aeabi_dmul>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	4614      	mov	r4, r2
 800e3ce:	461d      	mov	r5, r3
 800e3d0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800e3d4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e3d8:	f7f1 ff2e 	bl	8000238 <__aeabi_dsub>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	460b      	mov	r3, r1
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e3e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3ec:	f7f2 f8dc 	bl	80005a8 <__aeabi_dmul>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	f7f1 ff20 	bl	800023c <__adddf3>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	4614      	mov	r4, r2
 800e402:	461d      	mov	r5, r3
 800e404:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e408:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e40c:	6818      	ldr	r0, [r3, #0]
 800e40e:	f7f2 f873 	bl	80004f8 <__aeabi_f2d>
 800e412:	4602      	mov	r2, r0
 800e414:	460b      	mov	r3, r1
 800e416:	4620      	mov	r0, r4
 800e418:	4629      	mov	r1, r5
 800e41a:	f7f1 ff0d 	bl	8000238 <__aeabi_dsub>
 800e41e:	4602      	mov	r2, r0
 800e420:	460b      	mov	r3, r1
 800e422:	4640      	mov	r0, r8
 800e424:	4649      	mov	r1, r9
 800e426:	f7f2 f8bf 	bl	80005a8 <__aeabi_dmul>
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	4650      	mov	r0, sl
 800e430:	4659      	mov	r1, fp
 800e432:	f7f1 ff03 	bl	800023c <__adddf3>
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	4692      	mov	sl, r2
 800e43c:	469b      	mov	fp, r3
 800e43e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e442:	4619      	mov	r1, r3
 800e444:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e44c:	f7f2 f8ac 	bl	80005a8 <__aeabi_dmul>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	4614      	mov	r4, r2
 800e456:	461d      	mov	r5, r3
 800e458:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e45c:	4619      	mov	r1, r3
 800e45e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e462:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e466:	f7f2 f89f 	bl	80005a8 <__aeabi_dmul>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	4620      	mov	r0, r4
 800e470:	4629      	mov	r1, r5
 800e472:	f7f1 fee3 	bl	800023c <__adddf3>
 800e476:	4602      	mov	r2, r0
 800e478:	460b      	mov	r3, r1
 800e47a:	4690      	mov	r8, r2
 800e47c:	4699      	mov	r9, r3
 800e47e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800e482:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800e486:	f7f1 fed7 	bl	8000238 <__aeabi_dsub>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	4610      	mov	r0, r2
 800e490:	4619      	mov	r1, r3
 800e492:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49a:	f7f2 f885 	bl	80005a8 <__aeabi_dmul>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4614      	mov	r4, r2
 800e4a4:	461d      	mov	r5, r3
 800e4a6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800e4aa:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800e4ae:	f7f1 fec5 	bl	800023c <__adddf3>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e4be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4c2:	f7f2 f871 	bl	80005a8 <__aeabi_dmul>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	4629      	mov	r1, r5
 800e4ce:	f7f1 feb5 	bl	800023c <__adddf3>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	4614      	mov	r4, r2
 800e4d8:	461d      	mov	r5, r3
 800e4da:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e4de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e4e2:	6818      	ldr	r0, [r3, #0]
 800e4e4:	f7f2 f808 	bl	80004f8 <__aeabi_f2d>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f7f1 fea2 	bl	8000238 <__aeabi_dsub>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4640      	mov	r0, r8
 800e4fa:	4649      	mov	r1, r9
 800e4fc:	f7f2 f854 	bl	80005a8 <__aeabi_dmul>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	4650      	mov	r0, sl
 800e506:	4659      	mov	r1, fp
 800e508:	f7f1 fe98 	bl	800023c <__adddf3>
 800e50c:	4602      	mov	r2, r0
 800e50e:	460b      	mov	r3, r1
 800e510:	4692      	mov	sl, r2
 800e512:	469b      	mov	fp, r3
 800e514:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e518:	4619      	mov	r1, r3
 800e51a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e522:	f7f2 f841 	bl	80005a8 <__aeabi_dmul>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	4614      	mov	r4, r2
 800e52c:	461d      	mov	r5, r3
 800e52e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e532:	4619      	mov	r1, r3
 800e534:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e538:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e53c:	f7f2 f834 	bl	80005a8 <__aeabi_dmul>
 800e540:	4602      	mov	r2, r0
 800e542:	460b      	mov	r3, r1
 800e544:	4620      	mov	r0, r4
 800e546:	4629      	mov	r1, r5
 800e548:	f7f1 fe76 	bl	8000238 <__aeabi_dsub>
 800e54c:	4602      	mov	r2, r0
 800e54e:	460b      	mov	r3, r1
 800e550:	4690      	mov	r8, r2
 800e552:	4699      	mov	r9, r3
 800e554:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800e558:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800e55c:	f7f1 fe6e 	bl	800023c <__adddf3>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	4610      	mov	r0, r2
 800e566:	4619      	mov	r1, r3
 800e568:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f2 f81a 	bl	80005a8 <__aeabi_dmul>
 800e574:	4602      	mov	r2, r0
 800e576:	460b      	mov	r3, r1
 800e578:	4614      	mov	r4, r2
 800e57a:	461d      	mov	r5, r3
 800e57c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800e580:	f04f 0000 	mov.w	r0, #0
 800e584:	495b      	ldr	r1, [pc, #364]	; (800e6f4 <madgwick+0x17f8>)
 800e586:	f7f1 fe57 	bl	8000238 <__aeabi_dsub>
 800e58a:	4602      	mov	r2, r0
 800e58c:	460b      	mov	r3, r1
 800e58e:	4610      	mov	r0, r2
 800e590:	4619      	mov	r1, r3
 800e592:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800e596:	f7f1 fe4f 	bl	8000238 <__aeabi_dsub>
 800e59a:	4602      	mov	r2, r0
 800e59c:	460b      	mov	r3, r1
 800e59e:	4610      	mov	r0, r2
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e5a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e5aa:	f7f1 fffd 	bl	80005a8 <__aeabi_dmul>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	4620      	mov	r0, r4
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	f7f1 fe41 	bl	800023c <__adddf3>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	4614      	mov	r4, r2
 800e5c0:	461d      	mov	r5, r3
 800e5c2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e5c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800e5ca:	6818      	ldr	r0, [r3, #0]
 800e5cc:	f7f1 ff94 	bl	80004f8 <__aeabi_f2d>
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	4629      	mov	r1, r5
 800e5d8:	f7f1 fe2e 	bl	8000238 <__aeabi_dsub>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	460b      	mov	r3, r1
 800e5e0:	4640      	mov	r0, r8
 800e5e2:	4649      	mov	r1, r9
 800e5e4:	f7f1 ffe0 	bl	80005a8 <__aeabi_dmul>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	4650      	mov	r0, sl
 800e5f4:	4659      	mov	r1, fp
 800e5f6:	f7f1 fe21 	bl	800023c <__adddf3>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	e9c4 2300 	strd	r2, r3, [r4]
	        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800e602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e606:	4602      	mov	r2, r0
 800e608:	460b      	mov	r3, r1
 800e60a:	f7f1 fe17 	bl	800023c <__adddf3>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	4610      	mov	r0, r2
 800e614:	4619      	mov	r1, r3
 800e616:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800e61a:	f7f1 fe0d 	bl	8000238 <__aeabi_dsub>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	4614      	mov	r4, r2
 800e624:	461d      	mov	r5, r3
 800e626:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e62a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	f7f1 ff62 	bl	80004f8 <__aeabi_f2d>
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
 800e638:	4620      	mov	r0, r4
 800e63a:	4629      	mov	r1, r5
 800e63c:	f7f1 fdfc 	bl	8000238 <__aeabi_dsub>
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	4610      	mov	r0, r2
 800e646:	4619      	mov	r1, r3
 800e648:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800e64c:	f7f1 ffac 	bl	80005a8 <__aeabi_dmul>
 800e650:	4602      	mov	r2, r0
 800e652:	460b      	mov	r3, r1
 800e654:	4614      	mov	r4, r2
 800e656:	461d      	mov	r5, r3
 800e658:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	f7f1 fdec 	bl	800023c <__adddf3>
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	4610      	mov	r0, r2
 800e66a:	4619      	mov	r1, r3
 800e66c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800e670:	f7f1 fde4 	bl	800023c <__adddf3>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	4690      	mov	r8, r2
 800e67a:	4699      	mov	r9, r3
 800e67c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e680:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e684:	6818      	ldr	r0, [r3, #0]
 800e686:	f7f1 ff37 	bl	80004f8 <__aeabi_f2d>
 800e68a:	4602      	mov	r2, r0
 800e68c:	460b      	mov	r3, r1
 800e68e:	4640      	mov	r0, r8
 800e690:	4649      	mov	r1, r9
 800e692:	f7f1 fdd1 	bl	8000238 <__aeabi_dsub>
 800e696:	4602      	mov	r2, r0
 800e698:	460b      	mov	r3, r1
 800e69a:	4610      	mov	r0, r2
 800e69c:	4619      	mov	r1, r3
 800e69e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800e6a2:	f7f1 ff81 	bl	80005a8 <__aeabi_dmul>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	f7f1 fdc5 	bl	800023c <__adddf3>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	4690      	mov	r8, r2
 800e6b8:	4699      	mov	r9, r3
 800e6ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	60ba      	str	r2, [r7, #8]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e6c8:	60fb      	str	r3, [r7, #12]
 800e6ca:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e6ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e6d2:	f7f1 ff69 	bl	80005a8 <__aeabi_dmul>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	460b      	mov	r3, r1
 800e6da:	4614      	mov	r4, r2
 800e6dc:	461d      	mov	r5, r3
 800e6de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e6e8:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e6ec:	f7f1 ff5c 	bl	80005a8 <__aeabi_dmul>
 800e6f0:	e002      	b.n	800e6f8 <madgwick+0x17fc>
 800e6f2:	bf00      	nop
 800e6f4:	3fe00000 	.word	0x3fe00000
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	4629      	mov	r1, r5
 800e700:	f7f1 fd9c 	bl	800023c <__adddf3>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	4692      	mov	sl, r2
 800e70a:	469b      	mov	fp, r3
 800e70c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800e710:	f04f 0000 	mov.w	r0, #0
 800e714:	49d0      	ldr	r1, [pc, #832]	; (800ea58 <madgwick+0x1b5c>)
 800e716:	f7f1 fd8f 	bl	8000238 <__aeabi_dsub>
 800e71a:	4602      	mov	r2, r0
 800e71c:	460b      	mov	r3, r1
 800e71e:	4610      	mov	r0, r2
 800e720:	4619      	mov	r1, r3
 800e722:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800e726:	f7f1 fd87 	bl	8000238 <__aeabi_dsub>
 800e72a:	4602      	mov	r2, r0
 800e72c:	460b      	mov	r3, r1
 800e72e:	4610      	mov	r0, r2
 800e730:	4619      	mov	r1, r3
 800e732:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73a:	f7f1 ff35 	bl	80005a8 <__aeabi_dmul>
 800e73e:	4602      	mov	r2, r0
 800e740:	460b      	mov	r3, r1
 800e742:	4614      	mov	r4, r2
 800e744:	461d      	mov	r5, r3
 800e746:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800e74a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e74e:	f7f1 fd73 	bl	8000238 <__aeabi_dsub>
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	4610      	mov	r0, r2
 800e758:	4619      	mov	r1, r3
 800e75a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e75e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e762:	f7f1 ff21 	bl	80005a8 <__aeabi_dmul>
 800e766:	4602      	mov	r2, r0
 800e768:	460b      	mov	r3, r1
 800e76a:	4620      	mov	r0, r4
 800e76c:	4629      	mov	r1, r5
 800e76e:	f7f1 fd65 	bl	800023c <__adddf3>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	4614      	mov	r4, r2
 800e778:	461d      	mov	r5, r3
 800e77a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e77e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e782:	6818      	ldr	r0, [r3, #0]
 800e784:	f7f1 feb8 	bl	80004f8 <__aeabi_f2d>
 800e788:	4602      	mov	r2, r0
 800e78a:	460b      	mov	r3, r1
 800e78c:	4620      	mov	r0, r4
 800e78e:	4629      	mov	r1, r5
 800e790:	f7f1 fd52 	bl	8000238 <__aeabi_dsub>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4650      	mov	r0, sl
 800e79a:	4659      	mov	r1, fp
 800e79c:	f7f1 ff04 	bl	80005a8 <__aeabi_dmul>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	4640      	mov	r0, r8
 800e7a6:	4649      	mov	r1, r9
 800e7a8:	f7f1 fd48 	bl	800023c <__adddf3>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	4614      	mov	r4, r2
 800e7b2:	461d      	mov	r5, r3
 800e7b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	603a      	str	r2, [r7, #0]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e7c2:	607b      	str	r3, [r7, #4]
 800e7c4:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e7c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e7cc:	f7f1 feec 	bl	80005a8 <__aeabi_dmul>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4690      	mov	r8, r2
 800e7d6:	4699      	mov	r9, r3
 800e7d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e7dc:	4619      	mov	r1, r3
 800e7de:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e7e2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e7e6:	f7f1 fedf 	bl	80005a8 <__aeabi_dmul>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4640      	mov	r0, r8
 800e7f0:	4649      	mov	r1, r9
 800e7f2:	f7f1 fd23 	bl	800023c <__adddf3>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4690      	mov	r8, r2
 800e7fc:	4699      	mov	r9, r3
 800e7fe:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800e802:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800e806:	f7f1 fd17 	bl	8000238 <__aeabi_dsub>
 800e80a:	4602      	mov	r2, r0
 800e80c:	460b      	mov	r3, r1
 800e80e:	4610      	mov	r0, r2
 800e810:	4619      	mov	r1, r3
 800e812:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81a:	f7f1 fec5 	bl	80005a8 <__aeabi_dmul>
 800e81e:	4602      	mov	r2, r0
 800e820:	460b      	mov	r3, r1
 800e822:	4692      	mov	sl, r2
 800e824:	469b      	mov	fp, r3
 800e826:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800e82a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800e82e:	f7f1 fd05 	bl	800023c <__adddf3>
 800e832:	4602      	mov	r2, r0
 800e834:	460b      	mov	r3, r1
 800e836:	4610      	mov	r0, r2
 800e838:	4619      	mov	r1, r3
 800e83a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e83e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e842:	f7f1 feb1 	bl	80005a8 <__aeabi_dmul>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	4650      	mov	r0, sl
 800e84c:	4659      	mov	r1, fp
 800e84e:	f7f1 fcf5 	bl	800023c <__adddf3>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	4692      	mov	sl, r2
 800e858:	469b      	mov	fp, r3
 800e85a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e85e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e862:	6818      	ldr	r0, [r3, #0]
 800e864:	f7f1 fe48 	bl	80004f8 <__aeabi_f2d>
 800e868:	4602      	mov	r2, r0
 800e86a:	460b      	mov	r3, r1
 800e86c:	4650      	mov	r0, sl
 800e86e:	4659      	mov	r1, fp
 800e870:	f7f1 fce2 	bl	8000238 <__aeabi_dsub>
 800e874:	4602      	mov	r2, r0
 800e876:	460b      	mov	r3, r1
 800e878:	4640      	mov	r0, r8
 800e87a:	4649      	mov	r1, r9
 800e87c:	f7f1 fe94 	bl	80005a8 <__aeabi_dmul>
 800e880:	4602      	mov	r2, r0
 800e882:	460b      	mov	r3, r1
 800e884:	4620      	mov	r0, r4
 800e886:	4629      	mov	r1, r5
 800e888:	f7f1 fcd8 	bl	800023c <__adddf3>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	4614      	mov	r4, r2
 800e892:	461d      	mov	r5, r3
 800e894:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e898:	4619      	mov	r1, r3
 800e89a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8a2:	f7f1 fe81 	bl	80005a8 <__aeabi_dmul>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4690      	mov	r8, r2
 800e8ac:	4699      	mov	r9, r3
 800e8ae:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800e8b2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800e8b6:	f7f1 fcc1 	bl	800023c <__adddf3>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	460b      	mov	r3, r1
 800e8be:	4610      	mov	r0, r2
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ca:	f7f1 fe6d 	bl	80005a8 <__aeabi_dmul>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4692      	mov	sl, r2
 800e8d4:	469b      	mov	fp, r3
 800e8d6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800e8da:	f04f 0000 	mov.w	r0, #0
 800e8de:	495e      	ldr	r1, [pc, #376]	; (800ea58 <madgwick+0x1b5c>)
 800e8e0:	f7f1 fcaa 	bl	8000238 <__aeabi_dsub>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800e8f0:	f7f1 fca2 	bl	8000238 <__aeabi_dsub>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	4610      	mov	r0, r2
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e900:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e904:	f7f1 fe50 	bl	80005a8 <__aeabi_dmul>
 800e908:	4602      	mov	r2, r0
 800e90a:	460b      	mov	r3, r1
 800e90c:	4650      	mov	r0, sl
 800e90e:	4659      	mov	r1, fp
 800e910:	f7f1 fc94 	bl	800023c <__adddf3>
 800e914:	4602      	mov	r2, r0
 800e916:	460b      	mov	r3, r1
 800e918:	4692      	mov	sl, r2
 800e91a:	469b      	mov	fp, r3
 800e91c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800e920:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800e924:	6818      	ldr	r0, [r3, #0]
 800e926:	f7f1 fde7 	bl	80004f8 <__aeabi_f2d>
 800e92a:	4602      	mov	r2, r0
 800e92c:	460b      	mov	r3, r1
 800e92e:	4650      	mov	r0, sl
 800e930:	4659      	mov	r1, fp
 800e932:	f7f1 fc81 	bl	8000238 <__aeabi_dsub>
 800e936:	4602      	mov	r2, r0
 800e938:	460b      	mov	r3, r1
 800e93a:	4640      	mov	r0, r8
 800e93c:	4649      	mov	r1, r9
 800e93e:	f7f1 fe33 	bl	80005a8 <__aeabi_dmul>
 800e942:	4602      	mov	r2, r0
 800e944:	460b      	mov	r3, r1
 800e946:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800e94a:	460e      	mov	r6, r1
 800e94c:	4620      	mov	r0, r4
 800e94e:	4629      	mov	r1, r5
 800e950:	f7f1 fc74 	bl	800023c <__adddf3>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	e946 2302 	strd	r2, r3, [r6, #-8]
	        recipNorm = 1.0 / sqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);  // normalise step magnitude
 800e95c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e960:	4619      	mov	r1, r3
 800e962:	e9d1 2300 	ldrd	r2, r3, [r1]
 800e966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e96a:	f7f1 fe1d 	bl	80005a8 <__aeabi_dmul>
 800e96e:	4602      	mov	r2, r0
 800e970:	460b      	mov	r3, r1
 800e972:	4614      	mov	r4, r2
 800e974:	461d      	mov	r5, r3
 800e976:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e97a:	4619      	mov	r1, r3
 800e97c:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 800e980:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e984:	f7f1 fe10 	bl	80005a8 <__aeabi_dmul>
 800e988:	4602      	mov	r2, r0
 800e98a:	460b      	mov	r3, r1
 800e98c:	4620      	mov	r0, r4
 800e98e:	4629      	mov	r1, r5
 800e990:	f7f1 fc54 	bl	800023c <__adddf3>
 800e994:	4602      	mov	r2, r0
 800e996:	460b      	mov	r3, r1
 800e998:	4614      	mov	r4, r2
 800e99a:	461d      	mov	r5, r3
 800e99c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	e9d1 2300 	ldrd	r2, r3, [r1]
 800e9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9aa:	f7f1 fdfd 	bl	80005a8 <__aeabi_dmul>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	f7f1 fc41 	bl	800023c <__adddf3>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4614      	mov	r4, r2
 800e9c0:	461d      	mov	r5, r3
 800e9c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 800e9cc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800e9d0:	f7f1 fdea 	bl	80005a8 <__aeabi_dmul>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4620      	mov	r0, r4
 800e9da:	4629      	mov	r1, r5
 800e9dc:	f7f1 fc2e 	bl	800023c <__adddf3>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	ec43 2b17 	vmov	d7, r2, r3
 800e9e8:	eeb0 0a47 	vmov.f32	s0, s14
 800e9ec:	eef0 0a67 	vmov.f32	s1, s15
 800e9f0:	f001 fb2a 	bl	8010048 <sqrt>
 800e9f4:	ec53 2b10 	vmov	r2, r3, d0
 800e9f8:	f04f 0000 	mov.w	r0, #0
 800e9fc:	4917      	ldr	r1, [pc, #92]	; (800ea5c <madgwick+0x1b60>)
 800e9fe:	f7f1 fefd 	bl	80007fc <__aeabi_ddiv>
 800ea02:	4602      	mov	r2, r0
 800ea04:	460b      	mov	r3, r1
 800ea06:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        s0 *= recipNorm;
 800ea0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ea0e:	461c      	mov	r4, r3
 800ea10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ea14:	4619      	mov	r1, r3
 800ea16:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800ea1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea1e:	f7f1 fdc3 	bl	80005a8 <__aeabi_dmul>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	e9c4 2300 	strd	r2, r3, [r4]
	        s1 *= recipNorm;
 800ea2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ea2e:	461c      	mov	r4, r3
 800ea30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ea34:	4619      	mov	r1, r3
 800ea36:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800ea3a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ea3e:	f7f1 fdb3 	bl	80005a8 <__aeabi_dmul>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	e944 2302 	strd	r2, r3, [r4, #-8]
	        s2 *= recipNorm;
 800ea4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ea4e:	461c      	mov	r4, r3
 800ea50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ea54:	4619      	mov	r1, r3
 800ea56:	e003      	b.n	800ea60 <madgwick+0x1b64>
 800ea58:	3fe00000 	.word	0x3fe00000
 800ea5c:	3ff00000 	.word	0x3ff00000
 800ea60:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800ea64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea68:	f7f1 fd9e 	bl	80005a8 <__aeabi_dmul>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	460b      	mov	r3, r1
 800ea70:	e9c4 2300 	strd	r2, r3, [r4]
	        s3 *= recipNorm;
 800ea74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ea78:	461c      	mov	r4, r3
 800ea7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ea7e:	4619      	mov	r1, r3
 800ea80:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800ea84:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800ea88:	f7f1 fd8e 	bl	80005a8 <__aeabi_dmul>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	460b      	mov	r3, r1
 800ea90:	e944 2302 	strd	r2, r3, [r4, #-8]

	        // Apply feedback step
	        qDot1 -= beta * s0;
 800ea94:	4ba2      	ldr	r3, [pc, #648]	; (800ed20 <madgwick+0x1e24>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7f1 fd2d 	bl	80004f8 <__aeabi_f2d>
 800ea9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fd7f 	bl	80005a8 <__aeabi_dmul>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800eab2:	f7f1 fbc1 	bl	8000238 <__aeabi_dsub>
 800eab6:	4602      	mov	r2, r0
 800eab8:	460b      	mov	r3, r1
 800eaba:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	        qDot2 -= beta * s1;
 800eabe:	4b98      	ldr	r3, [pc, #608]	; (800ed20 <madgwick+0x1e24>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7f1 fd18 	bl	80004f8 <__aeabi_f2d>
 800eac8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800eacc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ead0:	f7f1 fd6a 	bl	80005a8 <__aeabi_dmul>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800eadc:	f7f1 fbac 	bl	8000238 <__aeabi_dsub>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
	        qDot3 -= beta * s2;
 800eae8:	4b8d      	ldr	r3, [pc, #564]	; (800ed20 <madgwick+0x1e24>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7f1 fd03 	bl	80004f8 <__aeabi_f2d>
 800eaf2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafa:	f7f1 fd55 	bl	80005a8 <__aeabi_dmul>
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800eb06:	f7f1 fb97 	bl	8000238 <__aeabi_dsub>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	        qDot4 -= beta * s3;
 800eb12:	4b83      	ldr	r3, [pc, #524]	; (800ed20 <madgwick+0x1e24>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7f1 fcee 	bl	80004f8 <__aeabi_f2d>
 800eb1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eb20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eb24:	f7f1 fd40 	bl	80005a8 <__aeabi_dmul>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800eb30:	f7f1 fb82 	bl	8000238 <__aeabi_dsub>
 800eb34:	4602      	mov	r2, r0
 800eb36:	460b      	mov	r3, r1
 800eb38:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168

	        // Integrate rate of change of quaternion to yield quaternion
	        q0 += qDot1 * deltaT;
 800eb3c:	4b79      	ldr	r3, [pc, #484]	; (800ed24 <madgwick+0x1e28>)
 800eb3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb42:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800eb46:	f7f1 fd2f 	bl	80005a8 <__aeabi_dmul>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800eb52:	f7f1 fb73 	bl	800023c <__adddf3>
 800eb56:	4602      	mov	r2, r0
 800eb58:	460b      	mov	r3, r1
 800eb5a:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
	        q1 += qDot2 * deltaT;
 800eb5e:	4b71      	ldr	r3, [pc, #452]	; (800ed24 <madgwick+0x1e28>)
 800eb60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb64:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800eb68:	f7f1 fd1e 	bl	80005a8 <__aeabi_dmul>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	460b      	mov	r3, r1
 800eb70:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800eb74:	f7f1 fb62 	bl	800023c <__adddf3>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
	        q2 += qDot3 * deltaT;
 800eb80:	4b68      	ldr	r3, [pc, #416]	; (800ed24 <madgwick+0x1e28>)
 800eb82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb86:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800eb8a:	f7f1 fd0d 	bl	80005a8 <__aeabi_dmul>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800eb96:	f7f1 fb51 	bl	800023c <__adddf3>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	        q3 += qDot4 * deltaT;
 800eba2:	4b60      	ldr	r3, [pc, #384]	; (800ed24 <madgwick+0x1e28>)
 800eba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eba8:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800ebac:	f7f1 fcfc 	bl	80005a8 <__aeabi_dmul>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800ebb8:	f7f1 fb40 	bl	800023c <__adddf3>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188

	        // Normalise quaternion
	        recipNorm = 1.0 / sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800ebc4:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800ebc8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800ebcc:	f7f1 fcec 	bl	80005a8 <__aeabi_dmul>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	4614      	mov	r4, r2
 800ebd6:	461d      	mov	r5, r3
 800ebd8:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800ebdc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800ebe0:	f7f1 fce2 	bl	80005a8 <__aeabi_dmul>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	4620      	mov	r0, r4
 800ebea:	4629      	mov	r1, r5
 800ebec:	f7f1 fb26 	bl	800023c <__adddf3>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	4614      	mov	r4, r2
 800ebf6:	461d      	mov	r5, r3
 800ebf8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800ebfc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800ec00:	f7f1 fcd2 	bl	80005a8 <__aeabi_dmul>
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	4620      	mov	r0, r4
 800ec0a:	4629      	mov	r1, r5
 800ec0c:	f7f1 fb16 	bl	800023c <__adddf3>
 800ec10:	4602      	mov	r2, r0
 800ec12:	460b      	mov	r3, r1
 800ec14:	4614      	mov	r4, r2
 800ec16:	461d      	mov	r5, r3
 800ec18:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800ec1c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800ec20:	f7f1 fcc2 	bl	80005a8 <__aeabi_dmul>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4620      	mov	r0, r4
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	f7f1 fb06 	bl	800023c <__adddf3>
 800ec30:	4602      	mov	r2, r0
 800ec32:	460b      	mov	r3, r1
 800ec34:	ec43 2b17 	vmov	d7, r2, r3
 800ec38:	eeb0 0a47 	vmov.f32	s0, s14
 800ec3c:	eef0 0a67 	vmov.f32	s1, s15
 800ec40:	f001 fa02 	bl	8010048 <sqrt>
 800ec44:	ec53 2b10 	vmov	r2, r3, d0
 800ec48:	f04f 0000 	mov.w	r0, #0
 800ec4c:	4936      	ldr	r1, [pc, #216]	; (800ed28 <madgwick+0x1e2c>)
 800ec4e:	f7f1 fdd5 	bl	80007fc <__aeabi_ddiv>
 800ec52:	4602      	mov	r2, r0
 800ec54:	460b      	mov	r3, r1
 800ec56:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        q0 *= recipNorm;
 800ec5a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800ec5e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800ec62:	f7f1 fca1 	bl	80005a8 <__aeabi_dmul>
 800ec66:	4602      	mov	r2, r0
 800ec68:	460b      	mov	r3, r1
 800ec6a:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
	        q1 *= recipNorm;
 800ec6e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800ec72:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800ec76:	f7f1 fc97 	bl	80005a8 <__aeabi_dmul>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
	        q2 *= recipNorm;
 800ec82:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800ec86:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800ec8a:	f7f1 fc8d 	bl	80005a8 <__aeabi_dmul>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	460b      	mov	r3, r1
 800ec92:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	        q3 *= recipNorm;
 800ec96:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800ec9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800ec9e:	f7f1 fc83 	bl	80005a8 <__aeabi_dmul>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188

	        q[0] = q0;
 800ecaa:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800ecae:	f7f1 ff2b 	bl	8000b08 <__aeabi_d2f>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800ecb8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	601a      	str	r2, [r3, #0]
	        q[1] = q1;
 800ecc0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800ecc4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	1d1c      	adds	r4, r3, #4
 800eccc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800ecd0:	f7f1 ff1a 	bl	8000b08 <__aeabi_d2f>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	6023      	str	r3, [r4, #0]
	        q[2] = q2;
 800ecd8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800ecdc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f103 0408 	add.w	r4, r3, #8
 800ece6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800ecea:	f7f1 ff0d 	bl	8000b08 <__aeabi_d2f>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	6023      	str	r3, [r4, #0]
	        q[3] = q3;
 800ecf2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800ecf6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f103 040c 	add.w	r4, r3, #12
 800ed00:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800ed04:	f7f1 ff00 	bl	8000b08 <__aeabi_d2f>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	6023      	str	r3, [r4, #0]
 800ed0c:	e002      	b.n	800ed14 <madgwick+0x1e18>
	        if (a_norm == 0.) return;  // handle NaN
 800ed0e:	bf00      	nop
 800ed10:	e000      	b.n	800ed14 <madgwick+0x1e18>
	        if (m_norm == 0.) return;  // handle NaN
 800ed12:	bf00      	nop
	        /*print_float(str, gy);
	        print_float(str, gz);
	        print_float(str, mx);
	        print_float(str, my);
	        print_float(str, mz);*/
}
 800ed14:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed1e:	bf00      	nop
 800ed20:	2000003c 	.word	0x2000003c
 800ed24:	20001848 	.word	0x20001848
 800ed28:	3ff00000 	.word	0x3ff00000

0800ed2c <__errno>:
 800ed2c:	4b01      	ldr	r3, [pc, #4]	; (800ed34 <__errno+0x8>)
 800ed2e:	6818      	ldr	r0, [r3, #0]
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	20000040 	.word	0x20000040

0800ed38 <__libc_init_array>:
 800ed38:	b570      	push	{r4, r5, r6, lr}
 800ed3a:	4d0d      	ldr	r5, [pc, #52]	; (800ed70 <__libc_init_array+0x38>)
 800ed3c:	4c0d      	ldr	r4, [pc, #52]	; (800ed74 <__libc_init_array+0x3c>)
 800ed3e:	1b64      	subs	r4, r4, r5
 800ed40:	10a4      	asrs	r4, r4, #2
 800ed42:	2600      	movs	r6, #0
 800ed44:	42a6      	cmp	r6, r4
 800ed46:	d109      	bne.n	800ed5c <__libc_init_array+0x24>
 800ed48:	4d0b      	ldr	r5, [pc, #44]	; (800ed78 <__libc_init_array+0x40>)
 800ed4a:	4c0c      	ldr	r4, [pc, #48]	; (800ed7c <__libc_init_array+0x44>)
 800ed4c:	f001 fcf4 	bl	8010738 <_init>
 800ed50:	1b64      	subs	r4, r4, r5
 800ed52:	10a4      	asrs	r4, r4, #2
 800ed54:	2600      	movs	r6, #0
 800ed56:	42a6      	cmp	r6, r4
 800ed58:	d105      	bne.n	800ed66 <__libc_init_array+0x2e>
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
 800ed5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed60:	4798      	blx	r3
 800ed62:	3601      	adds	r6, #1
 800ed64:	e7ee      	b.n	800ed44 <__libc_init_array+0xc>
 800ed66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed6a:	4798      	blx	r3
 800ed6c:	3601      	adds	r6, #1
 800ed6e:	e7f2      	b.n	800ed56 <__libc_init_array+0x1e>
 800ed70:	08010e4c 	.word	0x08010e4c
 800ed74:	08010e4c 	.word	0x08010e4c
 800ed78:	08010e4c 	.word	0x08010e4c
 800ed7c:	08010e50 	.word	0x08010e50

0800ed80 <memcpy>:
 800ed80:	440a      	add	r2, r1
 800ed82:	4291      	cmp	r1, r2
 800ed84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed88:	d100      	bne.n	800ed8c <memcpy+0xc>
 800ed8a:	4770      	bx	lr
 800ed8c:	b510      	push	{r4, lr}
 800ed8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed96:	4291      	cmp	r1, r2
 800ed98:	d1f9      	bne.n	800ed8e <memcpy+0xe>
 800ed9a:	bd10      	pop	{r4, pc}

0800ed9c <memset>:
 800ed9c:	4402      	add	r2, r0
 800ed9e:	4603      	mov	r3, r0
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d100      	bne.n	800eda6 <memset+0xa>
 800eda4:	4770      	bx	lr
 800eda6:	f803 1b01 	strb.w	r1, [r3], #1
 800edaa:	e7f9      	b.n	800eda0 <memset+0x4>

0800edac <sniprintf>:
 800edac:	b40c      	push	{r2, r3}
 800edae:	b530      	push	{r4, r5, lr}
 800edb0:	4b17      	ldr	r3, [pc, #92]	; (800ee10 <sniprintf+0x64>)
 800edb2:	1e0c      	subs	r4, r1, #0
 800edb4:	681d      	ldr	r5, [r3, #0]
 800edb6:	b09d      	sub	sp, #116	; 0x74
 800edb8:	da08      	bge.n	800edcc <sniprintf+0x20>
 800edba:	238b      	movs	r3, #139	; 0x8b
 800edbc:	602b      	str	r3, [r5, #0]
 800edbe:	f04f 30ff 	mov.w	r0, #4294967295
 800edc2:	b01d      	add	sp, #116	; 0x74
 800edc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edc8:	b002      	add	sp, #8
 800edca:	4770      	bx	lr
 800edcc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800edd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800edd4:	bf14      	ite	ne
 800edd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800edda:	4623      	moveq	r3, r4
 800eddc:	9304      	str	r3, [sp, #16]
 800edde:	9307      	str	r3, [sp, #28]
 800ede0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ede4:	9002      	str	r0, [sp, #8]
 800ede6:	9006      	str	r0, [sp, #24]
 800ede8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800edec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800edee:	ab21      	add	r3, sp, #132	; 0x84
 800edf0:	a902      	add	r1, sp, #8
 800edf2:	4628      	mov	r0, r5
 800edf4:	9301      	str	r3, [sp, #4]
 800edf6:	f000 f8b5 	bl	800ef64 <_svfiprintf_r>
 800edfa:	1c43      	adds	r3, r0, #1
 800edfc:	bfbc      	itt	lt
 800edfe:	238b      	movlt	r3, #139	; 0x8b
 800ee00:	602b      	strlt	r3, [r5, #0]
 800ee02:	2c00      	cmp	r4, #0
 800ee04:	d0dd      	beq.n	800edc2 <sniprintf+0x16>
 800ee06:	9b02      	ldr	r3, [sp, #8]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	701a      	strb	r2, [r3, #0]
 800ee0c:	e7d9      	b.n	800edc2 <sniprintf+0x16>
 800ee0e:	bf00      	nop
 800ee10:	20000040 	.word	0x20000040

0800ee14 <siscanf>:
 800ee14:	b40e      	push	{r1, r2, r3}
 800ee16:	b510      	push	{r4, lr}
 800ee18:	b09f      	sub	sp, #124	; 0x7c
 800ee1a:	ac21      	add	r4, sp, #132	; 0x84
 800ee1c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ee20:	f854 2b04 	ldr.w	r2, [r4], #4
 800ee24:	9201      	str	r2, [sp, #4]
 800ee26:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ee2a:	9004      	str	r0, [sp, #16]
 800ee2c:	9008      	str	r0, [sp, #32]
 800ee2e:	f7f1 f9a7 	bl	8000180 <strlen>
 800ee32:	4b0c      	ldr	r3, [pc, #48]	; (800ee64 <siscanf+0x50>)
 800ee34:	9005      	str	r0, [sp, #20]
 800ee36:	9009      	str	r0, [sp, #36]	; 0x24
 800ee38:	930d      	str	r3, [sp, #52]	; 0x34
 800ee3a:	480b      	ldr	r0, [pc, #44]	; (800ee68 <siscanf+0x54>)
 800ee3c:	9a01      	ldr	r2, [sp, #4]
 800ee3e:	6800      	ldr	r0, [r0, #0]
 800ee40:	9403      	str	r4, [sp, #12]
 800ee42:	2300      	movs	r3, #0
 800ee44:	9311      	str	r3, [sp, #68]	; 0x44
 800ee46:	9316      	str	r3, [sp, #88]	; 0x58
 800ee48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ee50:	a904      	add	r1, sp, #16
 800ee52:	4623      	mov	r3, r4
 800ee54:	f000 f9e0 	bl	800f218 <__ssvfiscanf_r>
 800ee58:	b01f      	add	sp, #124	; 0x7c
 800ee5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee5e:	b003      	add	sp, #12
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	0800ee6d 	.word	0x0800ee6d
 800ee68:	20000040 	.word	0x20000040

0800ee6c <__seofread>:
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	4770      	bx	lr

0800ee70 <strcpy>:
 800ee70:	4603      	mov	r3, r0
 800ee72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee76:	f803 2b01 	strb.w	r2, [r3], #1
 800ee7a:	2a00      	cmp	r2, #0
 800ee7c:	d1f9      	bne.n	800ee72 <strcpy+0x2>
 800ee7e:	4770      	bx	lr

0800ee80 <strstr>:
 800ee80:	780a      	ldrb	r2, [r1, #0]
 800ee82:	b570      	push	{r4, r5, r6, lr}
 800ee84:	b96a      	cbnz	r2, 800eea2 <strstr+0x22>
 800ee86:	bd70      	pop	{r4, r5, r6, pc}
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d109      	bne.n	800eea0 <strstr+0x20>
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	4605      	mov	r5, r0
 800ee90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d0f6      	beq.n	800ee86 <strstr+0x6>
 800ee98:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ee9c:	429e      	cmp	r6, r3
 800ee9e:	d0f7      	beq.n	800ee90 <strstr+0x10>
 800eea0:	3001      	adds	r0, #1
 800eea2:	7803      	ldrb	r3, [r0, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d1ef      	bne.n	800ee88 <strstr+0x8>
 800eea8:	4618      	mov	r0, r3
 800eeaa:	e7ec      	b.n	800ee86 <strstr+0x6>

0800eeac <__ssputs_r>:
 800eeac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb0:	688e      	ldr	r6, [r1, #8]
 800eeb2:	429e      	cmp	r6, r3
 800eeb4:	4682      	mov	sl, r0
 800eeb6:	460c      	mov	r4, r1
 800eeb8:	4690      	mov	r8, r2
 800eeba:	461f      	mov	r7, r3
 800eebc:	d838      	bhi.n	800ef30 <__ssputs_r+0x84>
 800eebe:	898a      	ldrh	r2, [r1, #12]
 800eec0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eec4:	d032      	beq.n	800ef2c <__ssputs_r+0x80>
 800eec6:	6825      	ldr	r5, [r4, #0]
 800eec8:	6909      	ldr	r1, [r1, #16]
 800eeca:	eba5 0901 	sub.w	r9, r5, r1
 800eece:	6965      	ldr	r5, [r4, #20]
 800eed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eed4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eed8:	3301      	adds	r3, #1
 800eeda:	444b      	add	r3, r9
 800eedc:	106d      	asrs	r5, r5, #1
 800eede:	429d      	cmp	r5, r3
 800eee0:	bf38      	it	cc
 800eee2:	461d      	movcc	r5, r3
 800eee4:	0553      	lsls	r3, r2, #21
 800eee6:	d531      	bpl.n	800ef4c <__ssputs_r+0xa0>
 800eee8:	4629      	mov	r1, r5
 800eeea:	f000 ffe5 	bl	800feb8 <_malloc_r>
 800eeee:	4606      	mov	r6, r0
 800eef0:	b950      	cbnz	r0, 800ef08 <__ssputs_r+0x5c>
 800eef2:	230c      	movs	r3, #12
 800eef4:	f8ca 3000 	str.w	r3, [sl]
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eefe:	81a3      	strh	r3, [r4, #12]
 800ef00:	f04f 30ff 	mov.w	r0, #4294967295
 800ef04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef08:	6921      	ldr	r1, [r4, #16]
 800ef0a:	464a      	mov	r2, r9
 800ef0c:	f7ff ff38 	bl	800ed80 <memcpy>
 800ef10:	89a3      	ldrh	r3, [r4, #12]
 800ef12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef1a:	81a3      	strh	r3, [r4, #12]
 800ef1c:	6126      	str	r6, [r4, #16]
 800ef1e:	6165      	str	r5, [r4, #20]
 800ef20:	444e      	add	r6, r9
 800ef22:	eba5 0509 	sub.w	r5, r5, r9
 800ef26:	6026      	str	r6, [r4, #0]
 800ef28:	60a5      	str	r5, [r4, #8]
 800ef2a:	463e      	mov	r6, r7
 800ef2c:	42be      	cmp	r6, r7
 800ef2e:	d900      	bls.n	800ef32 <__ssputs_r+0x86>
 800ef30:	463e      	mov	r6, r7
 800ef32:	6820      	ldr	r0, [r4, #0]
 800ef34:	4632      	mov	r2, r6
 800ef36:	4641      	mov	r1, r8
 800ef38:	f000 ff38 	bl	800fdac <memmove>
 800ef3c:	68a3      	ldr	r3, [r4, #8]
 800ef3e:	1b9b      	subs	r3, r3, r6
 800ef40:	60a3      	str	r3, [r4, #8]
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	4433      	add	r3, r6
 800ef46:	6023      	str	r3, [r4, #0]
 800ef48:	2000      	movs	r0, #0
 800ef4a:	e7db      	b.n	800ef04 <__ssputs_r+0x58>
 800ef4c:	462a      	mov	r2, r5
 800ef4e:	f001 f827 	bl	800ffa0 <_realloc_r>
 800ef52:	4606      	mov	r6, r0
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d1e1      	bne.n	800ef1c <__ssputs_r+0x70>
 800ef58:	6921      	ldr	r1, [r4, #16]
 800ef5a:	4650      	mov	r0, sl
 800ef5c:	f000 ff40 	bl	800fde0 <_free_r>
 800ef60:	e7c7      	b.n	800eef2 <__ssputs_r+0x46>
	...

0800ef64 <_svfiprintf_r>:
 800ef64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef68:	4698      	mov	r8, r3
 800ef6a:	898b      	ldrh	r3, [r1, #12]
 800ef6c:	061b      	lsls	r3, r3, #24
 800ef6e:	b09d      	sub	sp, #116	; 0x74
 800ef70:	4607      	mov	r7, r0
 800ef72:	460d      	mov	r5, r1
 800ef74:	4614      	mov	r4, r2
 800ef76:	d50e      	bpl.n	800ef96 <_svfiprintf_r+0x32>
 800ef78:	690b      	ldr	r3, [r1, #16]
 800ef7a:	b963      	cbnz	r3, 800ef96 <_svfiprintf_r+0x32>
 800ef7c:	2140      	movs	r1, #64	; 0x40
 800ef7e:	f000 ff9b 	bl	800feb8 <_malloc_r>
 800ef82:	6028      	str	r0, [r5, #0]
 800ef84:	6128      	str	r0, [r5, #16]
 800ef86:	b920      	cbnz	r0, 800ef92 <_svfiprintf_r+0x2e>
 800ef88:	230c      	movs	r3, #12
 800ef8a:	603b      	str	r3, [r7, #0]
 800ef8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef90:	e0d1      	b.n	800f136 <_svfiprintf_r+0x1d2>
 800ef92:	2340      	movs	r3, #64	; 0x40
 800ef94:	616b      	str	r3, [r5, #20]
 800ef96:	2300      	movs	r3, #0
 800ef98:	9309      	str	r3, [sp, #36]	; 0x24
 800ef9a:	2320      	movs	r3, #32
 800ef9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efa0:	f8cd 800c 	str.w	r8, [sp, #12]
 800efa4:	2330      	movs	r3, #48	; 0x30
 800efa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f150 <_svfiprintf_r+0x1ec>
 800efaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efae:	f04f 0901 	mov.w	r9, #1
 800efb2:	4623      	mov	r3, r4
 800efb4:	469a      	mov	sl, r3
 800efb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efba:	b10a      	cbz	r2, 800efc0 <_svfiprintf_r+0x5c>
 800efbc:	2a25      	cmp	r2, #37	; 0x25
 800efbe:	d1f9      	bne.n	800efb4 <_svfiprintf_r+0x50>
 800efc0:	ebba 0b04 	subs.w	fp, sl, r4
 800efc4:	d00b      	beq.n	800efde <_svfiprintf_r+0x7a>
 800efc6:	465b      	mov	r3, fp
 800efc8:	4622      	mov	r2, r4
 800efca:	4629      	mov	r1, r5
 800efcc:	4638      	mov	r0, r7
 800efce:	f7ff ff6d 	bl	800eeac <__ssputs_r>
 800efd2:	3001      	adds	r0, #1
 800efd4:	f000 80aa 	beq.w	800f12c <_svfiprintf_r+0x1c8>
 800efd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efda:	445a      	add	r2, fp
 800efdc:	9209      	str	r2, [sp, #36]	; 0x24
 800efde:	f89a 3000 	ldrb.w	r3, [sl]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f000 80a2 	beq.w	800f12c <_svfiprintf_r+0x1c8>
 800efe8:	2300      	movs	r3, #0
 800efea:	f04f 32ff 	mov.w	r2, #4294967295
 800efee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eff2:	f10a 0a01 	add.w	sl, sl, #1
 800eff6:	9304      	str	r3, [sp, #16]
 800eff8:	9307      	str	r3, [sp, #28]
 800effa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800effe:	931a      	str	r3, [sp, #104]	; 0x68
 800f000:	4654      	mov	r4, sl
 800f002:	2205      	movs	r2, #5
 800f004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f008:	4851      	ldr	r0, [pc, #324]	; (800f150 <_svfiprintf_r+0x1ec>)
 800f00a:	f7f1 f8c1 	bl	8000190 <memchr>
 800f00e:	9a04      	ldr	r2, [sp, #16]
 800f010:	b9d8      	cbnz	r0, 800f04a <_svfiprintf_r+0xe6>
 800f012:	06d0      	lsls	r0, r2, #27
 800f014:	bf44      	itt	mi
 800f016:	2320      	movmi	r3, #32
 800f018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f01c:	0711      	lsls	r1, r2, #28
 800f01e:	bf44      	itt	mi
 800f020:	232b      	movmi	r3, #43	; 0x2b
 800f022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f026:	f89a 3000 	ldrb.w	r3, [sl]
 800f02a:	2b2a      	cmp	r3, #42	; 0x2a
 800f02c:	d015      	beq.n	800f05a <_svfiprintf_r+0xf6>
 800f02e:	9a07      	ldr	r2, [sp, #28]
 800f030:	4654      	mov	r4, sl
 800f032:	2000      	movs	r0, #0
 800f034:	f04f 0c0a 	mov.w	ip, #10
 800f038:	4621      	mov	r1, r4
 800f03a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f03e:	3b30      	subs	r3, #48	; 0x30
 800f040:	2b09      	cmp	r3, #9
 800f042:	d94e      	bls.n	800f0e2 <_svfiprintf_r+0x17e>
 800f044:	b1b0      	cbz	r0, 800f074 <_svfiprintf_r+0x110>
 800f046:	9207      	str	r2, [sp, #28]
 800f048:	e014      	b.n	800f074 <_svfiprintf_r+0x110>
 800f04a:	eba0 0308 	sub.w	r3, r0, r8
 800f04e:	fa09 f303 	lsl.w	r3, r9, r3
 800f052:	4313      	orrs	r3, r2
 800f054:	9304      	str	r3, [sp, #16]
 800f056:	46a2      	mov	sl, r4
 800f058:	e7d2      	b.n	800f000 <_svfiprintf_r+0x9c>
 800f05a:	9b03      	ldr	r3, [sp, #12]
 800f05c:	1d19      	adds	r1, r3, #4
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	9103      	str	r1, [sp, #12]
 800f062:	2b00      	cmp	r3, #0
 800f064:	bfbb      	ittet	lt
 800f066:	425b      	neglt	r3, r3
 800f068:	f042 0202 	orrlt.w	r2, r2, #2
 800f06c:	9307      	strge	r3, [sp, #28]
 800f06e:	9307      	strlt	r3, [sp, #28]
 800f070:	bfb8      	it	lt
 800f072:	9204      	strlt	r2, [sp, #16]
 800f074:	7823      	ldrb	r3, [r4, #0]
 800f076:	2b2e      	cmp	r3, #46	; 0x2e
 800f078:	d10c      	bne.n	800f094 <_svfiprintf_r+0x130>
 800f07a:	7863      	ldrb	r3, [r4, #1]
 800f07c:	2b2a      	cmp	r3, #42	; 0x2a
 800f07e:	d135      	bne.n	800f0ec <_svfiprintf_r+0x188>
 800f080:	9b03      	ldr	r3, [sp, #12]
 800f082:	1d1a      	adds	r2, r3, #4
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	9203      	str	r2, [sp, #12]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	bfb8      	it	lt
 800f08c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f090:	3402      	adds	r4, #2
 800f092:	9305      	str	r3, [sp, #20]
 800f094:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f160 <_svfiprintf_r+0x1fc>
 800f098:	7821      	ldrb	r1, [r4, #0]
 800f09a:	2203      	movs	r2, #3
 800f09c:	4650      	mov	r0, sl
 800f09e:	f7f1 f877 	bl	8000190 <memchr>
 800f0a2:	b140      	cbz	r0, 800f0b6 <_svfiprintf_r+0x152>
 800f0a4:	2340      	movs	r3, #64	; 0x40
 800f0a6:	eba0 000a 	sub.w	r0, r0, sl
 800f0aa:	fa03 f000 	lsl.w	r0, r3, r0
 800f0ae:	9b04      	ldr	r3, [sp, #16]
 800f0b0:	4303      	orrs	r3, r0
 800f0b2:	3401      	adds	r4, #1
 800f0b4:	9304      	str	r3, [sp, #16]
 800f0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ba:	4826      	ldr	r0, [pc, #152]	; (800f154 <_svfiprintf_r+0x1f0>)
 800f0bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0c0:	2206      	movs	r2, #6
 800f0c2:	f7f1 f865 	bl	8000190 <memchr>
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d038      	beq.n	800f13c <_svfiprintf_r+0x1d8>
 800f0ca:	4b23      	ldr	r3, [pc, #140]	; (800f158 <_svfiprintf_r+0x1f4>)
 800f0cc:	bb1b      	cbnz	r3, 800f116 <_svfiprintf_r+0x1b2>
 800f0ce:	9b03      	ldr	r3, [sp, #12]
 800f0d0:	3307      	adds	r3, #7
 800f0d2:	f023 0307 	bic.w	r3, r3, #7
 800f0d6:	3308      	adds	r3, #8
 800f0d8:	9303      	str	r3, [sp, #12]
 800f0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0dc:	4433      	add	r3, r6
 800f0de:	9309      	str	r3, [sp, #36]	; 0x24
 800f0e0:	e767      	b.n	800efb2 <_svfiprintf_r+0x4e>
 800f0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0e6:	460c      	mov	r4, r1
 800f0e8:	2001      	movs	r0, #1
 800f0ea:	e7a5      	b.n	800f038 <_svfiprintf_r+0xd4>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	3401      	adds	r4, #1
 800f0f0:	9305      	str	r3, [sp, #20]
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	f04f 0c0a 	mov.w	ip, #10
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0fe:	3a30      	subs	r2, #48	; 0x30
 800f100:	2a09      	cmp	r2, #9
 800f102:	d903      	bls.n	800f10c <_svfiprintf_r+0x1a8>
 800f104:	2b00      	cmp	r3, #0
 800f106:	d0c5      	beq.n	800f094 <_svfiprintf_r+0x130>
 800f108:	9105      	str	r1, [sp, #20]
 800f10a:	e7c3      	b.n	800f094 <_svfiprintf_r+0x130>
 800f10c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f110:	4604      	mov	r4, r0
 800f112:	2301      	movs	r3, #1
 800f114:	e7f0      	b.n	800f0f8 <_svfiprintf_r+0x194>
 800f116:	ab03      	add	r3, sp, #12
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	462a      	mov	r2, r5
 800f11c:	4b0f      	ldr	r3, [pc, #60]	; (800f15c <_svfiprintf_r+0x1f8>)
 800f11e:	a904      	add	r1, sp, #16
 800f120:	4638      	mov	r0, r7
 800f122:	f3af 8000 	nop.w
 800f126:	1c42      	adds	r2, r0, #1
 800f128:	4606      	mov	r6, r0
 800f12a:	d1d6      	bne.n	800f0da <_svfiprintf_r+0x176>
 800f12c:	89ab      	ldrh	r3, [r5, #12]
 800f12e:	065b      	lsls	r3, r3, #25
 800f130:	f53f af2c 	bmi.w	800ef8c <_svfiprintf_r+0x28>
 800f134:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f136:	b01d      	add	sp, #116	; 0x74
 800f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13c:	ab03      	add	r3, sp, #12
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	462a      	mov	r2, r5
 800f142:	4b06      	ldr	r3, [pc, #24]	; (800f15c <_svfiprintf_r+0x1f8>)
 800f144:	a904      	add	r1, sp, #16
 800f146:	4638      	mov	r0, r7
 800f148:	f000 fa4c 	bl	800f5e4 <_printf_i>
 800f14c:	e7eb      	b.n	800f126 <_svfiprintf_r+0x1c2>
 800f14e:	bf00      	nop
 800f150:	08010c5c 	.word	0x08010c5c
 800f154:	08010c66 	.word	0x08010c66
 800f158:	00000000 	.word	0x00000000
 800f15c:	0800eead 	.word	0x0800eead
 800f160:	08010c62 	.word	0x08010c62

0800f164 <_sungetc_r>:
 800f164:	b538      	push	{r3, r4, r5, lr}
 800f166:	1c4b      	adds	r3, r1, #1
 800f168:	4614      	mov	r4, r2
 800f16a:	d103      	bne.n	800f174 <_sungetc_r+0x10>
 800f16c:	f04f 35ff 	mov.w	r5, #4294967295
 800f170:	4628      	mov	r0, r5
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	8993      	ldrh	r3, [r2, #12]
 800f176:	f023 0320 	bic.w	r3, r3, #32
 800f17a:	8193      	strh	r3, [r2, #12]
 800f17c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f17e:	6852      	ldr	r2, [r2, #4]
 800f180:	b2cd      	uxtb	r5, r1
 800f182:	b18b      	cbz	r3, 800f1a8 <_sungetc_r+0x44>
 800f184:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f186:	4293      	cmp	r3, r2
 800f188:	dd08      	ble.n	800f19c <_sungetc_r+0x38>
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	1e5a      	subs	r2, r3, #1
 800f18e:	6022      	str	r2, [r4, #0]
 800f190:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f194:	6863      	ldr	r3, [r4, #4]
 800f196:	3301      	adds	r3, #1
 800f198:	6063      	str	r3, [r4, #4]
 800f19a:	e7e9      	b.n	800f170 <_sungetc_r+0xc>
 800f19c:	4621      	mov	r1, r4
 800f19e:	f000 fdc9 	bl	800fd34 <__submore>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d0f1      	beq.n	800f18a <_sungetc_r+0x26>
 800f1a6:	e7e1      	b.n	800f16c <_sungetc_r+0x8>
 800f1a8:	6921      	ldr	r1, [r4, #16]
 800f1aa:	6823      	ldr	r3, [r4, #0]
 800f1ac:	b151      	cbz	r1, 800f1c4 <_sungetc_r+0x60>
 800f1ae:	4299      	cmp	r1, r3
 800f1b0:	d208      	bcs.n	800f1c4 <_sungetc_r+0x60>
 800f1b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f1b6:	42a9      	cmp	r1, r5
 800f1b8:	d104      	bne.n	800f1c4 <_sungetc_r+0x60>
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	3201      	adds	r2, #1
 800f1be:	6023      	str	r3, [r4, #0]
 800f1c0:	6062      	str	r2, [r4, #4]
 800f1c2:	e7d5      	b.n	800f170 <_sungetc_r+0xc>
 800f1c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f1c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1cc:	6363      	str	r3, [r4, #52]	; 0x34
 800f1ce:	2303      	movs	r3, #3
 800f1d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800f1d2:	4623      	mov	r3, r4
 800f1d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f1d8:	6023      	str	r3, [r4, #0]
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e7dc      	b.n	800f198 <_sungetc_r+0x34>

0800f1de <__ssrefill_r>:
 800f1de:	b510      	push	{r4, lr}
 800f1e0:	460c      	mov	r4, r1
 800f1e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f1e4:	b169      	cbz	r1, 800f202 <__ssrefill_r+0x24>
 800f1e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1ea:	4299      	cmp	r1, r3
 800f1ec:	d001      	beq.n	800f1f2 <__ssrefill_r+0x14>
 800f1ee:	f000 fdf7 	bl	800fde0 <_free_r>
 800f1f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1f4:	6063      	str	r3, [r4, #4]
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	6360      	str	r0, [r4, #52]	; 0x34
 800f1fa:	b113      	cbz	r3, 800f202 <__ssrefill_r+0x24>
 800f1fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f1fe:	6023      	str	r3, [r4, #0]
 800f200:	bd10      	pop	{r4, pc}
 800f202:	6923      	ldr	r3, [r4, #16]
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	2300      	movs	r3, #0
 800f208:	6063      	str	r3, [r4, #4]
 800f20a:	89a3      	ldrh	r3, [r4, #12]
 800f20c:	f043 0320 	orr.w	r3, r3, #32
 800f210:	81a3      	strh	r3, [r4, #12]
 800f212:	f04f 30ff 	mov.w	r0, #4294967295
 800f216:	e7f3      	b.n	800f200 <__ssrefill_r+0x22>

0800f218 <__ssvfiscanf_r>:
 800f218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f21c:	460c      	mov	r4, r1
 800f21e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f222:	2100      	movs	r1, #0
 800f224:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f228:	49a6      	ldr	r1, [pc, #664]	; (800f4c4 <__ssvfiscanf_r+0x2ac>)
 800f22a:	91a0      	str	r1, [sp, #640]	; 0x280
 800f22c:	f10d 0804 	add.w	r8, sp, #4
 800f230:	49a5      	ldr	r1, [pc, #660]	; (800f4c8 <__ssvfiscanf_r+0x2b0>)
 800f232:	4fa6      	ldr	r7, [pc, #664]	; (800f4cc <__ssvfiscanf_r+0x2b4>)
 800f234:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f4d0 <__ssvfiscanf_r+0x2b8>
 800f238:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f23c:	4606      	mov	r6, r0
 800f23e:	91a1      	str	r1, [sp, #644]	; 0x284
 800f240:	9300      	str	r3, [sp, #0]
 800f242:	7813      	ldrb	r3, [r2, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	f000 815a 	beq.w	800f4fe <__ssvfiscanf_r+0x2e6>
 800f24a:	5dd9      	ldrb	r1, [r3, r7]
 800f24c:	f011 0108 	ands.w	r1, r1, #8
 800f250:	f102 0501 	add.w	r5, r2, #1
 800f254:	d019      	beq.n	800f28a <__ssvfiscanf_r+0x72>
 800f256:	6863      	ldr	r3, [r4, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	dd0f      	ble.n	800f27c <__ssvfiscanf_r+0x64>
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	781a      	ldrb	r2, [r3, #0]
 800f260:	5cba      	ldrb	r2, [r7, r2]
 800f262:	0712      	lsls	r2, r2, #28
 800f264:	d401      	bmi.n	800f26a <__ssvfiscanf_r+0x52>
 800f266:	462a      	mov	r2, r5
 800f268:	e7eb      	b.n	800f242 <__ssvfiscanf_r+0x2a>
 800f26a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f26c:	3201      	adds	r2, #1
 800f26e:	9245      	str	r2, [sp, #276]	; 0x114
 800f270:	6862      	ldr	r2, [r4, #4]
 800f272:	3301      	adds	r3, #1
 800f274:	3a01      	subs	r2, #1
 800f276:	6062      	str	r2, [r4, #4]
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	e7ec      	b.n	800f256 <__ssvfiscanf_r+0x3e>
 800f27c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f27e:	4621      	mov	r1, r4
 800f280:	4630      	mov	r0, r6
 800f282:	4798      	blx	r3
 800f284:	2800      	cmp	r0, #0
 800f286:	d0e9      	beq.n	800f25c <__ssvfiscanf_r+0x44>
 800f288:	e7ed      	b.n	800f266 <__ssvfiscanf_r+0x4e>
 800f28a:	2b25      	cmp	r3, #37	; 0x25
 800f28c:	d012      	beq.n	800f2b4 <__ssvfiscanf_r+0x9c>
 800f28e:	469a      	mov	sl, r3
 800f290:	6863      	ldr	r3, [r4, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f340 8091 	ble.w	800f3ba <__ssvfiscanf_r+0x1a2>
 800f298:	6822      	ldr	r2, [r4, #0]
 800f29a:	7813      	ldrb	r3, [r2, #0]
 800f29c:	4553      	cmp	r3, sl
 800f29e:	f040 812e 	bne.w	800f4fe <__ssvfiscanf_r+0x2e6>
 800f2a2:	6863      	ldr	r3, [r4, #4]
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	6063      	str	r3, [r4, #4]
 800f2a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f2aa:	3201      	adds	r2, #1
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	6022      	str	r2, [r4, #0]
 800f2b0:	9345      	str	r3, [sp, #276]	; 0x114
 800f2b2:	e7d8      	b.n	800f266 <__ssvfiscanf_r+0x4e>
 800f2b4:	9141      	str	r1, [sp, #260]	; 0x104
 800f2b6:	9143      	str	r1, [sp, #268]	; 0x10c
 800f2b8:	7853      	ldrb	r3, [r2, #1]
 800f2ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f2bc:	bf02      	ittt	eq
 800f2be:	2310      	moveq	r3, #16
 800f2c0:	1c95      	addeq	r5, r2, #2
 800f2c2:	9341      	streq	r3, [sp, #260]	; 0x104
 800f2c4:	220a      	movs	r2, #10
 800f2c6:	46aa      	mov	sl, r5
 800f2c8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f2cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f2d0:	2b09      	cmp	r3, #9
 800f2d2:	d91d      	bls.n	800f310 <__ssvfiscanf_r+0xf8>
 800f2d4:	487e      	ldr	r0, [pc, #504]	; (800f4d0 <__ssvfiscanf_r+0x2b8>)
 800f2d6:	2203      	movs	r2, #3
 800f2d8:	f7f0 ff5a 	bl	8000190 <memchr>
 800f2dc:	b140      	cbz	r0, 800f2f0 <__ssvfiscanf_r+0xd8>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	eba0 0009 	sub.w	r0, r0, r9
 800f2e4:	fa03 f000 	lsl.w	r0, r3, r0
 800f2e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f2ea:	4318      	orrs	r0, r3
 800f2ec:	9041      	str	r0, [sp, #260]	; 0x104
 800f2ee:	4655      	mov	r5, sl
 800f2f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f2f4:	2b78      	cmp	r3, #120	; 0x78
 800f2f6:	d806      	bhi.n	800f306 <__ssvfiscanf_r+0xee>
 800f2f8:	2b57      	cmp	r3, #87	; 0x57
 800f2fa:	d810      	bhi.n	800f31e <__ssvfiscanf_r+0x106>
 800f2fc:	2b25      	cmp	r3, #37	; 0x25
 800f2fe:	d0c6      	beq.n	800f28e <__ssvfiscanf_r+0x76>
 800f300:	d856      	bhi.n	800f3b0 <__ssvfiscanf_r+0x198>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d064      	beq.n	800f3d0 <__ssvfiscanf_r+0x1b8>
 800f306:	2303      	movs	r3, #3
 800f308:	9347      	str	r3, [sp, #284]	; 0x11c
 800f30a:	230a      	movs	r3, #10
 800f30c:	9342      	str	r3, [sp, #264]	; 0x108
 800f30e:	e071      	b.n	800f3f4 <__ssvfiscanf_r+0x1dc>
 800f310:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f312:	fb02 1103 	mla	r1, r2, r3, r1
 800f316:	3930      	subs	r1, #48	; 0x30
 800f318:	9143      	str	r1, [sp, #268]	; 0x10c
 800f31a:	4655      	mov	r5, sl
 800f31c:	e7d3      	b.n	800f2c6 <__ssvfiscanf_r+0xae>
 800f31e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f322:	2a20      	cmp	r2, #32
 800f324:	d8ef      	bhi.n	800f306 <__ssvfiscanf_r+0xee>
 800f326:	a101      	add	r1, pc, #4	; (adr r1, 800f32c <__ssvfiscanf_r+0x114>)
 800f328:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f32c:	0800f3df 	.word	0x0800f3df
 800f330:	0800f307 	.word	0x0800f307
 800f334:	0800f307 	.word	0x0800f307
 800f338:	0800f43d 	.word	0x0800f43d
 800f33c:	0800f307 	.word	0x0800f307
 800f340:	0800f307 	.word	0x0800f307
 800f344:	0800f307 	.word	0x0800f307
 800f348:	0800f307 	.word	0x0800f307
 800f34c:	0800f307 	.word	0x0800f307
 800f350:	0800f307 	.word	0x0800f307
 800f354:	0800f307 	.word	0x0800f307
 800f358:	0800f453 	.word	0x0800f453
 800f35c:	0800f429 	.word	0x0800f429
 800f360:	0800f3b7 	.word	0x0800f3b7
 800f364:	0800f3b7 	.word	0x0800f3b7
 800f368:	0800f3b7 	.word	0x0800f3b7
 800f36c:	0800f307 	.word	0x0800f307
 800f370:	0800f42d 	.word	0x0800f42d
 800f374:	0800f307 	.word	0x0800f307
 800f378:	0800f307 	.word	0x0800f307
 800f37c:	0800f307 	.word	0x0800f307
 800f380:	0800f307 	.word	0x0800f307
 800f384:	0800f463 	.word	0x0800f463
 800f388:	0800f435 	.word	0x0800f435
 800f38c:	0800f3d7 	.word	0x0800f3d7
 800f390:	0800f307 	.word	0x0800f307
 800f394:	0800f307 	.word	0x0800f307
 800f398:	0800f45f 	.word	0x0800f45f
 800f39c:	0800f307 	.word	0x0800f307
 800f3a0:	0800f429 	.word	0x0800f429
 800f3a4:	0800f307 	.word	0x0800f307
 800f3a8:	0800f307 	.word	0x0800f307
 800f3ac:	0800f3df 	.word	0x0800f3df
 800f3b0:	3b45      	subs	r3, #69	; 0x45
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	d8a7      	bhi.n	800f306 <__ssvfiscanf_r+0xee>
 800f3b6:	2305      	movs	r3, #5
 800f3b8:	e01b      	b.n	800f3f2 <__ssvfiscanf_r+0x1da>
 800f3ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f3bc:	4621      	mov	r1, r4
 800f3be:	4630      	mov	r0, r6
 800f3c0:	4798      	blx	r3
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	f43f af68 	beq.w	800f298 <__ssvfiscanf_r+0x80>
 800f3c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	f040 808d 	bne.w	800f4ea <__ssvfiscanf_r+0x2d2>
 800f3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d4:	e08f      	b.n	800f4f6 <__ssvfiscanf_r+0x2de>
 800f3d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f3d8:	f042 0220 	orr.w	r2, r2, #32
 800f3dc:	9241      	str	r2, [sp, #260]	; 0x104
 800f3de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f3e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3e4:	9241      	str	r2, [sp, #260]	; 0x104
 800f3e6:	2210      	movs	r2, #16
 800f3e8:	2b6f      	cmp	r3, #111	; 0x6f
 800f3ea:	9242      	str	r2, [sp, #264]	; 0x108
 800f3ec:	bf34      	ite	cc
 800f3ee:	2303      	movcc	r3, #3
 800f3f0:	2304      	movcs	r3, #4
 800f3f2:	9347      	str	r3, [sp, #284]	; 0x11c
 800f3f4:	6863      	ldr	r3, [r4, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	dd42      	ble.n	800f480 <__ssvfiscanf_r+0x268>
 800f3fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f3fc:	0659      	lsls	r1, r3, #25
 800f3fe:	d404      	bmi.n	800f40a <__ssvfiscanf_r+0x1f2>
 800f400:	6823      	ldr	r3, [r4, #0]
 800f402:	781a      	ldrb	r2, [r3, #0]
 800f404:	5cba      	ldrb	r2, [r7, r2]
 800f406:	0712      	lsls	r2, r2, #28
 800f408:	d441      	bmi.n	800f48e <__ssvfiscanf_r+0x276>
 800f40a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f40c:	2b02      	cmp	r3, #2
 800f40e:	dc50      	bgt.n	800f4b2 <__ssvfiscanf_r+0x29a>
 800f410:	466b      	mov	r3, sp
 800f412:	4622      	mov	r2, r4
 800f414:	a941      	add	r1, sp, #260	; 0x104
 800f416:	4630      	mov	r0, r6
 800f418:	f000 fa0a 	bl	800f830 <_scanf_chars>
 800f41c:	2801      	cmp	r0, #1
 800f41e:	d06e      	beq.n	800f4fe <__ssvfiscanf_r+0x2e6>
 800f420:	2802      	cmp	r0, #2
 800f422:	f47f af20 	bne.w	800f266 <__ssvfiscanf_r+0x4e>
 800f426:	e7cf      	b.n	800f3c8 <__ssvfiscanf_r+0x1b0>
 800f428:	220a      	movs	r2, #10
 800f42a:	e7dd      	b.n	800f3e8 <__ssvfiscanf_r+0x1d0>
 800f42c:	2300      	movs	r3, #0
 800f42e:	9342      	str	r3, [sp, #264]	; 0x108
 800f430:	2303      	movs	r3, #3
 800f432:	e7de      	b.n	800f3f2 <__ssvfiscanf_r+0x1da>
 800f434:	2308      	movs	r3, #8
 800f436:	9342      	str	r3, [sp, #264]	; 0x108
 800f438:	2304      	movs	r3, #4
 800f43a:	e7da      	b.n	800f3f2 <__ssvfiscanf_r+0x1da>
 800f43c:	4629      	mov	r1, r5
 800f43e:	4640      	mov	r0, r8
 800f440:	f000 fb48 	bl	800fad4 <__sccl>
 800f444:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f44a:	9341      	str	r3, [sp, #260]	; 0x104
 800f44c:	4605      	mov	r5, r0
 800f44e:	2301      	movs	r3, #1
 800f450:	e7cf      	b.n	800f3f2 <__ssvfiscanf_r+0x1da>
 800f452:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f458:	9341      	str	r3, [sp, #260]	; 0x104
 800f45a:	2300      	movs	r3, #0
 800f45c:	e7c9      	b.n	800f3f2 <__ssvfiscanf_r+0x1da>
 800f45e:	2302      	movs	r3, #2
 800f460:	e7c7      	b.n	800f3f2 <__ssvfiscanf_r+0x1da>
 800f462:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f464:	06c3      	lsls	r3, r0, #27
 800f466:	f53f aefe 	bmi.w	800f266 <__ssvfiscanf_r+0x4e>
 800f46a:	9b00      	ldr	r3, [sp, #0]
 800f46c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f46e:	1d19      	adds	r1, r3, #4
 800f470:	9100      	str	r1, [sp, #0]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f010 0f01 	tst.w	r0, #1
 800f478:	bf14      	ite	ne
 800f47a:	801a      	strhne	r2, [r3, #0]
 800f47c:	601a      	streq	r2, [r3, #0]
 800f47e:	e6f2      	b.n	800f266 <__ssvfiscanf_r+0x4e>
 800f480:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f482:	4621      	mov	r1, r4
 800f484:	4630      	mov	r0, r6
 800f486:	4798      	blx	r3
 800f488:	2800      	cmp	r0, #0
 800f48a:	d0b6      	beq.n	800f3fa <__ssvfiscanf_r+0x1e2>
 800f48c:	e79c      	b.n	800f3c8 <__ssvfiscanf_r+0x1b0>
 800f48e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f490:	3201      	adds	r2, #1
 800f492:	9245      	str	r2, [sp, #276]	; 0x114
 800f494:	6862      	ldr	r2, [r4, #4]
 800f496:	3a01      	subs	r2, #1
 800f498:	2a00      	cmp	r2, #0
 800f49a:	6062      	str	r2, [r4, #4]
 800f49c:	dd02      	ble.n	800f4a4 <__ssvfiscanf_r+0x28c>
 800f49e:	3301      	adds	r3, #1
 800f4a0:	6023      	str	r3, [r4, #0]
 800f4a2:	e7ad      	b.n	800f400 <__ssvfiscanf_r+0x1e8>
 800f4a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	4798      	blx	r3
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d0a7      	beq.n	800f400 <__ssvfiscanf_r+0x1e8>
 800f4b0:	e78a      	b.n	800f3c8 <__ssvfiscanf_r+0x1b0>
 800f4b2:	2b04      	cmp	r3, #4
 800f4b4:	dc0e      	bgt.n	800f4d4 <__ssvfiscanf_r+0x2bc>
 800f4b6:	466b      	mov	r3, sp
 800f4b8:	4622      	mov	r2, r4
 800f4ba:	a941      	add	r1, sp, #260	; 0x104
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f000 fa11 	bl	800f8e4 <_scanf_i>
 800f4c2:	e7ab      	b.n	800f41c <__ssvfiscanf_r+0x204>
 800f4c4:	0800f165 	.word	0x0800f165
 800f4c8:	0800f1df 	.word	0x0800f1df
 800f4cc:	08010cab 	.word	0x08010cab
 800f4d0:	08010c62 	.word	0x08010c62
 800f4d4:	4b0b      	ldr	r3, [pc, #44]	; (800f504 <__ssvfiscanf_r+0x2ec>)
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f43f aec5 	beq.w	800f266 <__ssvfiscanf_r+0x4e>
 800f4dc:	466b      	mov	r3, sp
 800f4de:	4622      	mov	r2, r4
 800f4e0:	a941      	add	r1, sp, #260	; 0x104
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f3af 8000 	nop.w
 800f4e8:	e798      	b.n	800f41c <__ssvfiscanf_r+0x204>
 800f4ea:	89a3      	ldrh	r3, [r4, #12]
 800f4ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f4f0:	bf18      	it	ne
 800f4f2:	f04f 30ff 	movne.w	r0, #4294967295
 800f4f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f500:	e7f9      	b.n	800f4f6 <__ssvfiscanf_r+0x2de>
 800f502:	bf00      	nop
 800f504:	00000000 	.word	0x00000000

0800f508 <_printf_common>:
 800f508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f50c:	4616      	mov	r6, r2
 800f50e:	4699      	mov	r9, r3
 800f510:	688a      	ldr	r2, [r1, #8]
 800f512:	690b      	ldr	r3, [r1, #16]
 800f514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f518:	4293      	cmp	r3, r2
 800f51a:	bfb8      	it	lt
 800f51c:	4613      	movlt	r3, r2
 800f51e:	6033      	str	r3, [r6, #0]
 800f520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f524:	4607      	mov	r7, r0
 800f526:	460c      	mov	r4, r1
 800f528:	b10a      	cbz	r2, 800f52e <_printf_common+0x26>
 800f52a:	3301      	adds	r3, #1
 800f52c:	6033      	str	r3, [r6, #0]
 800f52e:	6823      	ldr	r3, [r4, #0]
 800f530:	0699      	lsls	r1, r3, #26
 800f532:	bf42      	ittt	mi
 800f534:	6833      	ldrmi	r3, [r6, #0]
 800f536:	3302      	addmi	r3, #2
 800f538:	6033      	strmi	r3, [r6, #0]
 800f53a:	6825      	ldr	r5, [r4, #0]
 800f53c:	f015 0506 	ands.w	r5, r5, #6
 800f540:	d106      	bne.n	800f550 <_printf_common+0x48>
 800f542:	f104 0a19 	add.w	sl, r4, #25
 800f546:	68e3      	ldr	r3, [r4, #12]
 800f548:	6832      	ldr	r2, [r6, #0]
 800f54a:	1a9b      	subs	r3, r3, r2
 800f54c:	42ab      	cmp	r3, r5
 800f54e:	dc26      	bgt.n	800f59e <_printf_common+0x96>
 800f550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f554:	1e13      	subs	r3, r2, #0
 800f556:	6822      	ldr	r2, [r4, #0]
 800f558:	bf18      	it	ne
 800f55a:	2301      	movne	r3, #1
 800f55c:	0692      	lsls	r2, r2, #26
 800f55e:	d42b      	bmi.n	800f5b8 <_printf_common+0xb0>
 800f560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f564:	4649      	mov	r1, r9
 800f566:	4638      	mov	r0, r7
 800f568:	47c0      	blx	r8
 800f56a:	3001      	adds	r0, #1
 800f56c:	d01e      	beq.n	800f5ac <_printf_common+0xa4>
 800f56e:	6823      	ldr	r3, [r4, #0]
 800f570:	68e5      	ldr	r5, [r4, #12]
 800f572:	6832      	ldr	r2, [r6, #0]
 800f574:	f003 0306 	and.w	r3, r3, #6
 800f578:	2b04      	cmp	r3, #4
 800f57a:	bf08      	it	eq
 800f57c:	1aad      	subeq	r5, r5, r2
 800f57e:	68a3      	ldr	r3, [r4, #8]
 800f580:	6922      	ldr	r2, [r4, #16]
 800f582:	bf0c      	ite	eq
 800f584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f588:	2500      	movne	r5, #0
 800f58a:	4293      	cmp	r3, r2
 800f58c:	bfc4      	itt	gt
 800f58e:	1a9b      	subgt	r3, r3, r2
 800f590:	18ed      	addgt	r5, r5, r3
 800f592:	2600      	movs	r6, #0
 800f594:	341a      	adds	r4, #26
 800f596:	42b5      	cmp	r5, r6
 800f598:	d11a      	bne.n	800f5d0 <_printf_common+0xc8>
 800f59a:	2000      	movs	r0, #0
 800f59c:	e008      	b.n	800f5b0 <_printf_common+0xa8>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	4652      	mov	r2, sl
 800f5a2:	4649      	mov	r1, r9
 800f5a4:	4638      	mov	r0, r7
 800f5a6:	47c0      	blx	r8
 800f5a8:	3001      	adds	r0, #1
 800f5aa:	d103      	bne.n	800f5b4 <_printf_common+0xac>
 800f5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5b4:	3501      	adds	r5, #1
 800f5b6:	e7c6      	b.n	800f546 <_printf_common+0x3e>
 800f5b8:	18e1      	adds	r1, r4, r3
 800f5ba:	1c5a      	adds	r2, r3, #1
 800f5bc:	2030      	movs	r0, #48	; 0x30
 800f5be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f5c2:	4422      	add	r2, r4
 800f5c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f5c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f5cc:	3302      	adds	r3, #2
 800f5ce:	e7c7      	b.n	800f560 <_printf_common+0x58>
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	4622      	mov	r2, r4
 800f5d4:	4649      	mov	r1, r9
 800f5d6:	4638      	mov	r0, r7
 800f5d8:	47c0      	blx	r8
 800f5da:	3001      	adds	r0, #1
 800f5dc:	d0e6      	beq.n	800f5ac <_printf_common+0xa4>
 800f5de:	3601      	adds	r6, #1
 800f5e0:	e7d9      	b.n	800f596 <_printf_common+0x8e>
	...

0800f5e4 <_printf_i>:
 800f5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e8:	7e0f      	ldrb	r7, [r1, #24]
 800f5ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f5ec:	2f78      	cmp	r7, #120	; 0x78
 800f5ee:	4691      	mov	r9, r2
 800f5f0:	4680      	mov	r8, r0
 800f5f2:	460c      	mov	r4, r1
 800f5f4:	469a      	mov	sl, r3
 800f5f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f5fa:	d807      	bhi.n	800f60c <_printf_i+0x28>
 800f5fc:	2f62      	cmp	r7, #98	; 0x62
 800f5fe:	d80a      	bhi.n	800f616 <_printf_i+0x32>
 800f600:	2f00      	cmp	r7, #0
 800f602:	f000 80d8 	beq.w	800f7b6 <_printf_i+0x1d2>
 800f606:	2f58      	cmp	r7, #88	; 0x58
 800f608:	f000 80a3 	beq.w	800f752 <_printf_i+0x16e>
 800f60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f614:	e03a      	b.n	800f68c <_printf_i+0xa8>
 800f616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f61a:	2b15      	cmp	r3, #21
 800f61c:	d8f6      	bhi.n	800f60c <_printf_i+0x28>
 800f61e:	a101      	add	r1, pc, #4	; (adr r1, 800f624 <_printf_i+0x40>)
 800f620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f624:	0800f67d 	.word	0x0800f67d
 800f628:	0800f691 	.word	0x0800f691
 800f62c:	0800f60d 	.word	0x0800f60d
 800f630:	0800f60d 	.word	0x0800f60d
 800f634:	0800f60d 	.word	0x0800f60d
 800f638:	0800f60d 	.word	0x0800f60d
 800f63c:	0800f691 	.word	0x0800f691
 800f640:	0800f60d 	.word	0x0800f60d
 800f644:	0800f60d 	.word	0x0800f60d
 800f648:	0800f60d 	.word	0x0800f60d
 800f64c:	0800f60d 	.word	0x0800f60d
 800f650:	0800f79d 	.word	0x0800f79d
 800f654:	0800f6c1 	.word	0x0800f6c1
 800f658:	0800f77f 	.word	0x0800f77f
 800f65c:	0800f60d 	.word	0x0800f60d
 800f660:	0800f60d 	.word	0x0800f60d
 800f664:	0800f7bf 	.word	0x0800f7bf
 800f668:	0800f60d 	.word	0x0800f60d
 800f66c:	0800f6c1 	.word	0x0800f6c1
 800f670:	0800f60d 	.word	0x0800f60d
 800f674:	0800f60d 	.word	0x0800f60d
 800f678:	0800f787 	.word	0x0800f787
 800f67c:	682b      	ldr	r3, [r5, #0]
 800f67e:	1d1a      	adds	r2, r3, #4
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	602a      	str	r2, [r5, #0]
 800f684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f68c:	2301      	movs	r3, #1
 800f68e:	e0a3      	b.n	800f7d8 <_printf_i+0x1f4>
 800f690:	6820      	ldr	r0, [r4, #0]
 800f692:	6829      	ldr	r1, [r5, #0]
 800f694:	0606      	lsls	r6, r0, #24
 800f696:	f101 0304 	add.w	r3, r1, #4
 800f69a:	d50a      	bpl.n	800f6b2 <_printf_i+0xce>
 800f69c:	680e      	ldr	r6, [r1, #0]
 800f69e:	602b      	str	r3, [r5, #0]
 800f6a0:	2e00      	cmp	r6, #0
 800f6a2:	da03      	bge.n	800f6ac <_printf_i+0xc8>
 800f6a4:	232d      	movs	r3, #45	; 0x2d
 800f6a6:	4276      	negs	r6, r6
 800f6a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6ac:	485e      	ldr	r0, [pc, #376]	; (800f828 <_printf_i+0x244>)
 800f6ae:	230a      	movs	r3, #10
 800f6b0:	e019      	b.n	800f6e6 <_printf_i+0x102>
 800f6b2:	680e      	ldr	r6, [r1, #0]
 800f6b4:	602b      	str	r3, [r5, #0]
 800f6b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f6ba:	bf18      	it	ne
 800f6bc:	b236      	sxthne	r6, r6
 800f6be:	e7ef      	b.n	800f6a0 <_printf_i+0xbc>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	6820      	ldr	r0, [r4, #0]
 800f6c4:	1d19      	adds	r1, r3, #4
 800f6c6:	6029      	str	r1, [r5, #0]
 800f6c8:	0601      	lsls	r1, r0, #24
 800f6ca:	d501      	bpl.n	800f6d0 <_printf_i+0xec>
 800f6cc:	681e      	ldr	r6, [r3, #0]
 800f6ce:	e002      	b.n	800f6d6 <_printf_i+0xf2>
 800f6d0:	0646      	lsls	r6, r0, #25
 800f6d2:	d5fb      	bpl.n	800f6cc <_printf_i+0xe8>
 800f6d4:	881e      	ldrh	r6, [r3, #0]
 800f6d6:	4854      	ldr	r0, [pc, #336]	; (800f828 <_printf_i+0x244>)
 800f6d8:	2f6f      	cmp	r7, #111	; 0x6f
 800f6da:	bf0c      	ite	eq
 800f6dc:	2308      	moveq	r3, #8
 800f6de:	230a      	movne	r3, #10
 800f6e0:	2100      	movs	r1, #0
 800f6e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6e6:	6865      	ldr	r5, [r4, #4]
 800f6e8:	60a5      	str	r5, [r4, #8]
 800f6ea:	2d00      	cmp	r5, #0
 800f6ec:	bfa2      	ittt	ge
 800f6ee:	6821      	ldrge	r1, [r4, #0]
 800f6f0:	f021 0104 	bicge.w	r1, r1, #4
 800f6f4:	6021      	strge	r1, [r4, #0]
 800f6f6:	b90e      	cbnz	r6, 800f6fc <_printf_i+0x118>
 800f6f8:	2d00      	cmp	r5, #0
 800f6fa:	d04d      	beq.n	800f798 <_printf_i+0x1b4>
 800f6fc:	4615      	mov	r5, r2
 800f6fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800f702:	fb03 6711 	mls	r7, r3, r1, r6
 800f706:	5dc7      	ldrb	r7, [r0, r7]
 800f708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f70c:	4637      	mov	r7, r6
 800f70e:	42bb      	cmp	r3, r7
 800f710:	460e      	mov	r6, r1
 800f712:	d9f4      	bls.n	800f6fe <_printf_i+0x11a>
 800f714:	2b08      	cmp	r3, #8
 800f716:	d10b      	bne.n	800f730 <_printf_i+0x14c>
 800f718:	6823      	ldr	r3, [r4, #0]
 800f71a:	07de      	lsls	r6, r3, #31
 800f71c:	d508      	bpl.n	800f730 <_printf_i+0x14c>
 800f71e:	6923      	ldr	r3, [r4, #16]
 800f720:	6861      	ldr	r1, [r4, #4]
 800f722:	4299      	cmp	r1, r3
 800f724:	bfde      	ittt	le
 800f726:	2330      	movle	r3, #48	; 0x30
 800f728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f72c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f730:	1b52      	subs	r2, r2, r5
 800f732:	6122      	str	r2, [r4, #16]
 800f734:	f8cd a000 	str.w	sl, [sp]
 800f738:	464b      	mov	r3, r9
 800f73a:	aa03      	add	r2, sp, #12
 800f73c:	4621      	mov	r1, r4
 800f73e:	4640      	mov	r0, r8
 800f740:	f7ff fee2 	bl	800f508 <_printf_common>
 800f744:	3001      	adds	r0, #1
 800f746:	d14c      	bne.n	800f7e2 <_printf_i+0x1fe>
 800f748:	f04f 30ff 	mov.w	r0, #4294967295
 800f74c:	b004      	add	sp, #16
 800f74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f752:	4835      	ldr	r0, [pc, #212]	; (800f828 <_printf_i+0x244>)
 800f754:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f758:	6829      	ldr	r1, [r5, #0]
 800f75a:	6823      	ldr	r3, [r4, #0]
 800f75c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f760:	6029      	str	r1, [r5, #0]
 800f762:	061d      	lsls	r5, r3, #24
 800f764:	d514      	bpl.n	800f790 <_printf_i+0x1ac>
 800f766:	07df      	lsls	r7, r3, #31
 800f768:	bf44      	itt	mi
 800f76a:	f043 0320 	orrmi.w	r3, r3, #32
 800f76e:	6023      	strmi	r3, [r4, #0]
 800f770:	b91e      	cbnz	r6, 800f77a <_printf_i+0x196>
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	f023 0320 	bic.w	r3, r3, #32
 800f778:	6023      	str	r3, [r4, #0]
 800f77a:	2310      	movs	r3, #16
 800f77c:	e7b0      	b.n	800f6e0 <_printf_i+0xfc>
 800f77e:	6823      	ldr	r3, [r4, #0]
 800f780:	f043 0320 	orr.w	r3, r3, #32
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	2378      	movs	r3, #120	; 0x78
 800f788:	4828      	ldr	r0, [pc, #160]	; (800f82c <_printf_i+0x248>)
 800f78a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f78e:	e7e3      	b.n	800f758 <_printf_i+0x174>
 800f790:	0659      	lsls	r1, r3, #25
 800f792:	bf48      	it	mi
 800f794:	b2b6      	uxthmi	r6, r6
 800f796:	e7e6      	b.n	800f766 <_printf_i+0x182>
 800f798:	4615      	mov	r5, r2
 800f79a:	e7bb      	b.n	800f714 <_printf_i+0x130>
 800f79c:	682b      	ldr	r3, [r5, #0]
 800f79e:	6826      	ldr	r6, [r4, #0]
 800f7a0:	6961      	ldr	r1, [r4, #20]
 800f7a2:	1d18      	adds	r0, r3, #4
 800f7a4:	6028      	str	r0, [r5, #0]
 800f7a6:	0635      	lsls	r5, r6, #24
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	d501      	bpl.n	800f7b0 <_printf_i+0x1cc>
 800f7ac:	6019      	str	r1, [r3, #0]
 800f7ae:	e002      	b.n	800f7b6 <_printf_i+0x1d2>
 800f7b0:	0670      	lsls	r0, r6, #25
 800f7b2:	d5fb      	bpl.n	800f7ac <_printf_i+0x1c8>
 800f7b4:	8019      	strh	r1, [r3, #0]
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	6123      	str	r3, [r4, #16]
 800f7ba:	4615      	mov	r5, r2
 800f7bc:	e7ba      	b.n	800f734 <_printf_i+0x150>
 800f7be:	682b      	ldr	r3, [r5, #0]
 800f7c0:	1d1a      	adds	r2, r3, #4
 800f7c2:	602a      	str	r2, [r5, #0]
 800f7c4:	681d      	ldr	r5, [r3, #0]
 800f7c6:	6862      	ldr	r2, [r4, #4]
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	f7f0 fce0 	bl	8000190 <memchr>
 800f7d0:	b108      	cbz	r0, 800f7d6 <_printf_i+0x1f2>
 800f7d2:	1b40      	subs	r0, r0, r5
 800f7d4:	6060      	str	r0, [r4, #4]
 800f7d6:	6863      	ldr	r3, [r4, #4]
 800f7d8:	6123      	str	r3, [r4, #16]
 800f7da:	2300      	movs	r3, #0
 800f7dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7e0:	e7a8      	b.n	800f734 <_printf_i+0x150>
 800f7e2:	6923      	ldr	r3, [r4, #16]
 800f7e4:	462a      	mov	r2, r5
 800f7e6:	4649      	mov	r1, r9
 800f7e8:	4640      	mov	r0, r8
 800f7ea:	47d0      	blx	sl
 800f7ec:	3001      	adds	r0, #1
 800f7ee:	d0ab      	beq.n	800f748 <_printf_i+0x164>
 800f7f0:	6823      	ldr	r3, [r4, #0]
 800f7f2:	079b      	lsls	r3, r3, #30
 800f7f4:	d413      	bmi.n	800f81e <_printf_i+0x23a>
 800f7f6:	68e0      	ldr	r0, [r4, #12]
 800f7f8:	9b03      	ldr	r3, [sp, #12]
 800f7fa:	4298      	cmp	r0, r3
 800f7fc:	bfb8      	it	lt
 800f7fe:	4618      	movlt	r0, r3
 800f800:	e7a4      	b.n	800f74c <_printf_i+0x168>
 800f802:	2301      	movs	r3, #1
 800f804:	4632      	mov	r2, r6
 800f806:	4649      	mov	r1, r9
 800f808:	4640      	mov	r0, r8
 800f80a:	47d0      	blx	sl
 800f80c:	3001      	adds	r0, #1
 800f80e:	d09b      	beq.n	800f748 <_printf_i+0x164>
 800f810:	3501      	adds	r5, #1
 800f812:	68e3      	ldr	r3, [r4, #12]
 800f814:	9903      	ldr	r1, [sp, #12]
 800f816:	1a5b      	subs	r3, r3, r1
 800f818:	42ab      	cmp	r3, r5
 800f81a:	dcf2      	bgt.n	800f802 <_printf_i+0x21e>
 800f81c:	e7eb      	b.n	800f7f6 <_printf_i+0x212>
 800f81e:	2500      	movs	r5, #0
 800f820:	f104 0619 	add.w	r6, r4, #25
 800f824:	e7f5      	b.n	800f812 <_printf_i+0x22e>
 800f826:	bf00      	nop
 800f828:	08010c6d 	.word	0x08010c6d
 800f82c:	08010c7e 	.word	0x08010c7e

0800f830 <_scanf_chars>:
 800f830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f834:	4615      	mov	r5, r2
 800f836:	688a      	ldr	r2, [r1, #8]
 800f838:	4680      	mov	r8, r0
 800f83a:	460c      	mov	r4, r1
 800f83c:	b932      	cbnz	r2, 800f84c <_scanf_chars+0x1c>
 800f83e:	698a      	ldr	r2, [r1, #24]
 800f840:	2a00      	cmp	r2, #0
 800f842:	bf0c      	ite	eq
 800f844:	2201      	moveq	r2, #1
 800f846:	f04f 32ff 	movne.w	r2, #4294967295
 800f84a:	608a      	str	r2, [r1, #8]
 800f84c:	6822      	ldr	r2, [r4, #0]
 800f84e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f8e0 <_scanf_chars+0xb0>
 800f852:	06d1      	lsls	r1, r2, #27
 800f854:	bf5f      	itttt	pl
 800f856:	681a      	ldrpl	r2, [r3, #0]
 800f858:	1d11      	addpl	r1, r2, #4
 800f85a:	6019      	strpl	r1, [r3, #0]
 800f85c:	6816      	ldrpl	r6, [r2, #0]
 800f85e:	2700      	movs	r7, #0
 800f860:	69a0      	ldr	r0, [r4, #24]
 800f862:	b188      	cbz	r0, 800f888 <_scanf_chars+0x58>
 800f864:	2801      	cmp	r0, #1
 800f866:	d107      	bne.n	800f878 <_scanf_chars+0x48>
 800f868:	682a      	ldr	r2, [r5, #0]
 800f86a:	7811      	ldrb	r1, [r2, #0]
 800f86c:	6962      	ldr	r2, [r4, #20]
 800f86e:	5c52      	ldrb	r2, [r2, r1]
 800f870:	b952      	cbnz	r2, 800f888 <_scanf_chars+0x58>
 800f872:	2f00      	cmp	r7, #0
 800f874:	d031      	beq.n	800f8da <_scanf_chars+0xaa>
 800f876:	e022      	b.n	800f8be <_scanf_chars+0x8e>
 800f878:	2802      	cmp	r0, #2
 800f87a:	d120      	bne.n	800f8be <_scanf_chars+0x8e>
 800f87c:	682b      	ldr	r3, [r5, #0]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f884:	071b      	lsls	r3, r3, #28
 800f886:	d41a      	bmi.n	800f8be <_scanf_chars+0x8e>
 800f888:	6823      	ldr	r3, [r4, #0]
 800f88a:	06da      	lsls	r2, r3, #27
 800f88c:	bf5e      	ittt	pl
 800f88e:	682b      	ldrpl	r3, [r5, #0]
 800f890:	781b      	ldrbpl	r3, [r3, #0]
 800f892:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f896:	682a      	ldr	r2, [r5, #0]
 800f898:	686b      	ldr	r3, [r5, #4]
 800f89a:	3201      	adds	r2, #1
 800f89c:	602a      	str	r2, [r5, #0]
 800f89e:	68a2      	ldr	r2, [r4, #8]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	3a01      	subs	r2, #1
 800f8a4:	606b      	str	r3, [r5, #4]
 800f8a6:	3701      	adds	r7, #1
 800f8a8:	60a2      	str	r2, [r4, #8]
 800f8aa:	b142      	cbz	r2, 800f8be <_scanf_chars+0x8e>
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	dcd7      	bgt.n	800f860 <_scanf_chars+0x30>
 800f8b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	4640      	mov	r0, r8
 800f8b8:	4798      	blx	r3
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	d0d0      	beq.n	800f860 <_scanf_chars+0x30>
 800f8be:	6823      	ldr	r3, [r4, #0]
 800f8c0:	f013 0310 	ands.w	r3, r3, #16
 800f8c4:	d105      	bne.n	800f8d2 <_scanf_chars+0xa2>
 800f8c6:	68e2      	ldr	r2, [r4, #12]
 800f8c8:	3201      	adds	r2, #1
 800f8ca:	60e2      	str	r2, [r4, #12]
 800f8cc:	69a2      	ldr	r2, [r4, #24]
 800f8ce:	b102      	cbz	r2, 800f8d2 <_scanf_chars+0xa2>
 800f8d0:	7033      	strb	r3, [r6, #0]
 800f8d2:	6923      	ldr	r3, [r4, #16]
 800f8d4:	443b      	add	r3, r7
 800f8d6:	6123      	str	r3, [r4, #16]
 800f8d8:	2000      	movs	r0, #0
 800f8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8de:	bf00      	nop
 800f8e0:	08010cab 	.word	0x08010cab

0800f8e4 <_scanf_i>:
 800f8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e8:	4698      	mov	r8, r3
 800f8ea:	4b76      	ldr	r3, [pc, #472]	; (800fac4 <_scanf_i+0x1e0>)
 800f8ec:	460c      	mov	r4, r1
 800f8ee:	4682      	mov	sl, r0
 800f8f0:	4616      	mov	r6, r2
 800f8f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8f6:	b087      	sub	sp, #28
 800f8f8:	ab03      	add	r3, sp, #12
 800f8fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f8fe:	4b72      	ldr	r3, [pc, #456]	; (800fac8 <_scanf_i+0x1e4>)
 800f900:	69a1      	ldr	r1, [r4, #24]
 800f902:	4a72      	ldr	r2, [pc, #456]	; (800facc <_scanf_i+0x1e8>)
 800f904:	2903      	cmp	r1, #3
 800f906:	bf18      	it	ne
 800f908:	461a      	movne	r2, r3
 800f90a:	68a3      	ldr	r3, [r4, #8]
 800f90c:	9201      	str	r2, [sp, #4]
 800f90e:	1e5a      	subs	r2, r3, #1
 800f910:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f914:	bf88      	it	hi
 800f916:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f91a:	4627      	mov	r7, r4
 800f91c:	bf82      	ittt	hi
 800f91e:	eb03 0905 	addhi.w	r9, r3, r5
 800f922:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f926:	60a3      	strhi	r3, [r4, #8]
 800f928:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f92c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f930:	bf98      	it	ls
 800f932:	f04f 0900 	movls.w	r9, #0
 800f936:	6023      	str	r3, [r4, #0]
 800f938:	463d      	mov	r5, r7
 800f93a:	f04f 0b00 	mov.w	fp, #0
 800f93e:	6831      	ldr	r1, [r6, #0]
 800f940:	ab03      	add	r3, sp, #12
 800f942:	7809      	ldrb	r1, [r1, #0]
 800f944:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f948:	2202      	movs	r2, #2
 800f94a:	f7f0 fc21 	bl	8000190 <memchr>
 800f94e:	b328      	cbz	r0, 800f99c <_scanf_i+0xb8>
 800f950:	f1bb 0f01 	cmp.w	fp, #1
 800f954:	d159      	bne.n	800fa0a <_scanf_i+0x126>
 800f956:	6862      	ldr	r2, [r4, #4]
 800f958:	b92a      	cbnz	r2, 800f966 <_scanf_i+0x82>
 800f95a:	6822      	ldr	r2, [r4, #0]
 800f95c:	2308      	movs	r3, #8
 800f95e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f962:	6063      	str	r3, [r4, #4]
 800f964:	6022      	str	r2, [r4, #0]
 800f966:	6822      	ldr	r2, [r4, #0]
 800f968:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f96c:	6022      	str	r2, [r4, #0]
 800f96e:	68a2      	ldr	r2, [r4, #8]
 800f970:	1e51      	subs	r1, r2, #1
 800f972:	60a1      	str	r1, [r4, #8]
 800f974:	b192      	cbz	r2, 800f99c <_scanf_i+0xb8>
 800f976:	6832      	ldr	r2, [r6, #0]
 800f978:	1c51      	adds	r1, r2, #1
 800f97a:	6031      	str	r1, [r6, #0]
 800f97c:	7812      	ldrb	r2, [r2, #0]
 800f97e:	f805 2b01 	strb.w	r2, [r5], #1
 800f982:	6872      	ldr	r2, [r6, #4]
 800f984:	3a01      	subs	r2, #1
 800f986:	2a00      	cmp	r2, #0
 800f988:	6072      	str	r2, [r6, #4]
 800f98a:	dc07      	bgt.n	800f99c <_scanf_i+0xb8>
 800f98c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f990:	4631      	mov	r1, r6
 800f992:	4650      	mov	r0, sl
 800f994:	4790      	blx	r2
 800f996:	2800      	cmp	r0, #0
 800f998:	f040 8085 	bne.w	800faa6 <_scanf_i+0x1c2>
 800f99c:	f10b 0b01 	add.w	fp, fp, #1
 800f9a0:	f1bb 0f03 	cmp.w	fp, #3
 800f9a4:	d1cb      	bne.n	800f93e <_scanf_i+0x5a>
 800f9a6:	6863      	ldr	r3, [r4, #4]
 800f9a8:	b90b      	cbnz	r3, 800f9ae <_scanf_i+0xca>
 800f9aa:	230a      	movs	r3, #10
 800f9ac:	6063      	str	r3, [r4, #4]
 800f9ae:	6863      	ldr	r3, [r4, #4]
 800f9b0:	4947      	ldr	r1, [pc, #284]	; (800fad0 <_scanf_i+0x1ec>)
 800f9b2:	6960      	ldr	r0, [r4, #20]
 800f9b4:	1ac9      	subs	r1, r1, r3
 800f9b6:	f000 f88d 	bl	800fad4 <__sccl>
 800f9ba:	f04f 0b00 	mov.w	fp, #0
 800f9be:	68a3      	ldr	r3, [r4, #8]
 800f9c0:	6822      	ldr	r2, [r4, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d03d      	beq.n	800fa42 <_scanf_i+0x15e>
 800f9c6:	6831      	ldr	r1, [r6, #0]
 800f9c8:	6960      	ldr	r0, [r4, #20]
 800f9ca:	f891 c000 	ldrb.w	ip, [r1]
 800f9ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d035      	beq.n	800fa42 <_scanf_i+0x15e>
 800f9d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f9da:	d124      	bne.n	800fa26 <_scanf_i+0x142>
 800f9dc:	0510      	lsls	r0, r2, #20
 800f9de:	d522      	bpl.n	800fa26 <_scanf_i+0x142>
 800f9e0:	f10b 0b01 	add.w	fp, fp, #1
 800f9e4:	f1b9 0f00 	cmp.w	r9, #0
 800f9e8:	d003      	beq.n	800f9f2 <_scanf_i+0x10e>
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	f109 39ff 	add.w	r9, r9, #4294967295
 800f9f0:	60a3      	str	r3, [r4, #8]
 800f9f2:	6873      	ldr	r3, [r6, #4]
 800f9f4:	3b01      	subs	r3, #1
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	6073      	str	r3, [r6, #4]
 800f9fa:	dd1b      	ble.n	800fa34 <_scanf_i+0x150>
 800f9fc:	6833      	ldr	r3, [r6, #0]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	6033      	str	r3, [r6, #0]
 800fa02:	68a3      	ldr	r3, [r4, #8]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	60a3      	str	r3, [r4, #8]
 800fa08:	e7d9      	b.n	800f9be <_scanf_i+0xda>
 800fa0a:	f1bb 0f02 	cmp.w	fp, #2
 800fa0e:	d1ae      	bne.n	800f96e <_scanf_i+0x8a>
 800fa10:	6822      	ldr	r2, [r4, #0]
 800fa12:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fa16:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fa1a:	d1bf      	bne.n	800f99c <_scanf_i+0xb8>
 800fa1c:	2310      	movs	r3, #16
 800fa1e:	6063      	str	r3, [r4, #4]
 800fa20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa24:	e7a2      	b.n	800f96c <_scanf_i+0x88>
 800fa26:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fa2a:	6022      	str	r2, [r4, #0]
 800fa2c:	780b      	ldrb	r3, [r1, #0]
 800fa2e:	f805 3b01 	strb.w	r3, [r5], #1
 800fa32:	e7de      	b.n	800f9f2 <_scanf_i+0x10e>
 800fa34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fa38:	4631      	mov	r1, r6
 800fa3a:	4650      	mov	r0, sl
 800fa3c:	4798      	blx	r3
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d0df      	beq.n	800fa02 <_scanf_i+0x11e>
 800fa42:	6823      	ldr	r3, [r4, #0]
 800fa44:	05db      	lsls	r3, r3, #23
 800fa46:	d50d      	bpl.n	800fa64 <_scanf_i+0x180>
 800fa48:	42bd      	cmp	r5, r7
 800fa4a:	d909      	bls.n	800fa60 <_scanf_i+0x17c>
 800fa4c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fa50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fa54:	4632      	mov	r2, r6
 800fa56:	4650      	mov	r0, sl
 800fa58:	4798      	blx	r3
 800fa5a:	f105 39ff 	add.w	r9, r5, #4294967295
 800fa5e:	464d      	mov	r5, r9
 800fa60:	42bd      	cmp	r5, r7
 800fa62:	d02d      	beq.n	800fac0 <_scanf_i+0x1dc>
 800fa64:	6822      	ldr	r2, [r4, #0]
 800fa66:	f012 0210 	ands.w	r2, r2, #16
 800fa6a:	d113      	bne.n	800fa94 <_scanf_i+0x1b0>
 800fa6c:	702a      	strb	r2, [r5, #0]
 800fa6e:	6863      	ldr	r3, [r4, #4]
 800fa70:	9e01      	ldr	r6, [sp, #4]
 800fa72:	4639      	mov	r1, r7
 800fa74:	4650      	mov	r0, sl
 800fa76:	47b0      	blx	r6
 800fa78:	6821      	ldr	r1, [r4, #0]
 800fa7a:	f8d8 3000 	ldr.w	r3, [r8]
 800fa7e:	f011 0f20 	tst.w	r1, #32
 800fa82:	d013      	beq.n	800faac <_scanf_i+0x1c8>
 800fa84:	1d1a      	adds	r2, r3, #4
 800fa86:	f8c8 2000 	str.w	r2, [r8]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	6018      	str	r0, [r3, #0]
 800fa8e:	68e3      	ldr	r3, [r4, #12]
 800fa90:	3301      	adds	r3, #1
 800fa92:	60e3      	str	r3, [r4, #12]
 800fa94:	1bed      	subs	r5, r5, r7
 800fa96:	44ab      	add	fp, r5
 800fa98:	6925      	ldr	r5, [r4, #16]
 800fa9a:	445d      	add	r5, fp
 800fa9c:	6125      	str	r5, [r4, #16]
 800fa9e:	2000      	movs	r0, #0
 800faa0:	b007      	add	sp, #28
 800faa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa6:	f04f 0b00 	mov.w	fp, #0
 800faaa:	e7ca      	b.n	800fa42 <_scanf_i+0x15e>
 800faac:	1d1a      	adds	r2, r3, #4
 800faae:	f8c8 2000 	str.w	r2, [r8]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f011 0f01 	tst.w	r1, #1
 800fab8:	bf14      	ite	ne
 800faba:	8018      	strhne	r0, [r3, #0]
 800fabc:	6018      	streq	r0, [r3, #0]
 800fabe:	e7e6      	b.n	800fa8e <_scanf_i+0x1aa>
 800fac0:	2001      	movs	r0, #1
 800fac2:	e7ed      	b.n	800faa0 <_scanf_i+0x1bc>
 800fac4:	08010a20 	.word	0x08010a20
 800fac8:	0800fd31 	.word	0x0800fd31
 800facc:	0800fc49 	.word	0x0800fc49
 800fad0:	08010ca8 	.word	0x08010ca8

0800fad4 <__sccl>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	780b      	ldrb	r3, [r1, #0]
 800fad8:	4604      	mov	r4, r0
 800fada:	2b5e      	cmp	r3, #94	; 0x5e
 800fadc:	bf0b      	itete	eq
 800fade:	784b      	ldrbeq	r3, [r1, #1]
 800fae0:	1c48      	addne	r0, r1, #1
 800fae2:	1c88      	addeq	r0, r1, #2
 800fae4:	2200      	movne	r2, #0
 800fae6:	bf08      	it	eq
 800fae8:	2201      	moveq	r2, #1
 800faea:	1e61      	subs	r1, r4, #1
 800faec:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800faf0:	f801 2f01 	strb.w	r2, [r1, #1]!
 800faf4:	42a9      	cmp	r1, r5
 800faf6:	d1fb      	bne.n	800faf0 <__sccl+0x1c>
 800faf8:	b90b      	cbnz	r3, 800fafe <__sccl+0x2a>
 800fafa:	3801      	subs	r0, #1
 800fafc:	bd70      	pop	{r4, r5, r6, pc}
 800fafe:	f082 0201 	eor.w	r2, r2, #1
 800fb02:	54e2      	strb	r2, [r4, r3]
 800fb04:	4605      	mov	r5, r0
 800fb06:	4628      	mov	r0, r5
 800fb08:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fb0c:	292d      	cmp	r1, #45	; 0x2d
 800fb0e:	d006      	beq.n	800fb1e <__sccl+0x4a>
 800fb10:	295d      	cmp	r1, #93	; 0x5d
 800fb12:	d0f3      	beq.n	800fafc <__sccl+0x28>
 800fb14:	b909      	cbnz	r1, 800fb1a <__sccl+0x46>
 800fb16:	4628      	mov	r0, r5
 800fb18:	e7f0      	b.n	800fafc <__sccl+0x28>
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	e7f1      	b.n	800fb02 <__sccl+0x2e>
 800fb1e:	786e      	ldrb	r6, [r5, #1]
 800fb20:	2e5d      	cmp	r6, #93	; 0x5d
 800fb22:	d0fa      	beq.n	800fb1a <__sccl+0x46>
 800fb24:	42b3      	cmp	r3, r6
 800fb26:	dcf8      	bgt.n	800fb1a <__sccl+0x46>
 800fb28:	3502      	adds	r5, #2
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	3101      	adds	r1, #1
 800fb2e:	428e      	cmp	r6, r1
 800fb30:	5462      	strb	r2, [r4, r1]
 800fb32:	dcfb      	bgt.n	800fb2c <__sccl+0x58>
 800fb34:	1af1      	subs	r1, r6, r3
 800fb36:	3901      	subs	r1, #1
 800fb38:	1c58      	adds	r0, r3, #1
 800fb3a:	42b3      	cmp	r3, r6
 800fb3c:	bfa8      	it	ge
 800fb3e:	2100      	movge	r1, #0
 800fb40:	1843      	adds	r3, r0, r1
 800fb42:	e7e0      	b.n	800fb06 <__sccl+0x32>

0800fb44 <_strtol_l.constprop.0>:
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb4a:	d001      	beq.n	800fb50 <_strtol_l.constprop.0+0xc>
 800fb4c:	2b24      	cmp	r3, #36	; 0x24
 800fb4e:	d906      	bls.n	800fb5e <_strtol_l.constprop.0+0x1a>
 800fb50:	f7ff f8ec 	bl	800ed2c <__errno>
 800fb54:	2316      	movs	r3, #22
 800fb56:	6003      	str	r3, [r0, #0]
 800fb58:	2000      	movs	r0, #0
 800fb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fc44 <_strtol_l.constprop.0+0x100>
 800fb62:	460d      	mov	r5, r1
 800fb64:	462e      	mov	r6, r5
 800fb66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb6a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fb6e:	f017 0708 	ands.w	r7, r7, #8
 800fb72:	d1f7      	bne.n	800fb64 <_strtol_l.constprop.0+0x20>
 800fb74:	2c2d      	cmp	r4, #45	; 0x2d
 800fb76:	d132      	bne.n	800fbde <_strtol_l.constprop.0+0x9a>
 800fb78:	782c      	ldrb	r4, [r5, #0]
 800fb7a:	2701      	movs	r7, #1
 800fb7c:	1cb5      	adds	r5, r6, #2
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d05b      	beq.n	800fc3a <_strtol_l.constprop.0+0xf6>
 800fb82:	2b10      	cmp	r3, #16
 800fb84:	d109      	bne.n	800fb9a <_strtol_l.constprop.0+0x56>
 800fb86:	2c30      	cmp	r4, #48	; 0x30
 800fb88:	d107      	bne.n	800fb9a <_strtol_l.constprop.0+0x56>
 800fb8a:	782c      	ldrb	r4, [r5, #0]
 800fb8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fb90:	2c58      	cmp	r4, #88	; 0x58
 800fb92:	d14d      	bne.n	800fc30 <_strtol_l.constprop.0+0xec>
 800fb94:	786c      	ldrb	r4, [r5, #1]
 800fb96:	2310      	movs	r3, #16
 800fb98:	3502      	adds	r5, #2
 800fb9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fb9e:	f108 38ff 	add.w	r8, r8, #4294967295
 800fba2:	f04f 0c00 	mov.w	ip, #0
 800fba6:	fbb8 f9f3 	udiv	r9, r8, r3
 800fbaa:	4666      	mov	r6, ip
 800fbac:	fb03 8a19 	mls	sl, r3, r9, r8
 800fbb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fbb4:	f1be 0f09 	cmp.w	lr, #9
 800fbb8:	d816      	bhi.n	800fbe8 <_strtol_l.constprop.0+0xa4>
 800fbba:	4674      	mov	r4, lr
 800fbbc:	42a3      	cmp	r3, r4
 800fbbe:	dd24      	ble.n	800fc0a <_strtol_l.constprop.0+0xc6>
 800fbc0:	f1bc 0f00 	cmp.w	ip, #0
 800fbc4:	db1e      	blt.n	800fc04 <_strtol_l.constprop.0+0xc0>
 800fbc6:	45b1      	cmp	r9, r6
 800fbc8:	d31c      	bcc.n	800fc04 <_strtol_l.constprop.0+0xc0>
 800fbca:	d101      	bne.n	800fbd0 <_strtol_l.constprop.0+0x8c>
 800fbcc:	45a2      	cmp	sl, r4
 800fbce:	db19      	blt.n	800fc04 <_strtol_l.constprop.0+0xc0>
 800fbd0:	fb06 4603 	mla	r6, r6, r3, r4
 800fbd4:	f04f 0c01 	mov.w	ip, #1
 800fbd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbdc:	e7e8      	b.n	800fbb0 <_strtol_l.constprop.0+0x6c>
 800fbde:	2c2b      	cmp	r4, #43	; 0x2b
 800fbe0:	bf04      	itt	eq
 800fbe2:	782c      	ldrbeq	r4, [r5, #0]
 800fbe4:	1cb5      	addeq	r5, r6, #2
 800fbe6:	e7ca      	b.n	800fb7e <_strtol_l.constprop.0+0x3a>
 800fbe8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fbec:	f1be 0f19 	cmp.w	lr, #25
 800fbf0:	d801      	bhi.n	800fbf6 <_strtol_l.constprop.0+0xb2>
 800fbf2:	3c37      	subs	r4, #55	; 0x37
 800fbf4:	e7e2      	b.n	800fbbc <_strtol_l.constprop.0+0x78>
 800fbf6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fbfa:	f1be 0f19 	cmp.w	lr, #25
 800fbfe:	d804      	bhi.n	800fc0a <_strtol_l.constprop.0+0xc6>
 800fc00:	3c57      	subs	r4, #87	; 0x57
 800fc02:	e7db      	b.n	800fbbc <_strtol_l.constprop.0+0x78>
 800fc04:	f04f 3cff 	mov.w	ip, #4294967295
 800fc08:	e7e6      	b.n	800fbd8 <_strtol_l.constprop.0+0x94>
 800fc0a:	f1bc 0f00 	cmp.w	ip, #0
 800fc0e:	da05      	bge.n	800fc1c <_strtol_l.constprop.0+0xd8>
 800fc10:	2322      	movs	r3, #34	; 0x22
 800fc12:	6003      	str	r3, [r0, #0]
 800fc14:	4646      	mov	r6, r8
 800fc16:	b942      	cbnz	r2, 800fc2a <_strtol_l.constprop.0+0xe6>
 800fc18:	4630      	mov	r0, r6
 800fc1a:	e79e      	b.n	800fb5a <_strtol_l.constprop.0+0x16>
 800fc1c:	b107      	cbz	r7, 800fc20 <_strtol_l.constprop.0+0xdc>
 800fc1e:	4276      	negs	r6, r6
 800fc20:	2a00      	cmp	r2, #0
 800fc22:	d0f9      	beq.n	800fc18 <_strtol_l.constprop.0+0xd4>
 800fc24:	f1bc 0f00 	cmp.w	ip, #0
 800fc28:	d000      	beq.n	800fc2c <_strtol_l.constprop.0+0xe8>
 800fc2a:	1e69      	subs	r1, r5, #1
 800fc2c:	6011      	str	r1, [r2, #0]
 800fc2e:	e7f3      	b.n	800fc18 <_strtol_l.constprop.0+0xd4>
 800fc30:	2430      	movs	r4, #48	; 0x30
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d1b1      	bne.n	800fb9a <_strtol_l.constprop.0+0x56>
 800fc36:	2308      	movs	r3, #8
 800fc38:	e7af      	b.n	800fb9a <_strtol_l.constprop.0+0x56>
 800fc3a:	2c30      	cmp	r4, #48	; 0x30
 800fc3c:	d0a5      	beq.n	800fb8a <_strtol_l.constprop.0+0x46>
 800fc3e:	230a      	movs	r3, #10
 800fc40:	e7ab      	b.n	800fb9a <_strtol_l.constprop.0+0x56>
 800fc42:	bf00      	nop
 800fc44:	08010cab 	.word	0x08010cab

0800fc48 <_strtol_r>:
 800fc48:	f7ff bf7c 	b.w	800fb44 <_strtol_l.constprop.0>

0800fc4c <_strtoul_l.constprop.0>:
 800fc4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc50:	4f36      	ldr	r7, [pc, #216]	; (800fd2c <_strtoul_l.constprop.0+0xe0>)
 800fc52:	4686      	mov	lr, r0
 800fc54:	460d      	mov	r5, r1
 800fc56:	4628      	mov	r0, r5
 800fc58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc5c:	5de6      	ldrb	r6, [r4, r7]
 800fc5e:	f016 0608 	ands.w	r6, r6, #8
 800fc62:	d1f8      	bne.n	800fc56 <_strtoul_l.constprop.0+0xa>
 800fc64:	2c2d      	cmp	r4, #45	; 0x2d
 800fc66:	d12f      	bne.n	800fcc8 <_strtoul_l.constprop.0+0x7c>
 800fc68:	782c      	ldrb	r4, [r5, #0]
 800fc6a:	2601      	movs	r6, #1
 800fc6c:	1c85      	adds	r5, r0, #2
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d057      	beq.n	800fd22 <_strtoul_l.constprop.0+0xd6>
 800fc72:	2b10      	cmp	r3, #16
 800fc74:	d109      	bne.n	800fc8a <_strtoul_l.constprop.0+0x3e>
 800fc76:	2c30      	cmp	r4, #48	; 0x30
 800fc78:	d107      	bne.n	800fc8a <_strtoul_l.constprop.0+0x3e>
 800fc7a:	7828      	ldrb	r0, [r5, #0]
 800fc7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fc80:	2858      	cmp	r0, #88	; 0x58
 800fc82:	d149      	bne.n	800fd18 <_strtoul_l.constprop.0+0xcc>
 800fc84:	786c      	ldrb	r4, [r5, #1]
 800fc86:	2310      	movs	r3, #16
 800fc88:	3502      	adds	r5, #2
 800fc8a:	f04f 38ff 	mov.w	r8, #4294967295
 800fc8e:	2700      	movs	r7, #0
 800fc90:	fbb8 f8f3 	udiv	r8, r8, r3
 800fc94:	fb03 f908 	mul.w	r9, r3, r8
 800fc98:	ea6f 0909 	mvn.w	r9, r9
 800fc9c:	4638      	mov	r0, r7
 800fc9e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fca2:	f1bc 0f09 	cmp.w	ip, #9
 800fca6:	d814      	bhi.n	800fcd2 <_strtoul_l.constprop.0+0x86>
 800fca8:	4664      	mov	r4, ip
 800fcaa:	42a3      	cmp	r3, r4
 800fcac:	dd22      	ble.n	800fcf4 <_strtoul_l.constprop.0+0xa8>
 800fcae:	2f00      	cmp	r7, #0
 800fcb0:	db1d      	blt.n	800fcee <_strtoul_l.constprop.0+0xa2>
 800fcb2:	4580      	cmp	r8, r0
 800fcb4:	d31b      	bcc.n	800fcee <_strtoul_l.constprop.0+0xa2>
 800fcb6:	d101      	bne.n	800fcbc <_strtoul_l.constprop.0+0x70>
 800fcb8:	45a1      	cmp	r9, r4
 800fcba:	db18      	blt.n	800fcee <_strtoul_l.constprop.0+0xa2>
 800fcbc:	fb00 4003 	mla	r0, r0, r3, r4
 800fcc0:	2701      	movs	r7, #1
 800fcc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcc6:	e7ea      	b.n	800fc9e <_strtoul_l.constprop.0+0x52>
 800fcc8:	2c2b      	cmp	r4, #43	; 0x2b
 800fcca:	bf04      	itt	eq
 800fccc:	782c      	ldrbeq	r4, [r5, #0]
 800fcce:	1c85      	addeq	r5, r0, #2
 800fcd0:	e7cd      	b.n	800fc6e <_strtoul_l.constprop.0+0x22>
 800fcd2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fcd6:	f1bc 0f19 	cmp.w	ip, #25
 800fcda:	d801      	bhi.n	800fce0 <_strtoul_l.constprop.0+0x94>
 800fcdc:	3c37      	subs	r4, #55	; 0x37
 800fcde:	e7e4      	b.n	800fcaa <_strtoul_l.constprop.0+0x5e>
 800fce0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fce4:	f1bc 0f19 	cmp.w	ip, #25
 800fce8:	d804      	bhi.n	800fcf4 <_strtoul_l.constprop.0+0xa8>
 800fcea:	3c57      	subs	r4, #87	; 0x57
 800fcec:	e7dd      	b.n	800fcaa <_strtoul_l.constprop.0+0x5e>
 800fcee:	f04f 37ff 	mov.w	r7, #4294967295
 800fcf2:	e7e6      	b.n	800fcc2 <_strtoul_l.constprop.0+0x76>
 800fcf4:	2f00      	cmp	r7, #0
 800fcf6:	da07      	bge.n	800fd08 <_strtoul_l.constprop.0+0xbc>
 800fcf8:	2322      	movs	r3, #34	; 0x22
 800fcfa:	f8ce 3000 	str.w	r3, [lr]
 800fcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800fd02:	b932      	cbnz	r2, 800fd12 <_strtoul_l.constprop.0+0xc6>
 800fd04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd08:	b106      	cbz	r6, 800fd0c <_strtoul_l.constprop.0+0xc0>
 800fd0a:	4240      	negs	r0, r0
 800fd0c:	2a00      	cmp	r2, #0
 800fd0e:	d0f9      	beq.n	800fd04 <_strtoul_l.constprop.0+0xb8>
 800fd10:	b107      	cbz	r7, 800fd14 <_strtoul_l.constprop.0+0xc8>
 800fd12:	1e69      	subs	r1, r5, #1
 800fd14:	6011      	str	r1, [r2, #0]
 800fd16:	e7f5      	b.n	800fd04 <_strtoul_l.constprop.0+0xb8>
 800fd18:	2430      	movs	r4, #48	; 0x30
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d1b5      	bne.n	800fc8a <_strtoul_l.constprop.0+0x3e>
 800fd1e:	2308      	movs	r3, #8
 800fd20:	e7b3      	b.n	800fc8a <_strtoul_l.constprop.0+0x3e>
 800fd22:	2c30      	cmp	r4, #48	; 0x30
 800fd24:	d0a9      	beq.n	800fc7a <_strtoul_l.constprop.0+0x2e>
 800fd26:	230a      	movs	r3, #10
 800fd28:	e7af      	b.n	800fc8a <_strtoul_l.constprop.0+0x3e>
 800fd2a:	bf00      	nop
 800fd2c:	08010cab 	.word	0x08010cab

0800fd30 <_strtoul_r>:
 800fd30:	f7ff bf8c 	b.w	800fc4c <_strtoul_l.constprop.0>

0800fd34 <__submore>:
 800fd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd38:	460c      	mov	r4, r1
 800fd3a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fd3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd40:	4299      	cmp	r1, r3
 800fd42:	d11d      	bne.n	800fd80 <__submore+0x4c>
 800fd44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fd48:	f000 f8b6 	bl	800feb8 <_malloc_r>
 800fd4c:	b918      	cbnz	r0, 800fd56 <__submore+0x22>
 800fd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd5a:	63a3      	str	r3, [r4, #56]	; 0x38
 800fd5c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fd60:	6360      	str	r0, [r4, #52]	; 0x34
 800fd62:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fd66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fd6a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fd6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fd72:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fd76:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fd7a:	6020      	str	r0, [r4, #0]
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	e7e8      	b.n	800fd52 <__submore+0x1e>
 800fd80:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fd82:	0077      	lsls	r7, r6, #1
 800fd84:	463a      	mov	r2, r7
 800fd86:	f000 f90b 	bl	800ffa0 <_realloc_r>
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d0de      	beq.n	800fd4e <__submore+0x1a>
 800fd90:	eb00 0806 	add.w	r8, r0, r6
 800fd94:	4601      	mov	r1, r0
 800fd96:	4632      	mov	r2, r6
 800fd98:	4640      	mov	r0, r8
 800fd9a:	f7fe fff1 	bl	800ed80 <memcpy>
 800fd9e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fda2:	f8c4 8000 	str.w	r8, [r4]
 800fda6:	e7e9      	b.n	800fd7c <__submore+0x48>

0800fda8 <__retarget_lock_acquire_recursive>:
 800fda8:	4770      	bx	lr

0800fdaa <__retarget_lock_release_recursive>:
 800fdaa:	4770      	bx	lr

0800fdac <memmove>:
 800fdac:	4288      	cmp	r0, r1
 800fdae:	b510      	push	{r4, lr}
 800fdb0:	eb01 0402 	add.w	r4, r1, r2
 800fdb4:	d902      	bls.n	800fdbc <memmove+0x10>
 800fdb6:	4284      	cmp	r4, r0
 800fdb8:	4623      	mov	r3, r4
 800fdba:	d807      	bhi.n	800fdcc <memmove+0x20>
 800fdbc:	1e43      	subs	r3, r0, #1
 800fdbe:	42a1      	cmp	r1, r4
 800fdc0:	d008      	beq.n	800fdd4 <memmove+0x28>
 800fdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdca:	e7f8      	b.n	800fdbe <memmove+0x12>
 800fdcc:	4402      	add	r2, r0
 800fdce:	4601      	mov	r1, r0
 800fdd0:	428a      	cmp	r2, r1
 800fdd2:	d100      	bne.n	800fdd6 <memmove+0x2a>
 800fdd4:	bd10      	pop	{r4, pc}
 800fdd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdde:	e7f7      	b.n	800fdd0 <memmove+0x24>

0800fde0 <_free_r>:
 800fde0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fde2:	2900      	cmp	r1, #0
 800fde4:	d044      	beq.n	800fe70 <_free_r+0x90>
 800fde6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdea:	9001      	str	r0, [sp, #4]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f1a1 0404 	sub.w	r4, r1, #4
 800fdf2:	bfb8      	it	lt
 800fdf4:	18e4      	addlt	r4, r4, r3
 800fdf6:	f000 f913 	bl	8010020 <__malloc_lock>
 800fdfa:	4a1e      	ldr	r2, [pc, #120]	; (800fe74 <_free_r+0x94>)
 800fdfc:	9801      	ldr	r0, [sp, #4]
 800fdfe:	6813      	ldr	r3, [r2, #0]
 800fe00:	b933      	cbnz	r3, 800fe10 <_free_r+0x30>
 800fe02:	6063      	str	r3, [r4, #4]
 800fe04:	6014      	str	r4, [r2, #0]
 800fe06:	b003      	add	sp, #12
 800fe08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe0c:	f000 b90e 	b.w	801002c <__malloc_unlock>
 800fe10:	42a3      	cmp	r3, r4
 800fe12:	d908      	bls.n	800fe26 <_free_r+0x46>
 800fe14:	6825      	ldr	r5, [r4, #0]
 800fe16:	1961      	adds	r1, r4, r5
 800fe18:	428b      	cmp	r3, r1
 800fe1a:	bf01      	itttt	eq
 800fe1c:	6819      	ldreq	r1, [r3, #0]
 800fe1e:	685b      	ldreq	r3, [r3, #4]
 800fe20:	1949      	addeq	r1, r1, r5
 800fe22:	6021      	streq	r1, [r4, #0]
 800fe24:	e7ed      	b.n	800fe02 <_free_r+0x22>
 800fe26:	461a      	mov	r2, r3
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	b10b      	cbz	r3, 800fe30 <_free_r+0x50>
 800fe2c:	42a3      	cmp	r3, r4
 800fe2e:	d9fa      	bls.n	800fe26 <_free_r+0x46>
 800fe30:	6811      	ldr	r1, [r2, #0]
 800fe32:	1855      	adds	r5, r2, r1
 800fe34:	42a5      	cmp	r5, r4
 800fe36:	d10b      	bne.n	800fe50 <_free_r+0x70>
 800fe38:	6824      	ldr	r4, [r4, #0]
 800fe3a:	4421      	add	r1, r4
 800fe3c:	1854      	adds	r4, r2, r1
 800fe3e:	42a3      	cmp	r3, r4
 800fe40:	6011      	str	r1, [r2, #0]
 800fe42:	d1e0      	bne.n	800fe06 <_free_r+0x26>
 800fe44:	681c      	ldr	r4, [r3, #0]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	6053      	str	r3, [r2, #4]
 800fe4a:	4421      	add	r1, r4
 800fe4c:	6011      	str	r1, [r2, #0]
 800fe4e:	e7da      	b.n	800fe06 <_free_r+0x26>
 800fe50:	d902      	bls.n	800fe58 <_free_r+0x78>
 800fe52:	230c      	movs	r3, #12
 800fe54:	6003      	str	r3, [r0, #0]
 800fe56:	e7d6      	b.n	800fe06 <_free_r+0x26>
 800fe58:	6825      	ldr	r5, [r4, #0]
 800fe5a:	1961      	adds	r1, r4, r5
 800fe5c:	428b      	cmp	r3, r1
 800fe5e:	bf04      	itt	eq
 800fe60:	6819      	ldreq	r1, [r3, #0]
 800fe62:	685b      	ldreq	r3, [r3, #4]
 800fe64:	6063      	str	r3, [r4, #4]
 800fe66:	bf04      	itt	eq
 800fe68:	1949      	addeq	r1, r1, r5
 800fe6a:	6021      	streq	r1, [r4, #0]
 800fe6c:	6054      	str	r4, [r2, #4]
 800fe6e:	e7ca      	b.n	800fe06 <_free_r+0x26>
 800fe70:	b003      	add	sp, #12
 800fe72:	bd30      	pop	{r4, r5, pc}
 800fe74:	20001860 	.word	0x20001860

0800fe78 <sbrk_aligned>:
 800fe78:	b570      	push	{r4, r5, r6, lr}
 800fe7a:	4e0e      	ldr	r6, [pc, #56]	; (800feb4 <sbrk_aligned+0x3c>)
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	6831      	ldr	r1, [r6, #0]
 800fe80:	4605      	mov	r5, r0
 800fe82:	b911      	cbnz	r1, 800fe8a <sbrk_aligned+0x12>
 800fe84:	f000 f8bc 	bl	8010000 <_sbrk_r>
 800fe88:	6030      	str	r0, [r6, #0]
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	f000 f8b7 	bl	8010000 <_sbrk_r>
 800fe92:	1c43      	adds	r3, r0, #1
 800fe94:	d00a      	beq.n	800feac <sbrk_aligned+0x34>
 800fe96:	1cc4      	adds	r4, r0, #3
 800fe98:	f024 0403 	bic.w	r4, r4, #3
 800fe9c:	42a0      	cmp	r0, r4
 800fe9e:	d007      	beq.n	800feb0 <sbrk_aligned+0x38>
 800fea0:	1a21      	subs	r1, r4, r0
 800fea2:	4628      	mov	r0, r5
 800fea4:	f000 f8ac 	bl	8010000 <_sbrk_r>
 800fea8:	3001      	adds	r0, #1
 800feaa:	d101      	bne.n	800feb0 <sbrk_aligned+0x38>
 800feac:	f04f 34ff 	mov.w	r4, #4294967295
 800feb0:	4620      	mov	r0, r4
 800feb2:	bd70      	pop	{r4, r5, r6, pc}
 800feb4:	20001864 	.word	0x20001864

0800feb8 <_malloc_r>:
 800feb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800febc:	1ccd      	adds	r5, r1, #3
 800febe:	f025 0503 	bic.w	r5, r5, #3
 800fec2:	3508      	adds	r5, #8
 800fec4:	2d0c      	cmp	r5, #12
 800fec6:	bf38      	it	cc
 800fec8:	250c      	movcc	r5, #12
 800feca:	2d00      	cmp	r5, #0
 800fecc:	4607      	mov	r7, r0
 800fece:	db01      	blt.n	800fed4 <_malloc_r+0x1c>
 800fed0:	42a9      	cmp	r1, r5
 800fed2:	d905      	bls.n	800fee0 <_malloc_r+0x28>
 800fed4:	230c      	movs	r3, #12
 800fed6:	603b      	str	r3, [r7, #0]
 800fed8:	2600      	movs	r6, #0
 800feda:	4630      	mov	r0, r6
 800fedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee0:	4e2e      	ldr	r6, [pc, #184]	; (800ff9c <_malloc_r+0xe4>)
 800fee2:	f000 f89d 	bl	8010020 <__malloc_lock>
 800fee6:	6833      	ldr	r3, [r6, #0]
 800fee8:	461c      	mov	r4, r3
 800feea:	bb34      	cbnz	r4, 800ff3a <_malloc_r+0x82>
 800feec:	4629      	mov	r1, r5
 800feee:	4638      	mov	r0, r7
 800fef0:	f7ff ffc2 	bl	800fe78 <sbrk_aligned>
 800fef4:	1c43      	adds	r3, r0, #1
 800fef6:	4604      	mov	r4, r0
 800fef8:	d14d      	bne.n	800ff96 <_malloc_r+0xde>
 800fefa:	6834      	ldr	r4, [r6, #0]
 800fefc:	4626      	mov	r6, r4
 800fefe:	2e00      	cmp	r6, #0
 800ff00:	d140      	bne.n	800ff84 <_malloc_r+0xcc>
 800ff02:	6823      	ldr	r3, [r4, #0]
 800ff04:	4631      	mov	r1, r6
 800ff06:	4638      	mov	r0, r7
 800ff08:	eb04 0803 	add.w	r8, r4, r3
 800ff0c:	f000 f878 	bl	8010000 <_sbrk_r>
 800ff10:	4580      	cmp	r8, r0
 800ff12:	d13a      	bne.n	800ff8a <_malloc_r+0xd2>
 800ff14:	6821      	ldr	r1, [r4, #0]
 800ff16:	3503      	adds	r5, #3
 800ff18:	1a6d      	subs	r5, r5, r1
 800ff1a:	f025 0503 	bic.w	r5, r5, #3
 800ff1e:	3508      	adds	r5, #8
 800ff20:	2d0c      	cmp	r5, #12
 800ff22:	bf38      	it	cc
 800ff24:	250c      	movcc	r5, #12
 800ff26:	4629      	mov	r1, r5
 800ff28:	4638      	mov	r0, r7
 800ff2a:	f7ff ffa5 	bl	800fe78 <sbrk_aligned>
 800ff2e:	3001      	adds	r0, #1
 800ff30:	d02b      	beq.n	800ff8a <_malloc_r+0xd2>
 800ff32:	6823      	ldr	r3, [r4, #0]
 800ff34:	442b      	add	r3, r5
 800ff36:	6023      	str	r3, [r4, #0]
 800ff38:	e00e      	b.n	800ff58 <_malloc_r+0xa0>
 800ff3a:	6822      	ldr	r2, [r4, #0]
 800ff3c:	1b52      	subs	r2, r2, r5
 800ff3e:	d41e      	bmi.n	800ff7e <_malloc_r+0xc6>
 800ff40:	2a0b      	cmp	r2, #11
 800ff42:	d916      	bls.n	800ff72 <_malloc_r+0xba>
 800ff44:	1961      	adds	r1, r4, r5
 800ff46:	42a3      	cmp	r3, r4
 800ff48:	6025      	str	r5, [r4, #0]
 800ff4a:	bf18      	it	ne
 800ff4c:	6059      	strne	r1, [r3, #4]
 800ff4e:	6863      	ldr	r3, [r4, #4]
 800ff50:	bf08      	it	eq
 800ff52:	6031      	streq	r1, [r6, #0]
 800ff54:	5162      	str	r2, [r4, r5]
 800ff56:	604b      	str	r3, [r1, #4]
 800ff58:	4638      	mov	r0, r7
 800ff5a:	f104 060b 	add.w	r6, r4, #11
 800ff5e:	f000 f865 	bl	801002c <__malloc_unlock>
 800ff62:	f026 0607 	bic.w	r6, r6, #7
 800ff66:	1d23      	adds	r3, r4, #4
 800ff68:	1af2      	subs	r2, r6, r3
 800ff6a:	d0b6      	beq.n	800feda <_malloc_r+0x22>
 800ff6c:	1b9b      	subs	r3, r3, r6
 800ff6e:	50a3      	str	r3, [r4, r2]
 800ff70:	e7b3      	b.n	800feda <_malloc_r+0x22>
 800ff72:	6862      	ldr	r2, [r4, #4]
 800ff74:	42a3      	cmp	r3, r4
 800ff76:	bf0c      	ite	eq
 800ff78:	6032      	streq	r2, [r6, #0]
 800ff7a:	605a      	strne	r2, [r3, #4]
 800ff7c:	e7ec      	b.n	800ff58 <_malloc_r+0xa0>
 800ff7e:	4623      	mov	r3, r4
 800ff80:	6864      	ldr	r4, [r4, #4]
 800ff82:	e7b2      	b.n	800feea <_malloc_r+0x32>
 800ff84:	4634      	mov	r4, r6
 800ff86:	6876      	ldr	r6, [r6, #4]
 800ff88:	e7b9      	b.n	800fefe <_malloc_r+0x46>
 800ff8a:	230c      	movs	r3, #12
 800ff8c:	603b      	str	r3, [r7, #0]
 800ff8e:	4638      	mov	r0, r7
 800ff90:	f000 f84c 	bl	801002c <__malloc_unlock>
 800ff94:	e7a1      	b.n	800feda <_malloc_r+0x22>
 800ff96:	6025      	str	r5, [r4, #0]
 800ff98:	e7de      	b.n	800ff58 <_malloc_r+0xa0>
 800ff9a:	bf00      	nop
 800ff9c:	20001860 	.word	0x20001860

0800ffa0 <_realloc_r>:
 800ffa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa4:	4680      	mov	r8, r0
 800ffa6:	4614      	mov	r4, r2
 800ffa8:	460e      	mov	r6, r1
 800ffaa:	b921      	cbnz	r1, 800ffb6 <_realloc_r+0x16>
 800ffac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	f7ff bf81 	b.w	800feb8 <_malloc_r>
 800ffb6:	b92a      	cbnz	r2, 800ffc4 <_realloc_r+0x24>
 800ffb8:	f7ff ff12 	bl	800fde0 <_free_r>
 800ffbc:	4625      	mov	r5, r4
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc4:	f000 f838 	bl	8010038 <_malloc_usable_size_r>
 800ffc8:	4284      	cmp	r4, r0
 800ffca:	4607      	mov	r7, r0
 800ffcc:	d802      	bhi.n	800ffd4 <_realloc_r+0x34>
 800ffce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ffd2:	d812      	bhi.n	800fffa <_realloc_r+0x5a>
 800ffd4:	4621      	mov	r1, r4
 800ffd6:	4640      	mov	r0, r8
 800ffd8:	f7ff ff6e 	bl	800feb8 <_malloc_r>
 800ffdc:	4605      	mov	r5, r0
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d0ed      	beq.n	800ffbe <_realloc_r+0x1e>
 800ffe2:	42bc      	cmp	r4, r7
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	4631      	mov	r1, r6
 800ffe8:	bf28      	it	cs
 800ffea:	463a      	movcs	r2, r7
 800ffec:	f7fe fec8 	bl	800ed80 <memcpy>
 800fff0:	4631      	mov	r1, r6
 800fff2:	4640      	mov	r0, r8
 800fff4:	f7ff fef4 	bl	800fde0 <_free_r>
 800fff8:	e7e1      	b.n	800ffbe <_realloc_r+0x1e>
 800fffa:	4635      	mov	r5, r6
 800fffc:	e7df      	b.n	800ffbe <_realloc_r+0x1e>
	...

08010000 <_sbrk_r>:
 8010000:	b538      	push	{r3, r4, r5, lr}
 8010002:	4d06      	ldr	r5, [pc, #24]	; (801001c <_sbrk_r+0x1c>)
 8010004:	2300      	movs	r3, #0
 8010006:	4604      	mov	r4, r0
 8010008:	4608      	mov	r0, r1
 801000a:	602b      	str	r3, [r5, #0]
 801000c:	f7f2 fd90 	bl	8002b30 <_sbrk>
 8010010:	1c43      	adds	r3, r0, #1
 8010012:	d102      	bne.n	801001a <_sbrk_r+0x1a>
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	b103      	cbz	r3, 801001a <_sbrk_r+0x1a>
 8010018:	6023      	str	r3, [r4, #0]
 801001a:	bd38      	pop	{r3, r4, r5, pc}
 801001c:	20001858 	.word	0x20001858

08010020 <__malloc_lock>:
 8010020:	4801      	ldr	r0, [pc, #4]	; (8010028 <__malloc_lock+0x8>)
 8010022:	f7ff bec1 	b.w	800fda8 <__retarget_lock_acquire_recursive>
 8010026:	bf00      	nop
 8010028:	2000185c 	.word	0x2000185c

0801002c <__malloc_unlock>:
 801002c:	4801      	ldr	r0, [pc, #4]	; (8010034 <__malloc_unlock+0x8>)
 801002e:	f7ff bebc 	b.w	800fdaa <__retarget_lock_release_recursive>
 8010032:	bf00      	nop
 8010034:	2000185c 	.word	0x2000185c

08010038 <_malloc_usable_size_r>:
 8010038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801003c:	1f18      	subs	r0, r3, #4
 801003e:	2b00      	cmp	r3, #0
 8010040:	bfbc      	itt	lt
 8010042:	580b      	ldrlt	r3, [r1, r0]
 8010044:	18c0      	addlt	r0, r0, r3
 8010046:	4770      	bx	lr

08010048 <sqrt>:
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	ed2d 8b02 	vpush	{d8}
 801004e:	ec55 4b10 	vmov	r4, r5, d0
 8010052:	f000 f853 	bl	80100fc <__ieee754_sqrt>
 8010056:	4622      	mov	r2, r4
 8010058:	462b      	mov	r3, r5
 801005a:	4620      	mov	r0, r4
 801005c:	4629      	mov	r1, r5
 801005e:	eeb0 8a40 	vmov.f32	s16, s0
 8010062:	eef0 8a60 	vmov.f32	s17, s1
 8010066:	f7f0 fd39 	bl	8000adc <__aeabi_dcmpun>
 801006a:	b990      	cbnz	r0, 8010092 <sqrt+0x4a>
 801006c:	2200      	movs	r2, #0
 801006e:	2300      	movs	r3, #0
 8010070:	4620      	mov	r0, r4
 8010072:	4629      	mov	r1, r5
 8010074:	f7f0 fd0a 	bl	8000a8c <__aeabi_dcmplt>
 8010078:	b158      	cbz	r0, 8010092 <sqrt+0x4a>
 801007a:	f7fe fe57 	bl	800ed2c <__errno>
 801007e:	2321      	movs	r3, #33	; 0x21
 8010080:	6003      	str	r3, [r0, #0]
 8010082:	2200      	movs	r2, #0
 8010084:	2300      	movs	r3, #0
 8010086:	4610      	mov	r0, r2
 8010088:	4619      	mov	r1, r3
 801008a:	f7f0 fbb7 	bl	80007fc <__aeabi_ddiv>
 801008e:	ec41 0b18 	vmov	d8, r0, r1
 8010092:	eeb0 0a48 	vmov.f32	s0, s16
 8010096:	eef0 0a68 	vmov.f32	s1, s17
 801009a:	ecbd 8b02 	vpop	{d8}
 801009e:	bd38      	pop	{r3, r4, r5, pc}

080100a0 <asinf>:
 80100a0:	b508      	push	{r3, lr}
 80100a2:	ed2d 8b02 	vpush	{d8}
 80100a6:	eeb0 8a40 	vmov.f32	s16, s0
 80100aa:	f000 f8d9 	bl	8010260 <__ieee754_asinf>
 80100ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80100b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b6:	eef0 8a40 	vmov.f32	s17, s0
 80100ba:	d615      	bvs.n	80100e8 <asinf+0x48>
 80100bc:	eeb0 0a48 	vmov.f32	s0, s16
 80100c0:	f000 fb2c 	bl	801071c <fabsf>
 80100c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80100c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80100cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d0:	dd0a      	ble.n	80100e8 <asinf+0x48>
 80100d2:	f7fe fe2b 	bl	800ed2c <__errno>
 80100d6:	ecbd 8b02 	vpop	{d8}
 80100da:	2321      	movs	r3, #33	; 0x21
 80100dc:	6003      	str	r3, [r0, #0]
 80100de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80100e2:	4804      	ldr	r0, [pc, #16]	; (80100f4 <asinf+0x54>)
 80100e4:	f000 bb22 	b.w	801072c <nanf>
 80100e8:	eeb0 0a68 	vmov.f32	s0, s17
 80100ec:	ecbd 8b02 	vpop	{d8}
 80100f0:	bd08      	pop	{r3, pc}
 80100f2:	bf00      	nop
 80100f4:	08010c61 	.word	0x08010c61

080100f8 <atan2f>:
 80100f8:	f000 b998 	b.w	801042c <__ieee754_atan2f>

080100fc <__ieee754_sqrt>:
 80100fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010100:	ec55 4b10 	vmov	r4, r5, d0
 8010104:	4e55      	ldr	r6, [pc, #340]	; (801025c <__ieee754_sqrt+0x160>)
 8010106:	43ae      	bics	r6, r5
 8010108:	ee10 0a10 	vmov	r0, s0
 801010c:	ee10 3a10 	vmov	r3, s0
 8010110:	462a      	mov	r2, r5
 8010112:	4629      	mov	r1, r5
 8010114:	d110      	bne.n	8010138 <__ieee754_sqrt+0x3c>
 8010116:	ee10 2a10 	vmov	r2, s0
 801011a:	462b      	mov	r3, r5
 801011c:	f7f0 fa44 	bl	80005a8 <__aeabi_dmul>
 8010120:	4602      	mov	r2, r0
 8010122:	460b      	mov	r3, r1
 8010124:	4620      	mov	r0, r4
 8010126:	4629      	mov	r1, r5
 8010128:	f7f0 f888 	bl	800023c <__adddf3>
 801012c:	4604      	mov	r4, r0
 801012e:	460d      	mov	r5, r1
 8010130:	ec45 4b10 	vmov	d0, r4, r5
 8010134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010138:	2d00      	cmp	r5, #0
 801013a:	dc10      	bgt.n	801015e <__ieee754_sqrt+0x62>
 801013c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010140:	4330      	orrs	r0, r6
 8010142:	d0f5      	beq.n	8010130 <__ieee754_sqrt+0x34>
 8010144:	b15d      	cbz	r5, 801015e <__ieee754_sqrt+0x62>
 8010146:	ee10 2a10 	vmov	r2, s0
 801014a:	462b      	mov	r3, r5
 801014c:	ee10 0a10 	vmov	r0, s0
 8010150:	f7f0 f872 	bl	8000238 <__aeabi_dsub>
 8010154:	4602      	mov	r2, r0
 8010156:	460b      	mov	r3, r1
 8010158:	f7f0 fb50 	bl	80007fc <__aeabi_ddiv>
 801015c:	e7e6      	b.n	801012c <__ieee754_sqrt+0x30>
 801015e:	1512      	asrs	r2, r2, #20
 8010160:	d074      	beq.n	801024c <__ieee754_sqrt+0x150>
 8010162:	07d4      	lsls	r4, r2, #31
 8010164:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010168:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801016c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010170:	bf5e      	ittt	pl
 8010172:	0fda      	lsrpl	r2, r3, #31
 8010174:	005b      	lslpl	r3, r3, #1
 8010176:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801017a:	2400      	movs	r4, #0
 801017c:	0fda      	lsrs	r2, r3, #31
 801017e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010182:	107f      	asrs	r7, r7, #1
 8010184:	005b      	lsls	r3, r3, #1
 8010186:	2516      	movs	r5, #22
 8010188:	4620      	mov	r0, r4
 801018a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801018e:	1886      	adds	r6, r0, r2
 8010190:	428e      	cmp	r6, r1
 8010192:	bfde      	ittt	le
 8010194:	1b89      	suble	r1, r1, r6
 8010196:	18b0      	addle	r0, r6, r2
 8010198:	18a4      	addle	r4, r4, r2
 801019a:	0049      	lsls	r1, r1, #1
 801019c:	3d01      	subs	r5, #1
 801019e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80101a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80101a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80101aa:	d1f0      	bne.n	801018e <__ieee754_sqrt+0x92>
 80101ac:	462a      	mov	r2, r5
 80101ae:	f04f 0e20 	mov.w	lr, #32
 80101b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80101b6:	4281      	cmp	r1, r0
 80101b8:	eb06 0c05 	add.w	ip, r6, r5
 80101bc:	dc02      	bgt.n	80101c4 <__ieee754_sqrt+0xc8>
 80101be:	d113      	bne.n	80101e8 <__ieee754_sqrt+0xec>
 80101c0:	459c      	cmp	ip, r3
 80101c2:	d811      	bhi.n	80101e8 <__ieee754_sqrt+0xec>
 80101c4:	f1bc 0f00 	cmp.w	ip, #0
 80101c8:	eb0c 0506 	add.w	r5, ip, r6
 80101cc:	da43      	bge.n	8010256 <__ieee754_sqrt+0x15a>
 80101ce:	2d00      	cmp	r5, #0
 80101d0:	db41      	blt.n	8010256 <__ieee754_sqrt+0x15a>
 80101d2:	f100 0801 	add.w	r8, r0, #1
 80101d6:	1a09      	subs	r1, r1, r0
 80101d8:	459c      	cmp	ip, r3
 80101da:	bf88      	it	hi
 80101dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80101e0:	eba3 030c 	sub.w	r3, r3, ip
 80101e4:	4432      	add	r2, r6
 80101e6:	4640      	mov	r0, r8
 80101e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80101ec:	f1be 0e01 	subs.w	lr, lr, #1
 80101f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80101f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80101f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80101fc:	d1db      	bne.n	80101b6 <__ieee754_sqrt+0xba>
 80101fe:	430b      	orrs	r3, r1
 8010200:	d006      	beq.n	8010210 <__ieee754_sqrt+0x114>
 8010202:	1c50      	adds	r0, r2, #1
 8010204:	bf13      	iteet	ne
 8010206:	3201      	addne	r2, #1
 8010208:	3401      	addeq	r4, #1
 801020a:	4672      	moveq	r2, lr
 801020c:	f022 0201 	bicne.w	r2, r2, #1
 8010210:	1063      	asrs	r3, r4, #1
 8010212:	0852      	lsrs	r2, r2, #1
 8010214:	07e1      	lsls	r1, r4, #31
 8010216:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801021a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801021e:	bf48      	it	mi
 8010220:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010224:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010228:	4614      	mov	r4, r2
 801022a:	e781      	b.n	8010130 <__ieee754_sqrt+0x34>
 801022c:	0ad9      	lsrs	r1, r3, #11
 801022e:	3815      	subs	r0, #21
 8010230:	055b      	lsls	r3, r3, #21
 8010232:	2900      	cmp	r1, #0
 8010234:	d0fa      	beq.n	801022c <__ieee754_sqrt+0x130>
 8010236:	02cd      	lsls	r5, r1, #11
 8010238:	d50a      	bpl.n	8010250 <__ieee754_sqrt+0x154>
 801023a:	f1c2 0420 	rsb	r4, r2, #32
 801023e:	fa23 f404 	lsr.w	r4, r3, r4
 8010242:	1e55      	subs	r5, r2, #1
 8010244:	4093      	lsls	r3, r2
 8010246:	4321      	orrs	r1, r4
 8010248:	1b42      	subs	r2, r0, r5
 801024a:	e78a      	b.n	8010162 <__ieee754_sqrt+0x66>
 801024c:	4610      	mov	r0, r2
 801024e:	e7f0      	b.n	8010232 <__ieee754_sqrt+0x136>
 8010250:	0049      	lsls	r1, r1, #1
 8010252:	3201      	adds	r2, #1
 8010254:	e7ef      	b.n	8010236 <__ieee754_sqrt+0x13a>
 8010256:	4680      	mov	r8, r0
 8010258:	e7bd      	b.n	80101d6 <__ieee754_sqrt+0xda>
 801025a:	bf00      	nop
 801025c:	7ff00000 	.word	0x7ff00000

08010260 <__ieee754_asinf>:
 8010260:	b538      	push	{r3, r4, r5, lr}
 8010262:	ee10 5a10 	vmov	r5, s0
 8010266:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801026a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801026e:	ed2d 8b04 	vpush	{d8-d9}
 8010272:	d10c      	bne.n	801028e <__ieee754_asinf+0x2e>
 8010274:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80103ec <__ieee754_asinf+0x18c>
 8010278:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80103f0 <__ieee754_asinf+0x190>
 801027c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010280:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010284:	eeb0 0a67 	vmov.f32	s0, s15
 8010288:	ecbd 8b04 	vpop	{d8-d9}
 801028c:	bd38      	pop	{r3, r4, r5, pc}
 801028e:	dd04      	ble.n	801029a <__ieee754_asinf+0x3a>
 8010290:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010294:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010298:	e7f6      	b.n	8010288 <__ieee754_asinf+0x28>
 801029a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801029e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80102a2:	da0b      	bge.n	80102bc <__ieee754_asinf+0x5c>
 80102a4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80102a8:	da52      	bge.n	8010350 <__ieee754_asinf+0xf0>
 80102aa:	eddf 7a52 	vldr	s15, [pc, #328]	; 80103f4 <__ieee754_asinf+0x194>
 80102ae:	ee70 7a27 	vadd.f32	s15, s0, s15
 80102b2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80102b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ba:	dce5      	bgt.n	8010288 <__ieee754_asinf+0x28>
 80102bc:	f000 fa2e 	bl	801071c <fabsf>
 80102c0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80102c4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80102c8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80102cc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80103f8 <__ieee754_asinf+0x198>
 80102d0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80103fc <__ieee754_asinf+0x19c>
 80102d4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8010400 <__ieee754_asinf+0x1a0>
 80102d8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80102dc:	eddf 7a49 	vldr	s15, [pc, #292]	; 8010404 <__ieee754_asinf+0x1a4>
 80102e0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80102e4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010408 <__ieee754_asinf+0x1a8>
 80102e8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80102ec:	eddf 7a47 	vldr	s15, [pc, #284]	; 801040c <__ieee754_asinf+0x1ac>
 80102f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80102f4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8010410 <__ieee754_asinf+0x1b0>
 80102f8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80102fc:	eddf 7a45 	vldr	s15, [pc, #276]	; 8010414 <__ieee754_asinf+0x1b4>
 8010300:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010304:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8010418 <__ieee754_asinf+0x1b8>
 8010308:	eea7 7a88 	vfma.f32	s14, s15, s16
 801030c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801041c <__ieee754_asinf+0x1bc>
 8010310:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010314:	eeb0 0a48 	vmov.f32	s0, s16
 8010318:	eee7 8a88 	vfma.f32	s17, s15, s16
 801031c:	f000 f926 	bl	801056c <__ieee754_sqrtf>
 8010320:	4b3f      	ldr	r3, [pc, #252]	; (8010420 <__ieee754_asinf+0x1c0>)
 8010322:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010326:	429c      	cmp	r4, r3
 8010328:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801032c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010330:	dd3d      	ble.n	80103ae <__ieee754_asinf+0x14e>
 8010332:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010336:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8010424 <__ieee754_asinf+0x1c4>
 801033a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801033e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80103f0 <__ieee754_asinf+0x190>
 8010342:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010346:	2d00      	cmp	r5, #0
 8010348:	bfd8      	it	le
 801034a:	eeb1 0a40 	vnegle.f32	s0, s0
 801034e:	e79b      	b.n	8010288 <__ieee754_asinf+0x28>
 8010350:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010354:	eddf 6a28 	vldr	s13, [pc, #160]	; 80103f8 <__ieee754_asinf+0x198>
 8010358:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80103fc <__ieee754_asinf+0x19c>
 801035c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8010410 <__ieee754_asinf+0x1b0>
 8010360:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010364:	eddf 6a27 	vldr	s13, [pc, #156]	; 8010404 <__ieee754_asinf+0x1a4>
 8010368:	eee7 6a27 	vfma.f32	s13, s14, s15
 801036c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8010408 <__ieee754_asinf+0x1a8>
 8010370:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010374:	eddf 6a25 	vldr	s13, [pc, #148]	; 801040c <__ieee754_asinf+0x1ac>
 8010378:	eee7 6a27 	vfma.f32	s13, s14, s15
 801037c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8010400 <__ieee754_asinf+0x1a0>
 8010380:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010384:	eddf 6a23 	vldr	s13, [pc, #140]	; 8010414 <__ieee754_asinf+0x1b4>
 8010388:	eee7 6a86 	vfma.f32	s13, s15, s12
 801038c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8010418 <__ieee754_asinf+0x1b8>
 8010390:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010394:	eddf 6a21 	vldr	s13, [pc, #132]	; 801041c <__ieee754_asinf+0x1bc>
 8010398:	eee6 6a27 	vfma.f32	s13, s12, s15
 801039c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80103a0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80103a4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80103a8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80103ac:	e76c      	b.n	8010288 <__ieee754_asinf+0x28>
 80103ae:	ee10 3a10 	vmov	r3, s0
 80103b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80103b6:	f023 030f 	bic.w	r3, r3, #15
 80103ba:	ee07 3a10 	vmov	s14, r3
 80103be:	eea7 8a47 	vfms.f32	s16, s14, s14
 80103c2:	ee70 7a07 	vadd.f32	s15, s0, s14
 80103c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80103ca:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80103ce:	eddf 7a07 	vldr	s15, [pc, #28]	; 80103ec <__ieee754_asinf+0x18c>
 80103d2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80103d6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80103da:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8010428 <__ieee754_asinf+0x1c8>
 80103de:	eeb0 6a40 	vmov.f32	s12, s0
 80103e2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80103e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80103ea:	e7aa      	b.n	8010342 <__ieee754_asinf+0xe2>
 80103ec:	b33bbd2e 	.word	0xb33bbd2e
 80103f0:	3fc90fdb 	.word	0x3fc90fdb
 80103f4:	7149f2ca 	.word	0x7149f2ca
 80103f8:	3811ef08 	.word	0x3811ef08
 80103fc:	3a4f7f04 	.word	0x3a4f7f04
 8010400:	3e2aaaab 	.word	0x3e2aaaab
 8010404:	bd241146 	.word	0xbd241146
 8010408:	3e4e0aa8 	.word	0x3e4e0aa8
 801040c:	bea6b090 	.word	0xbea6b090
 8010410:	3d9dc62e 	.word	0x3d9dc62e
 8010414:	bf303361 	.word	0xbf303361
 8010418:	4001572d 	.word	0x4001572d
 801041c:	c019d139 	.word	0xc019d139
 8010420:	3f799999 	.word	0x3f799999
 8010424:	333bbd2e 	.word	0x333bbd2e
 8010428:	3f490fdb 	.word	0x3f490fdb

0801042c <__ieee754_atan2f>:
 801042c:	ee10 2a90 	vmov	r2, s1
 8010430:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010434:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010438:	b510      	push	{r4, lr}
 801043a:	eef0 7a40 	vmov.f32	s15, s0
 801043e:	dc06      	bgt.n	801044e <__ieee754_atan2f+0x22>
 8010440:	ee10 0a10 	vmov	r0, s0
 8010444:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010448:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801044c:	dd04      	ble.n	8010458 <__ieee754_atan2f+0x2c>
 801044e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010452:	eeb0 0a67 	vmov.f32	s0, s15
 8010456:	bd10      	pop	{r4, pc}
 8010458:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801045c:	d103      	bne.n	8010466 <__ieee754_atan2f+0x3a>
 801045e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010462:	f000 b887 	b.w	8010574 <atanf>
 8010466:	1794      	asrs	r4, r2, #30
 8010468:	f004 0402 	and.w	r4, r4, #2
 801046c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010470:	b943      	cbnz	r3, 8010484 <__ieee754_atan2f+0x58>
 8010472:	2c02      	cmp	r4, #2
 8010474:	d05e      	beq.n	8010534 <__ieee754_atan2f+0x108>
 8010476:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010548 <__ieee754_atan2f+0x11c>
 801047a:	2c03      	cmp	r4, #3
 801047c:	bf08      	it	eq
 801047e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010482:	e7e6      	b.n	8010452 <__ieee754_atan2f+0x26>
 8010484:	b941      	cbnz	r1, 8010498 <__ieee754_atan2f+0x6c>
 8010486:	eddf 7a31 	vldr	s15, [pc, #196]	; 801054c <__ieee754_atan2f+0x120>
 801048a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8010550 <__ieee754_atan2f+0x124>
 801048e:	2800      	cmp	r0, #0
 8010490:	bfb8      	it	lt
 8010492:	eef0 7a40 	vmovlt.f32	s15, s0
 8010496:	e7dc      	b.n	8010452 <__ieee754_atan2f+0x26>
 8010498:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801049c:	d110      	bne.n	80104c0 <__ieee754_atan2f+0x94>
 801049e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80104a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80104a6:	d107      	bne.n	80104b8 <__ieee754_atan2f+0x8c>
 80104a8:	2c02      	cmp	r4, #2
 80104aa:	d846      	bhi.n	801053a <__ieee754_atan2f+0x10e>
 80104ac:	4b29      	ldr	r3, [pc, #164]	; (8010554 <__ieee754_atan2f+0x128>)
 80104ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80104b2:	edd4 7a00 	vldr	s15, [r4]
 80104b6:	e7cc      	b.n	8010452 <__ieee754_atan2f+0x26>
 80104b8:	2c02      	cmp	r4, #2
 80104ba:	d841      	bhi.n	8010540 <__ieee754_atan2f+0x114>
 80104bc:	4b26      	ldr	r3, [pc, #152]	; (8010558 <__ieee754_atan2f+0x12c>)
 80104be:	e7f6      	b.n	80104ae <__ieee754_atan2f+0x82>
 80104c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80104c4:	d0df      	beq.n	8010486 <__ieee754_atan2f+0x5a>
 80104c6:	1a5b      	subs	r3, r3, r1
 80104c8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80104cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80104d0:	da1a      	bge.n	8010508 <__ieee754_atan2f+0xdc>
 80104d2:	2a00      	cmp	r2, #0
 80104d4:	da01      	bge.n	80104da <__ieee754_atan2f+0xae>
 80104d6:	313c      	adds	r1, #60	; 0x3c
 80104d8:	db19      	blt.n	801050e <__ieee754_atan2f+0xe2>
 80104da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80104de:	f000 f91d 	bl	801071c <fabsf>
 80104e2:	f000 f847 	bl	8010574 <atanf>
 80104e6:	eef0 7a40 	vmov.f32	s15, s0
 80104ea:	2c01      	cmp	r4, #1
 80104ec:	d012      	beq.n	8010514 <__ieee754_atan2f+0xe8>
 80104ee:	2c02      	cmp	r4, #2
 80104f0:	d017      	beq.n	8010522 <__ieee754_atan2f+0xf6>
 80104f2:	2c00      	cmp	r4, #0
 80104f4:	d0ad      	beq.n	8010452 <__ieee754_atan2f+0x26>
 80104f6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801055c <__ieee754_atan2f+0x130>
 80104fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80104fe:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8010560 <__ieee754_atan2f+0x134>
 8010502:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010506:	e7a4      	b.n	8010452 <__ieee754_atan2f+0x26>
 8010508:	eddf 7a10 	vldr	s15, [pc, #64]	; 801054c <__ieee754_atan2f+0x120>
 801050c:	e7ed      	b.n	80104ea <__ieee754_atan2f+0xbe>
 801050e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010564 <__ieee754_atan2f+0x138>
 8010512:	e7ea      	b.n	80104ea <__ieee754_atan2f+0xbe>
 8010514:	ee17 3a90 	vmov	r3, s15
 8010518:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801051c:	ee07 3a90 	vmov	s15, r3
 8010520:	e797      	b.n	8010452 <__ieee754_atan2f+0x26>
 8010522:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801055c <__ieee754_atan2f+0x130>
 8010526:	ee77 7a80 	vadd.f32	s15, s15, s0
 801052a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010560 <__ieee754_atan2f+0x134>
 801052e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010532:	e78e      	b.n	8010452 <__ieee754_atan2f+0x26>
 8010534:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010560 <__ieee754_atan2f+0x134>
 8010538:	e78b      	b.n	8010452 <__ieee754_atan2f+0x26>
 801053a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010568 <__ieee754_atan2f+0x13c>
 801053e:	e788      	b.n	8010452 <__ieee754_atan2f+0x26>
 8010540:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010564 <__ieee754_atan2f+0x138>
 8010544:	e785      	b.n	8010452 <__ieee754_atan2f+0x26>
 8010546:	bf00      	nop
 8010548:	c0490fdb 	.word	0xc0490fdb
 801054c:	3fc90fdb 	.word	0x3fc90fdb
 8010550:	bfc90fdb 	.word	0xbfc90fdb
 8010554:	08010e0c 	.word	0x08010e0c
 8010558:	08010e18 	.word	0x08010e18
 801055c:	33bbbd2e 	.word	0x33bbbd2e
 8010560:	40490fdb 	.word	0x40490fdb
 8010564:	00000000 	.word	0x00000000
 8010568:	3f490fdb 	.word	0x3f490fdb

0801056c <__ieee754_sqrtf>:
 801056c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010570:	4770      	bx	lr
	...

08010574 <atanf>:
 8010574:	b538      	push	{r3, r4, r5, lr}
 8010576:	ee10 5a10 	vmov	r5, s0
 801057a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801057e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8010582:	eef0 7a40 	vmov.f32	s15, s0
 8010586:	db10      	blt.n	80105aa <atanf+0x36>
 8010588:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801058c:	dd04      	ble.n	8010598 <atanf+0x24>
 801058e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010592:	eeb0 0a67 	vmov.f32	s0, s15
 8010596:	bd38      	pop	{r3, r4, r5, pc}
 8010598:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80106d0 <atanf+0x15c>
 801059c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80106d4 <atanf+0x160>
 80105a0:	2d00      	cmp	r5, #0
 80105a2:	bfd8      	it	le
 80105a4:	eef0 7a40 	vmovle.f32	s15, s0
 80105a8:	e7f3      	b.n	8010592 <atanf+0x1e>
 80105aa:	4b4b      	ldr	r3, [pc, #300]	; (80106d8 <atanf+0x164>)
 80105ac:	429c      	cmp	r4, r3
 80105ae:	dc10      	bgt.n	80105d2 <atanf+0x5e>
 80105b0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80105b4:	da0a      	bge.n	80105cc <atanf+0x58>
 80105b6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80106dc <atanf+0x168>
 80105ba:	ee30 7a07 	vadd.f32	s14, s0, s14
 80105be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80105c2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80105c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ca:	dce2      	bgt.n	8010592 <atanf+0x1e>
 80105cc:	f04f 33ff 	mov.w	r3, #4294967295
 80105d0:	e013      	b.n	80105fa <atanf+0x86>
 80105d2:	f000 f8a3 	bl	801071c <fabsf>
 80105d6:	4b42      	ldr	r3, [pc, #264]	; (80106e0 <atanf+0x16c>)
 80105d8:	429c      	cmp	r4, r3
 80105da:	dc4f      	bgt.n	801067c <atanf+0x108>
 80105dc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80105e0:	429c      	cmp	r4, r3
 80105e2:	dc41      	bgt.n	8010668 <atanf+0xf4>
 80105e4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80105e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80105ec:	eea0 7a27 	vfma.f32	s14, s0, s15
 80105f0:	2300      	movs	r3, #0
 80105f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80105f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010600:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80106e4 <atanf+0x170>
 8010604:	eddf 5a38 	vldr	s11, [pc, #224]	; 80106e8 <atanf+0x174>
 8010608:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80106ec <atanf+0x178>
 801060c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010610:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010614:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80106f0 <atanf+0x17c>
 8010618:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801061c:	eddf 5a35 	vldr	s11, [pc, #212]	; 80106f4 <atanf+0x180>
 8010620:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010624:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80106f8 <atanf+0x184>
 8010628:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801062c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80106fc <atanf+0x188>
 8010630:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010634:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010700 <atanf+0x18c>
 8010638:	eea6 5a87 	vfma.f32	s10, s13, s14
 801063c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010704 <atanf+0x190>
 8010640:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010644:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010708 <atanf+0x194>
 8010648:	eea7 5a26 	vfma.f32	s10, s14, s13
 801064c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801070c <atanf+0x198>
 8010650:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010654:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010658:	eea5 7a86 	vfma.f32	s14, s11, s12
 801065c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010660:	d121      	bne.n	80106a6 <atanf+0x132>
 8010662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010666:	e794      	b.n	8010592 <atanf+0x1e>
 8010668:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801066c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010670:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010674:	2301      	movs	r3, #1
 8010676:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801067a:	e7be      	b.n	80105fa <atanf+0x86>
 801067c:	4b24      	ldr	r3, [pc, #144]	; (8010710 <atanf+0x19c>)
 801067e:	429c      	cmp	r4, r3
 8010680:	dc0b      	bgt.n	801069a <atanf+0x126>
 8010682:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801068a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801068e:	2302      	movs	r3, #2
 8010690:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010698:	e7af      	b.n	80105fa <atanf+0x86>
 801069a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801069e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80106a2:	2303      	movs	r3, #3
 80106a4:	e7a9      	b.n	80105fa <atanf+0x86>
 80106a6:	4a1b      	ldr	r2, [pc, #108]	; (8010714 <atanf+0x1a0>)
 80106a8:	491b      	ldr	r1, [pc, #108]	; (8010718 <atanf+0x1a4>)
 80106aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80106ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80106b2:	ed93 0a00 	vldr	s0, [r3]
 80106b6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80106ba:	ed92 0a00 	vldr	s0, [r2]
 80106be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106c2:	2d00      	cmp	r5, #0
 80106c4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80106c8:	bfb8      	it	lt
 80106ca:	eef1 7a67 	vneglt.f32	s15, s15
 80106ce:	e760      	b.n	8010592 <atanf+0x1e>
 80106d0:	3fc90fdb 	.word	0x3fc90fdb
 80106d4:	bfc90fdb 	.word	0xbfc90fdb
 80106d8:	3edfffff 	.word	0x3edfffff
 80106dc:	7149f2ca 	.word	0x7149f2ca
 80106e0:	3f97ffff 	.word	0x3f97ffff
 80106e4:	3c8569d7 	.word	0x3c8569d7
 80106e8:	3d4bda59 	.word	0x3d4bda59
 80106ec:	bd6ef16b 	.word	0xbd6ef16b
 80106f0:	3d886b35 	.word	0x3d886b35
 80106f4:	3dba2e6e 	.word	0x3dba2e6e
 80106f8:	3e124925 	.word	0x3e124925
 80106fc:	3eaaaaab 	.word	0x3eaaaaab
 8010700:	bd15a221 	.word	0xbd15a221
 8010704:	bd9d8795 	.word	0xbd9d8795
 8010708:	bde38e38 	.word	0xbde38e38
 801070c:	be4ccccd 	.word	0xbe4ccccd
 8010710:	401bffff 	.word	0x401bffff
 8010714:	08010e24 	.word	0x08010e24
 8010718:	08010e34 	.word	0x08010e34

0801071c <fabsf>:
 801071c:	ee10 3a10 	vmov	r3, s0
 8010720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010724:	ee00 3a10 	vmov	s0, r3
 8010728:	4770      	bx	lr
	...

0801072c <nanf>:
 801072c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010734 <nanf+0x8>
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop
 8010734:	7fc00000 	.word	0x7fc00000

08010738 <_init>:
 8010738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073a:	bf00      	nop
 801073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801073e:	bc08      	pop	{r3}
 8010740:	469e      	mov	lr, r3
 8010742:	4770      	bx	lr

08010744 <_fini>:
 8010744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010746:	bf00      	nop
 8010748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801074a:	bc08      	pop	{r3}
 801074c:	469e      	mov	lr, r3
 801074e:	4770      	bx	lr
